
wing_driver_NUCLEO_F439_Command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800c168  0800c168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c29c  0800c29c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c29c  0800c29c  0001c29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2a4  0800c2a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2a4  0800c2a4  0001c2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2a8  0800c2a8  0001c2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000cac  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d34  20000d34  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001690e  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038fe  00000000  00000000  00036a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b94  00000000  00000000  0003b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027666  00000000  00000000  0003bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014541  00000000  00000000  0006345a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de978  00000000  00000000  0007799b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047f0  00000000  00000000  00156314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0015ab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c150 	.word	0x0800c150

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800c150 	.word	0x0800c150

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	volatile int i = 10000000 *2/5;
 8000e0e:	4bc6      	ldr	r3, [pc, #792]	; (8001128 <main+0x320>)
 8000e10:	60bb      	str	r3, [r7, #8]
	while (i--);
 8000e12:	bf00      	nop
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1fa      	bne.n	8000e14 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 fb4d 	bl	80024bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 fbd7 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fd29 	bl	800187c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 fcf1 	bl	8001810 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e2e:	f000 fc9b 	bl	8001768 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000e32:	f000 fcc3 	bl	80017bc <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000e36:	f009 fe6f 	bl	800ab18 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000e3a:	f000 fc35 	bl	80016a8 <MX_CAN1_Init>
  MX_UART7_Init();
 8000e3e:	f000 fc69 	bl	8001714 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  config_CAN();															//Configures the CAN1 peripheral
 8000e42:	f000 fe31 	bl	8001aa8 <config_CAN>
  HAL_CAN_Start(&hcan1);												//Starts the CAN1 peripheral
 8000e46:	48b9      	ldr	r0, [pc, #740]	; (800112c <main+0x324>)
 8000e48:	f001 fdaa 	bl	80029a0 <HAL_CAN_Start>
  HAL_UART_Receive_DMA (&huart6, UART_rxBuffer, 54);					//Assigns the reception of DMA to the memory space to UART_rxBuffer
 8000e4c:	2236      	movs	r2, #54	; 0x36
 8000e4e:	49b8      	ldr	r1, [pc, #736]	; (8001130 <main+0x328>)
 8000e50:	48b8      	ldr	r0, [pc, #736]	; (8001134 <main+0x32c>)
 8000e52:	f005 fec9 	bl	8006be8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA (&huart7, UART_rx7Buffer, 16);					//Assigns the reception of DMA to the memory space to UART_rxBuffer
 8000e56:	2210      	movs	r2, #16
 8000e58:	49b7      	ldr	r1, [pc, #732]	; (8001138 <main+0x330>)
 8000e5a:	48b8      	ldr	r0, [pc, #736]	; (800113c <main+0x334>)
 8000e5c:	f005 fec4 	bl	8006be8 <HAL_UART_Receive_DMA>
  RetargetInit(&huart3);
 8000e60:	48b7      	ldr	r0, [pc, #732]	; (8001140 <main+0x338>)
 8000e62:	f001 f80d 	bl	8001e80 <RetargetInit>
  printf("\n----------------------------------------------------------------\n\r");
 8000e66:	48b7      	ldr	r0, [pc, #732]	; (8001144 <main+0x33c>)
 8000e68:	f00a fbfe 	bl	800b668 <iprintf>

  t0 = HAL_GetTick();
 8000e6c:	f001 fb8c 	bl	8002588 <HAL_GetTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4ab5      	ldr	r2, [pc, #724]	; (8001148 <main+0x340>)
 8000e74:	6013      	str	r3, [r2, #0]
  /*Test values*/
  TxData[0] = 0;
 8000e76:	4bb5      	ldr	r3, [pc, #724]	; (800114c <main+0x344>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 8000e7c:	4bb3      	ldr	r3, [pc, #716]	; (800114c <main+0x344>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	705a      	strb	r2, [r3, #1]
  flagBoatBrake = 1;
 8000e82:	4bb3      	ldr	r3, [pc, #716]	; (8001150 <main+0x348>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
  flagSpeedMode = 3;
 8000e88:	4bb2      	ldr	r3, [pc, #712]	; (8001154 <main+0x34c>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	601a      	str	r2, [r3, #0]
  flagBoatPowerSwitch = 1;
 8000e8e:	4bb2      	ldr	r3, [pc, #712]	; (8001158 <main+0x350>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
  flagWingMode = 1;
 8000e94:	4bb1      	ldr	r3, [pc, #708]	; (800115c <main+0x354>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]

  rudder_ref = 15;
 8000e9a:	4bb1      	ldr	r3, [pc, #708]	; (8001160 <main+0x358>)
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	601a      	str	r2, [r3, #0]
  boatThrottle = 50;
 8000ea0:	4bb0      	ldr	r3, [pc, #704]	; (8001164 <main+0x35c>)
 8000ea2:	2232      	movs	r2, #50	; 0x32
 8000ea4:	601a      	str	r2, [r3, #0]

  alpha_ref = 0;															//roll in degrees
 8000ea6:	4bb0      	ldr	r3, [pc, #704]	; (8001168 <main+0x360>)
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
  beta_ref = 0;																//pitch in degrees.
 8000eae:	4baf      	ldr	r3, [pc, #700]	; (800116c <main+0x364>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
  I_1 = 5;																	//Reference current in motor 1 in Amperes
 8000eb6:	4bae      	ldr	r3, [pc, #696]	; (8001170 <main+0x368>)
 8000eb8:	4aae      	ldr	r2, [pc, #696]	; (8001174 <main+0x36c>)
 8000eba:	601a      	str	r2, [r3, #0]
  I_4 = 5;																	//Reference current in motor 4 in Amperes
 8000ebc:	4bae      	ldr	r3, [pc, #696]	; (8001178 <main+0x370>)
 8000ebe:	4aad      	ldr	r2, [pc, #692]	; (8001174 <main+0x36c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ec2:	f009 fe4f 	bl	800ab64 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    /*Calculate the error in orientation*/
    e_alpha = alpha_ref - roll;
 8000ec6:	4ba8      	ldr	r3, [pc, #672]	; (8001168 <main+0x360>)
 8000ec8:	ed93 7a00 	vldr	s14, [r3]
 8000ecc:	4bab      	ldr	r3, [pc, #684]	; (800117c <main+0x374>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed6:	4baa      	ldr	r3, [pc, #680]	; (8001180 <main+0x378>)
 8000ed8:	edc3 7a00 	vstr	s15, [r3]
    e_beta = beta_ref - pitch;
 8000edc:	4ba3      	ldr	r3, [pc, #652]	; (800116c <main+0x364>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	4ba8      	ldr	r3, [pc, #672]	; (8001184 <main+0x37c>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eec:	4ba6      	ldr	r3, [pc, #664]	; (8001188 <main+0x380>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]

	/* Obtaining the linearized differences in rope */
	deltaL_F = l_F*(e_beta*3.14159/180);
 8000ef2:	4ba5      	ldr	r3, [pc, #660]	; (8001188 <main+0x380>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb2e 	bl	8000558 <__aeabi_f2d>
 8000efc:	a384      	add	r3, pc, #528	; (adr r3, 8001110 <main+0x308>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb81 	bl	8000608 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b9e      	ldr	r3, [pc, #632]	; (800118c <main+0x384>)
 8000f14:	f7ff fca2 	bl	800085c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	a37d      	add	r3, pc, #500	; (adr r3, 8001118 <main+0x310>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fb6f 	bl	8000608 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fd9b 	bl	8000a6c <__aeabi_d2f>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a95      	ldr	r2, [pc, #596]	; (8001190 <main+0x388>)
 8000f3a:	6013      	str	r3, [r2, #0]
	deltaL_A = -l_A*(e_beta*3.14159/180);
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <main+0x380>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb09 	bl	8000558 <__aeabi_f2d>
 8000f46:	a372      	add	r3, pc, #456	; (adr r3, 8001110 <main+0x308>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fb5c 	bl	8000608 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b8b      	ldr	r3, [pc, #556]	; (800118c <main+0x384>)
 8000f5e:	f7ff fc7d 	bl	800085c <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a36d      	add	r3, pc, #436	; (adr r3, 8001120 <main+0x318>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb4a 	bl	8000608 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fd76 	bl	8000a6c <__aeabi_d2f>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a84      	ldr	r2, [pc, #528]	; (8001194 <main+0x38c>)
 8000f84:	6013      	str	r3, [r2, #0]
	deltaL_B = -l_B*(e_alpha*3.14159/180);
 8000f86:	4b7e      	ldr	r3, [pc, #504]	; (8001180 <main+0x378>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fae4 	bl	8000558 <__aeabi_f2d>
 8000f90:	a35f      	add	r3, pc, #380	; (adr r3, 8001110 <main+0x308>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fb37 	bl	8000608 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b79      	ldr	r3, [pc, #484]	; (800118c <main+0x384>)
 8000fa8:	f7ff fc58 	bl	800085c <__aeabi_ddiv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b77      	ldr	r3, [pc, #476]	; (8001198 <main+0x390>)
 8000fba:	f7ff fb25 	bl	8000608 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fd51 	bl	8000a6c <__aeabi_d2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a73      	ldr	r2, [pc, #460]	; (800119c <main+0x394>)
 8000fce:	6013      	str	r3, [r2, #0]
	deltaL_T = l_T*(e_alpha*3.14159/180);
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <main+0x378>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fabf 	bl	8000558 <__aeabi_f2d>
 8000fda:	a34d      	add	r3, pc, #308	; (adr r3, 8001110 <main+0x308>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fb12 	bl	8000608 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <main+0x384>)
 8000ff2:	f7ff fc33 	bl	800085c <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b67      	ldr	r3, [pc, #412]	; (80011a0 <main+0x398>)
 8001004:	f7ff fb00 	bl	8000608 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd2c 	bl	8000a6c <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <main+0x39c>)
 8001018:	6013      	str	r3, [r2, #0]

	deltaL_1 = deltaL_F + deltaL_T;
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <main+0x388>)
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <main+0x39c>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102a:	4b5f      	ldr	r3, [pc, #380]	; (80011a8 <main+0x3a0>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	deltaL_2 = deltaL_A + deltaL_T;
 8001030:	4b58      	ldr	r3, [pc, #352]	; (8001194 <main+0x38c>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <main+0x39c>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <main+0x3a4>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
	deltaL_3 = deltaL_A + deltaL_B;
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <main+0x38c>)
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <main+0x394>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001056:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <main+0x3a8>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	deltaL_4 = deltaL_F + deltaL_B;
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <main+0x388>)
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	4b4e      	ldr	r3, [pc, #312]	; (800119c <main+0x394>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <main+0x3ac>)
 800106e:	edc3 7a00 	vstr	s15, [r3]

	V_2 = rotX*(-l_T) - rotY*(-l_A);										//Obtains the vel. of P2 with respect of the wing (+ goes up - goes down)
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <main+0x3b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa6e 	bl	8000558 <__aeabi_f2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <main+0x390>)
 8001082:	f7ff fac1 	bl	8000608 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4614      	mov	r4, r2
 800108c:	461d      	mov	r5, r3
 800108e:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <main+0x3b4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa60 	bl	8000558 <__aeabi_f2d>
 8001098:	a31f      	add	r3, pc, #124	; (adr r3, 8001118 <main+0x310>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fab3 	bl	8000608 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff f8f7 	bl	800029c <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fcd9 	bl	8000a6c <__aeabi_d2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <main+0x3b8>)
 80010be:	6013      	str	r3, [r2, #0]
	V_3 = rotX*(l_B) - rotY*(-l_A);											//Obtains the vel. of P3 with respect of the wing (+ goes up - goes down)
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x3b0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa47 	bl	8000558 <__aeabi_f2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <main+0x398>)
 80010d0:	f7ff fa9a 	bl	8000608 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <main+0x3b4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa39 	bl	8000558 <__aeabi_f2d>
 80010e6:	a30c      	add	r3, pc, #48	; (adr r3, 8001118 <main+0x310>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa8c 	bl	8000608 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f8d0 	bl	800029c <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcb2 	bl	8000a6c <__aeabi_d2f>
 8001108:	e05c      	b.n	80011c4 <main+0x3bc>
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	f01b866e 	.word	0xf01b866e
 8001114:	400921f9 	.word	0x400921f9
 8001118:	cccccccd 	.word	0xcccccccd
 800111c:	3fe4cccc 	.word	0x3fe4cccc
 8001120:	cccccccd 	.word	0xcccccccd
 8001124:	bfe4cccc 	.word	0xbfe4cccc
 8001128:	003d0900 	.word	0x003d0900
 800112c:	200000a4 	.word	0x200000a4
 8001130:	20000264 	.word	0x20000264
 8001134:	2000015c 	.word	0x2000015c
 8001138:	2000029c 	.word	0x2000029c
 800113c:	200000cc 	.word	0x200000cc
 8001140:	20000114 	.word	0x20000114
 8001144:	0800c168 	.word	0x0800c168
 8001148:	20000418 	.word	0x20000418
 800114c:	20000318 	.word	0x20000318
 8001150:	20000388 	.word	0x20000388
 8001154:	20000384 	.word	0x20000384
 8001158:	2000037c 	.word	0x2000037c
 800115c:	20000374 	.word	0x20000374
 8001160:	20000378 	.word	0x20000378
 8001164:	20000380 	.word	0x20000380
 8001168:	20000354 	.word	0x20000354
 800116c:	20000358 	.word	0x20000358
 8001170:	2000036c 	.word	0x2000036c
 8001174:	40a00000 	.word	0x40a00000
 8001178:	20000370 	.word	0x20000370
 800117c:	20000344 	.word	0x20000344
 8001180:	2000035c 	.word	0x2000035c
 8001184:	20000348 	.word	0x20000348
 8001188:	20000360 	.word	0x20000360
 800118c:	40668000 	.word	0x40668000
 8001190:	20000324 	.word	0x20000324
 8001194:	20000328 	.word	0x20000328
 8001198:	bff40000 	.word	0xbff40000
 800119c:	2000032c 	.word	0x2000032c
 80011a0:	3ff40000 	.word	0x3ff40000
 80011a4:	20000330 	.word	0x20000330
 80011a8:	20000334 	.word	0x20000334
 80011ac:	20000338 	.word	0x20000338
 80011b0:	2000033c 	.word	0x2000033c
 80011b4:	20000340 	.word	0x20000340
 80011b8:	2000034c 	.word	0x2000034c
 80011bc:	20000350 	.word	0x20000350
 80011c0:	20000364 	.word	0x20000364
 80011c4:	4603      	mov	r3, r0
 80011c6:	4aa1      	ldr	r2, [pc, #644]	; (800144c <main+0x644>)
 80011c8:	6013      	str	r3, [r2, #0]

	if (deltaL_2>0) {
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <main+0x648>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd03      	ble.n	80011e2 <main+0x3da>
		I_4 = 15;
 80011da:	4b9e      	ldr	r3, [pc, #632]	; (8001454 <main+0x64c>)
 80011dc:	4a9e      	ldr	r2, [pc, #632]	; (8001458 <main+0x650>)
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e003      	b.n	80011ea <main+0x3e2>
	}
	else {
		I_4 = 1;
 80011e2:	4b9c      	ldr	r3, [pc, #624]	; (8001454 <main+0x64c>)
 80011e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011e8:	601a      	str	r2, [r3, #0]
	}

	if (deltaL_3>0) {
 80011ea:	4b9c      	ldr	r3, [pc, #624]	; (800145c <main+0x654>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	dd03      	ble.n	8001202 <main+0x3fa>
		I_1 = 15;
 80011fa:	4b99      	ldr	r3, [pc, #612]	; (8001460 <main+0x658>)
 80011fc:	4a96      	ldr	r2, [pc, #600]	; (8001458 <main+0x650>)
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e003      	b.n	800120a <main+0x402>
	}
	else {
		I_1 = 1;
 8001202:	4b97      	ldr	r3, [pc, #604]	; (8001460 <main+0x658>)
 8001204:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001208:	601a      	str	r2, [r3, #0]
	}
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(I_1)), &TxMailbox);
 800120a:	4b96      	ldr	r3, [pc, #600]	; (8001464 <main+0x65c>)
 800120c:	4a94      	ldr	r2, [pc, #592]	; (8001460 <main+0x658>)
 800120e:	4996      	ldr	r1, [pc, #600]	; (8001468 <main+0x660>)
 8001210:	4896      	ldr	r0, [pc, #600]	; (800146c <main+0x664>)
 8001212:	f001 fc09 	bl	8002a28 <HAL_CAN_AddTxMessage>
	TxHeader.StdId=0x002;
 8001216:	4b94      	ldr	r3, [pc, #592]	; (8001468 <main+0x660>)
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(I_4)), &TxMailbox);
 800121c:	4b91      	ldr	r3, [pc, #580]	; (8001464 <main+0x65c>)
 800121e:	4a8d      	ldr	r2, [pc, #564]	; (8001454 <main+0x64c>)
 8001220:	4991      	ldr	r1, [pc, #580]	; (8001468 <main+0x660>)
 8001222:	4892      	ldr	r0, [pc, #584]	; (800146c <main+0x664>)
 8001224:	f001 fc00 	bl	8002a28 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8001228:	bf00      	nop
 800122a:	4890      	ldr	r0, [pc, #576]	; (800146c <main+0x664>)
 800122c:	f001 fccc 	bl	8002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b03      	cmp	r3, #3
 8001234:	d1f9      	bne.n	800122a <main+0x422>
	TxHeader.StdId=0x003;
 8001236:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <main+0x660>)
 8001238:	2203      	movs	r2, #3
 800123a:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(deltaL_2)), &TxMailbox);
 800123c:	4b89      	ldr	r3, [pc, #548]	; (8001464 <main+0x65c>)
 800123e:	4a84      	ldr	r2, [pc, #528]	; (8001450 <main+0x648>)
 8001240:	4989      	ldr	r1, [pc, #548]	; (8001468 <main+0x660>)
 8001242:	488a      	ldr	r0, [pc, #552]	; (800146c <main+0x664>)
 8001244:	f001 fbf0 	bl	8002a28 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8001248:	bf00      	nop
 800124a:	4888      	ldr	r0, [pc, #544]	; (800146c <main+0x664>)
 800124c:	f001 fcbc 	bl	8002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b03      	cmp	r3, #3
 8001254:	d1f9      	bne.n	800124a <main+0x442>
	TxHeader.StdId=0x004;
 8001256:	4b84      	ldr	r3, [pc, #528]	; (8001468 <main+0x660>)
 8001258:	2204      	movs	r2, #4
 800125a:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(deltaL_3)), &TxMailbox);
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <main+0x65c>)
 800125e:	4a7f      	ldr	r2, [pc, #508]	; (800145c <main+0x654>)
 8001260:	4981      	ldr	r1, [pc, #516]	; (8001468 <main+0x660>)
 8001262:	4882      	ldr	r0, [pc, #520]	; (800146c <main+0x664>)
 8001264:	f001 fbe0 	bl	8002a28 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8001268:	bf00      	nop
 800126a:	4880      	ldr	r0, [pc, #512]	; (800146c <main+0x664>)
 800126c:	f001 fcac 	bl	8002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b03      	cmp	r3, #3
 8001274:	d1f9      	bne.n	800126a <main+0x462>
	TxHeader.StdId=0x005;
 8001276:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <main+0x660>)
 8001278:	2205      	movs	r2, #5
 800127a:	601a      	str	r2, [r3, #0]
	TxData[3] = rudder_ref;
 800127c:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <main+0x668>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <main+0x66c>)
 8001284:	70da      	strb	r2, [r3, #3]
	TxData[2] = 0;
 8001286:	4b7b      	ldr	r3, [pc, #492]	; (8001474 <main+0x66c>)
 8001288:	2200      	movs	r2, #0
 800128a:	709a      	strb	r2, [r3, #2]
	TxData[1] = 0;
 800128c:	4b79      	ldr	r3, [pc, #484]	; (8001474 <main+0x66c>)
 800128e:	2200      	movs	r2, #0
 8001290:	705a      	strb	r2, [r3, #1]
	TxData[0] = 0;
 8001292:	4b78      	ldr	r3, [pc, #480]	; (8001474 <main+0x66c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (TxData), &TxMailbox);
 8001298:	4b72      	ldr	r3, [pc, #456]	; (8001464 <main+0x65c>)
 800129a:	4a76      	ldr	r2, [pc, #472]	; (8001474 <main+0x66c>)
 800129c:	4972      	ldr	r1, [pc, #456]	; (8001468 <main+0x660>)
 800129e:	4873      	ldr	r0, [pc, #460]	; (800146c <main+0x664>)
 80012a0:	f001 fbc2 	bl	8002a28 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 80012a4:	bf00      	nop
 80012a6:	4871      	ldr	r0, [pc, #452]	; (800146c <main+0x664>)
 80012a8:	f001 fc8e 	bl	8002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d1f9      	bne.n	80012a6 <main+0x49e>
	TxHeader.StdId=0x006;
 80012b2:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <main+0x660>)
 80012b4:	2206      	movs	r2, #6
 80012b6:	601a      	str	r2, [r3, #0]
	TxData[3] = boatThrottle;
 80012b8:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <main+0x670>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <main+0x66c>)
 80012c0:	70da      	strb	r2, [r3, #3]
	TxData[2] = 0;
 80012c2:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <main+0x66c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	709a      	strb	r2, [r3, #2]
	TxData[1] = 0;
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <main+0x66c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	705a      	strb	r2, [r3, #1]
	TxData[0] = 0;
 80012ce:	4b69      	ldr	r3, [pc, #420]	; (8001474 <main+0x66c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (TxData), &TxMailbox);
 80012d4:	4b63      	ldr	r3, [pc, #396]	; (8001464 <main+0x65c>)
 80012d6:	4a67      	ldr	r2, [pc, #412]	; (8001474 <main+0x66c>)
 80012d8:	4963      	ldr	r1, [pc, #396]	; (8001468 <main+0x660>)
 80012da:	4864      	ldr	r0, [pc, #400]	; (800146c <main+0x664>)
 80012dc:	f001 fba4 	bl	8002a28 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 80012e0:	bf00      	nop
 80012e2:	4862      	ldr	r0, [pc, #392]	; (800146c <main+0x664>)
 80012e4:	f001 fc70 	bl	8002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d1f9      	bne.n	80012e2 <main+0x4da>
	TxHeader.StdId=0x007;
 80012ee:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <main+0x660>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
	TxData[3] = flagWingMode;
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <main+0x674>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <main+0x66c>)
 80012fc:	70da      	strb	r2, [r3, #3]
	TxData[2] = flagBoatPowerSwitch;
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <main+0x678>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <main+0x66c>)
 8001306:	709a      	strb	r2, [r3, #2]
	TxData[1] = flagSpeedMode;
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <main+0x67c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b59      	ldr	r3, [pc, #356]	; (8001474 <main+0x66c>)
 8001310:	705a      	strb	r2, [r3, #1]
	TxData[0] = flagBoatBrake;
 8001312:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <main+0x680>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b56      	ldr	r3, [pc, #344]	; (8001474 <main+0x66c>)
 800131a:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (TxData), &TxMailbox);
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <main+0x65c>)
 800131e:	4a55      	ldr	r2, [pc, #340]	; (8001474 <main+0x66c>)
 8001320:	4951      	ldr	r1, [pc, #324]	; (8001468 <main+0x660>)
 8001322:	4852      	ldr	r0, [pc, #328]	; (800146c <main+0x664>)
 8001324:	f001 fb80 	bl	8002a28 <HAL_CAN_AddTxMessage>
//	TxHeader.StdId=0x005;
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(V_2)), &TxMailbox);
//	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
//	TxHeader.StdId=0x006;
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(V_3)), &TxMailbox);
	TxHeader.StdId=0x001;
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <main+0x660>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]


	if (Appli_state == APPLICATION_READY)
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <main+0x684>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	f040 80c2 	bne.w	80014bc <main+0x6b4>
	{
		CDC_HANDLE();
 8001338:	f000 fd78 	bl	8001e2c <CDC_HANDLE>
		for (int i = 0;  i<RX_USB_BUFF_SIZE; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	e07f      	b.n	8001442 <main+0x63a>
		{
			if (buffer[i] == 0x01 && buffer[i+1] == 0x04 && buffer[i+2] == 0x05 && buffer[i+8] == 0x81)
 8001342:	4a53      	ldr	r2, [pc, #332]	; (8001490 <main+0x688>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d176      	bne.n	800143c <main+0x634>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <main+0x688>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d170      	bne.n	800143c <main+0x634>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3302      	adds	r3, #2
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <main+0x688>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d16a      	bne.n	800143c <main+0x634>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3308      	adds	r3, #8
 800136a:	4a49      	ldr	r2, [pc, #292]	; (8001490 <main+0x688>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	2b81      	cmp	r3, #129	; 0x81
 8001370:	d164      	bne.n	800143c <main+0x634>
			{
				aws = (( (uint32_t) (buffer[i+4]))<<8U | ( (uint32_t) buffer[i+3])) * 50000 / 65535;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3304      	adds	r3, #4
 8001376:	4a46      	ldr	r2, [pc, #280]	; (8001490 <main+0x688>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	3203      	adds	r2, #3
 8001380:	4943      	ldr	r1, [pc, #268]	; (8001490 <main+0x688>)
 8001382:	5c8a      	ldrb	r2, [r1, r2]
 8001384:	4313      	orrs	r3, r2
 8001386:	f24c 3250 	movw	r2, #50000	; 0xc350
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a41      	ldr	r2, [pc, #260]	; (8001494 <main+0x68c>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0bdb      	lsrs	r3, r3, #15
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <main+0x690>)
 8001398:	6013      	str	r3, [r2, #0]
				awa = (( (uint32_t) (buffer[i+6]))<<8U | ( (uint32_t) buffer[i+5]));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3306      	adds	r3, #6
 800139e:	4a3c      	ldr	r2, [pc, #240]	; (8001490 <main+0x688>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	3205      	adds	r2, #5
 80013a8:	4939      	ldr	r1, [pc, #228]	; (8001490 <main+0x688>)
 80013aa:	5c8a      	ldrb	r2, [r1, r2]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <main+0x694>)
 80013b0:	6013      	str	r3, [r2, #0]
				awa = awa * (360.0 / 65536);
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <main+0x694>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8ac 	bl	8000514 <__aeabi_ui2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <main+0x698>)
 80013c2:	f7ff f921 	bl	8000608 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb2d 	bl	8000a2c <__aeabi_d2uiz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a31      	ldr	r2, [pc, #196]	; (800149c <main+0x694>)
 80013d6:	6013      	str	r3, [r2, #0]
				timeEllapsed = HAL_GetTick() - t0;
 80013d8:	f001 f8d6 	bl	8002588 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <main+0x69c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <main+0x6a0>)
 80013e6:	6013      	str	r3, [r2, #0]
				printf("t(ms): %lu ; awa(deg): %u; aws(m/s): %u.%u; roll: %d; pitch: %d \n\r", timeEllapsed, (unsigned int)(awa), (unsigned int)aws/100, (unsigned int)aws%100, (int)roll, (int) pitch);
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <main+0x6a0>)
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <main+0x694>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <main+0x690>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <main+0x6a4>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	095c      	lsrs	r4, r3, #5
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <main+0x690>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <main+0x6a4>)
 8001402:	fba3 5302 	umull	r5, r3, r3, r2
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2564      	movs	r5, #100	; 0x64
 800140a:	fb05 f303 	mul.w	r3, r5, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <main+0x6a8>)
 8001412:	edd2 7a00 	vldr	s15, [r2]
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	ee17 5a90 	vmov	r5, s15
 800141e:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <main+0x6ac>)
 8001420:	edd2 7a00 	vldr	s15, [r2]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 2a90 	vmov	r2, s15
 800142c:	9202      	str	r2, [sp, #8]
 800142e:	9501      	str	r5, [sp, #4]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	4602      	mov	r2, r0
 8001436:	4820      	ldr	r0, [pc, #128]	; (80014b8 <main+0x6b0>)
 8001438:	f00a f916 	bl	800b668 <iprintf>
		for (int i = 0;  i<RX_USB_BUFF_SIZE; i++)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b3f      	cmp	r3, #63	; 0x3f
 8001446:	f77f af7c 	ble.w	8001342 <main+0x53a>
 800144a:	e0a4      	b.n	8001596 <main+0x78e>
 800144c:	20000368 	.word	0x20000368
 8001450:	20000338 	.word	0x20000338
 8001454:	20000370 	.word	0x20000370
 8001458:	41700000 	.word	0x41700000
 800145c:	2000033c 	.word	0x2000033c
 8001460:	2000036c 	.word	0x2000036c
 8001464:	20000320 	.word	0x20000320
 8001468:	200002d8 	.word	0x200002d8
 800146c:	200000a4 	.word	0x200000a4
 8001470:	20000378 	.word	0x20000378
 8001474:	20000318 	.word	0x20000318
 8001478:	20000380 	.word	0x20000380
 800147c:	20000374 	.word	0x20000374
 8001480:	2000037c 	.word	0x2000037c
 8001484:	20000384 	.word	0x20000384
 8001488:	20000388 	.word	0x20000388
 800148c:	20000804 	.word	0x20000804
 8001490:	200003d0 	.word	0x200003d0
 8001494:	80008001 	.word	0x80008001
 8001498:	20000414 	.word	0x20000414
 800149c:	20000410 	.word	0x20000410
 80014a0:	3f768000 	.word	0x3f768000
 80014a4:	20000418 	.word	0x20000418
 80014a8:	2000041c 	.word	0x2000041c
 80014ac:	51eb851f 	.word	0x51eb851f
 80014b0:	20000344 	.word	0x20000344
 80014b4:	20000348 	.word	0x20000348
 80014b8:	0800c1ac 	.word	0x0800c1ac
			}
		}
	}
	else
	{
		timeEllapsed = HAL_GetTick() - t0;
 80014bc:	f001 f864 	bl	8002588 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <main+0x798>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <main+0x79c>)
 80014ca:	6013      	str	r3, [r2, #0]
		printf("t(ms): %lu ; roll: %d.%u; pitch: %d.%d ;L2(mm) %d ;L3(mm) %d ;I1(A) %d; I4(A) %d \n\r", timeEllapsed, (int)roll,(unsigned int)(roll*100)%100 , (int) pitch,(unsigned int)(pitch*100)%100, (int)(deltaL_1*1000), (int)(deltaL_2*1000), (int)I_1, (int)I_4);
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <main+0x79c>)
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <main+0x7a0>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <main+0x7a0>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015ac <main+0x7a4>
 80014e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ec:	ee17 0a90 	vmov	r0, s15
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <main+0x7a8>)
 80014f2:	fba3 2300 	umull	r2, r3, r3, r0
 80014f6:	095a      	lsrs	r2, r3, #5
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	1ac2      	subs	r2, r0, r3
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <main+0x7ac>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 5a90 	vmov	r5, s15
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <main+0x7ac>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015ac <main+0x7a4>
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <main+0x7a8>)
 8001526:	fba3 4300 	umull	r4, r3, r3, r0
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2464      	movs	r4, #100	; 0x64
 800152e:	fb04 f303 	mul.w	r3, r4, r3
 8001532:	1ac3      	subs	r3, r0, r3
 8001534:	4820      	ldr	r0, [pc, #128]	; (80015b8 <main+0x7b0>)
 8001536:	edd0 7a00 	vldr	s15, [r0]
 800153a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015bc <main+0x7b4>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001546:	ee17 4a90 	vmov	r4, s15
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <main+0x7b8>)
 800154c:	edd0 7a00 	vldr	s15, [r0]
 8001550:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015bc <main+0x7b4>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	ee17 6a90 	vmov	r6, s15
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <main+0x7bc>)
 8001562:	edd0 7a00 	vldr	s15, [r0]
 8001566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156a:	edc7 7a01 	vstr	s15, [r7, #4]
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <main+0x7c0>)
 8001570:	edd0 7a00 	vldr	s15, [r0]
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 0a90 	vmov	r0, s15
 800157c:	9005      	str	r0, [sp, #20]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	9004      	str	r0, [sp, #16]
 8001582:	9603      	str	r6, [sp, #12]
 8001584:	9402      	str	r4, [sp, #8]
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	9500      	str	r5, [sp, #0]
 800158a:	4613      	mov	r3, r2
 800158c:	ee16 2a90 	vmov	r2, s13
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <main+0x7c4>)
 8001592:	f00a f869 	bl	800b668 <iprintf>
	/*Test routine*/
	//HAL_UART_Transmit(&huart7, (uint8_t)(x), sizeof (uint8_t), 10);
//	timeEllapsed = HAL_GetTick() - t0;
//	printf("t(ms): %lu ;roll: %d; pitch: %d; L2(mm): %d;L3(mm): %d ; I1(A): %d;I4(A): %d\n\r", timeEllapsed,(int)roll, (int) pitch, (int) (deltaL_2*1000), (int) (deltaL_3*1000),(int) I_1,(int) I_4);
	//HAL_UART_Transmit(&huart7, (int8_t)(&(deltaL_2)), sizeof (int8_t), 10);
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001596:	2101      	movs	r1, #1
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <main+0x7c8>)
 800159a:	f002 fbe6 	bl	8003d6a <HAL_GPIO_TogglePin>
    MX_USB_HOST_Process();
 800159e:	e490      	b.n	8000ec2 <main+0xba>
 80015a0:	20000418 	.word	0x20000418
 80015a4:	2000041c 	.word	0x2000041c
 80015a8:	20000344 	.word	0x20000344
 80015ac:	42c80000 	.word	0x42c80000
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	20000348 	.word	0x20000348
 80015b8:	20000334 	.word	0x20000334
 80015bc:	447a0000 	.word	0x447a0000
 80015c0:	20000338 	.word	0x20000338
 80015c4:	2000036c 	.word	0x2000036c
 80015c8:	20000370 	.word	0x20000370
 80015cc:	0800c1f0 	.word	0x0800c1f0
 80015d0:	40020400 	.word	0x40020400

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b094      	sub	sp, #80	; 0x50
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2230      	movs	r2, #48	; 0x30
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00a f852 	bl	800b68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <SystemClock_Config+0xcc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <SystemClock_Config+0xcc>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <SystemClock_Config+0xcc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <SystemClock_Config+0xd0>)
 800161e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163a:	2302      	movs	r3, #2
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001644:	2304      	movs	r3, #4
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001648:	23a8      	movs	r3, #168	; 0xa8
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001650:	2307      	movs	r3, #7
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fcbb 	bl	8005fd4 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001664:	f000 fc06 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2302      	movs	r3, #2
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2105      	movs	r1, #5
 8001686:	4618      	mov	r0, r3
 8001688:	f004 ff1c 	bl	80064c4 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001692:	f000 fbef 	bl	8001e74 <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	3750      	adds	r7, #80	; 0x50
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000

080016a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_CAN1_Init+0x64>)
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <MX_CAN1_Init+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_CAN1_Init+0x64>)
 80016b4:	2218      	movs	r2, #24
 80016b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_CAN1_Init+0x64>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_CAN1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_CAN1_Init+0x64>)
 80016c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_CAN1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <MX_CAN1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_CAN1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_CAN1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_CAN1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_CAN1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_CAN1_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_CAN1_Init+0x64>)
 80016fa:	f000 ff75 	bl	80025e8 <HAL_CAN_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001704:	f000 fbb6 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200000a4 	.word	0x200000a4
 8001710:	40006400 	.word	0x40006400

08001714 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_UART7_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_UART7_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_UART7_Init+0x4c>)
 8001720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001724:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_UART7_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_UART7_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_UART7_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_UART7_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_UART7_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_UART7_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_UART7_Init+0x4c>)
 800174c:	f005 f8da 	bl	8006904 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 fb8d 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000cc 	.word	0x200000cc
 8001764:	40007800 	.word	0x40007800

08001768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART3_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART3_UART_Init+0x4c>)
 80017a0:	f005 f8b0 	bl	8006904 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 fb63 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000114 	.word	0x20000114
 80017b8:	40004800 	.word	0x40004800

080017bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART6_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017f4:	f005 f886 	bl	8006904 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 fb39 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000015c 	.word	0x2000015c
 800180c:	40011400 	.word	0x40011400

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_DMA_Init+0x68>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <MX_DMA_Init+0x68>)
 8001820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_DMA_Init+0x68>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_DMA_Init+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <MX_DMA_Init+0x68>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <MX_DMA_Init+0x68>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	200e      	movs	r0, #14
 8001854:	f001 fd1d 	bl	8003292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001858:	200e      	movs	r0, #14
 800185a:	f001 fd36 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2039      	movs	r0, #57	; 0x39
 8001864:	f001 fd15 	bl	8003292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001868:	2039      	movs	r0, #57	; 0x39
 800186a:	f001 fd2e 	bl	80032ca <HAL_NVIC_EnableIRQ>

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a7d      	ldr	r2, [pc, #500]	; (8001a90 <MX_GPIO_Init+0x214>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a76      	ldr	r2, [pc, #472]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a6f      	ldr	r2, [pc, #444]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a68      	ldr	r2, [pc, #416]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <MX_GPIO_Init+0x214>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a61      	ldr	r2, [pc, #388]	; (8001a90 <MX_GPIO_Init+0x214>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a5a      	ldr	r2, [pc, #360]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a53      	ldr	r2, [pc, #332]	; (8001a90 <MX_GPIO_Init+0x214>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <MX_GPIO_Init+0x214>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f244 0181 	movw	r1, #16513	; 0x4081
 800195c:	484d      	ldr	r0, [pc, #308]	; (8001a94 <MX_GPIO_Init+0x218>)
 800195e:	f002 f9eb 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTS_GPIO_Port, CTS_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001968:	484b      	ldr	r0, [pc, #300]	; (8001a98 <MX_GPIO_Init+0x21c>)
 800196a:	f002 f9e5 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	484a      	ldr	r0, [pc, #296]	; (8001a9c <MX_GPIO_Init+0x220>)
 8001974:	f002 f9e0 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4844      	ldr	r0, [pc, #272]	; (8001aa0 <MX_GPIO_Init+0x224>)
 8001990:	f002 f826 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001994:	2332      	movs	r3, #50	; 0x32
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a4:	230b      	movs	r3, #11
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	483c      	ldr	r0, [pc, #240]	; (8001aa0 <MX_GPIO_Init+0x224>)
 80019b0:	f002 f816 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019b4:	2386      	movs	r3, #134	; 0x86
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c4:	230b      	movs	r3, #11
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	4835      	ldr	r0, [pc, #212]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80019d0:	f002 f806 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4829      	ldr	r0, [pc, #164]	; (8001a94 <MX_GPIO_Init+0x218>)
 80019ee:	f001 fff7 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTS_Pin */
  GPIO_InitStruct.Pin = CTS_Pin;
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CTS_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <MX_GPIO_Init+0x21c>)
 8001a0c:	f001 ffe8 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a22:	230b      	movs	r3, #11
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4819      	ldr	r0, [pc, #100]	; (8001a94 <MX_GPIO_Init+0x218>)
 8001a2e:	f001 ffd7 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4814      	ldr	r0, [pc, #80]	; (8001a9c <MX_GPIO_Init+0x220>)
 8001a4a:	f001 ffc9 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480e      	ldr	r0, [pc, #56]	; (8001a9c <MX_GPIO_Init+0x220>)
 8001a62:	f001 ffbd 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a78:	230b      	movs	r3, #11
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_GPIO_Init+0x220>)
 8001a84:	f001 ffac 	bl	80039e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a88:	bf00      	nop
 8001a8a:	3730      	adds	r7, #48	; 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <config_CAN>:

/* USER CODE BEGIN 4 */
void config_CAN(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	/*Defining the Header of the TX message*/
	  TxHeader.DLC=4;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <config_CAN+0x5c>)
 8001aae:	2204      	movs	r2, #4
 8001ab0:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE=CAN_ID_STD;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <config_CAN+0x5c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR=CAN_RTR_DATA;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <config_CAN+0x5c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId=0x001;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <config_CAN+0x5c>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

	/*Configuring the RX filter*/
	  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <config_CAN+0x60>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterIdHigh=0x245<<5;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <config_CAN+0x60>)
 8001acc:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8001ad0:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <config_CAN+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <config_CAN+0x60>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <config_CAN+0x60>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <config_CAN+0x60>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <config_CAN+0x60>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	621a      	str	r2, [r3, #32]
	  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001af0:	4905      	ldr	r1, [pc, #20]	; (8001b08 <config_CAN+0x60>)
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <config_CAN+0x64>)
 8001af4:	f000 fe74 	bl	80027e0 <HAL_CAN_ConfigFilter>

	  /*Activating the notification to receive a message*/
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001af8:	2102      	movs	r1, #2
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <config_CAN+0x64>)
 8001afc:	f001 f899 	bl	8002c32 <HAL_CAN_ActivateNotification>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200002d8 	.word	0x200002d8
 8001b08:	200002f0 	.word	0x200002f0
 8001b0c:	200000a4 	.word	0x200000a4

08001b10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	parseMTData2(UART_rxBuffer+2,51);										//Parses the data received from the MT device
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_UART_RxCpltCallback+0xec>)
 8001b1a:	2133      	movs	r1, #51	; 0x33
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f891 	bl	8001c44 <parseMTData2>
	roll = euler[0];
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_UART_RxCpltCallback+0xf0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <HAL_UART_RxCpltCallback+0xf4>)
 8001b28:	6013      	str	r3, [r2, #0]
	pitch =  euler[1];
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_UART_RxCpltCallback+0xf0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_UART_RxCpltCallback+0xf8>)
 8001b30:	6013      	str	r3, [r2, #0]
	rotX = rot[0];
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_UART_RxCpltCallback+0xfc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a36      	ldr	r2, [pc, #216]	; (8001c10 <HAL_UART_RxCpltCallback+0x100>)
 8001b38:	6013      	str	r3, [r2, #0]
	rotY = rot[1];
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_UART_RxCpltCallback+0xfc>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a35      	ldr	r2, [pc, #212]	; (8001c14 <HAL_UART_RxCpltCallback+0x104>)
 8001b40:	6013      	str	r3, [r2, #0]

	if (UART_rx7Buffer[0] == 0x01)
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d104      	bne.n	8001b54 <HAL_UART_RxCpltCallback+0x44>
	{
		flagWingMode = (int) UART_rx7Buffer[1];
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_UART_RxCpltCallback+0x10c>)
 8001b52:	601a      	str	r2, [r3, #0]
	}
	if (UART_rx7Buffer[2] == 0x02)
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d109      	bne.n	8001b70 <HAL_UART_RxCpltCallback+0x60>
	{
		beta_ref = (signed char) UART_rx7Buffer[3];
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b5e:	78db      	ldrb	r3, [r3, #3]
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_UART_RxCpltCallback+0x110>)
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
	}
	if (UART_rx7Buffer[4] == 0x03)
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d109      	bne.n	8001b8c <HAL_UART_RxCpltCallback+0x7c>
	{
		alpha_ref = (signed char) UART_rx7Buffer[5];
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b7a:	795b      	ldrb	r3, [r3, #5]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_UART_RxCpltCallback+0x114>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
	}
	if (UART_rx7Buffer[6] == 0x04)
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b8e:	799b      	ldrb	r3, [r3, #6]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d105      	bne.n	8001ba0 <HAL_UART_RxCpltCallback+0x90>
	{
		rudder_ref = (signed char) UART_rx7Buffer[7];
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001b96:	79db      	ldrb	r3, [r3, #7]
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_UART_RxCpltCallback+0x118>)
 8001b9e:	601a      	str	r2, [r3, #0]
	}
	if (UART_rx7Buffer[8] == 0x05)
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001ba2:	7a1b      	ldrb	r3, [r3, #8]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d104      	bne.n	8001bb2 <HAL_UART_RxCpltCallback+0xa2>
	{
		flagBoatPowerSwitch = (int) UART_rx7Buffer[9];
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001baa:	7a5b      	ldrb	r3, [r3, #9]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_UART_RxCpltCallback+0x11c>)
 8001bb0:	601a      	str	r2, [r3, #0]
	}
	if (UART_rx7Buffer[10] == 0x06)
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001bb4:	7a9b      	ldrb	r3, [r3, #10]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d105      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0xb6>
	{
		boatThrottle = (signed char) UART_rx7Buffer[11];
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001bbc:	7adb      	ldrb	r3, [r3, #11]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_UART_RxCpltCallback+0x120>)
 8001bc4:	601a      	str	r2, [r3, #0]
	}
	if (UART_rx7Buffer[12] == 0x07)
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001bc8:	7b1b      	ldrb	r3, [r3, #12]
 8001bca:	2b07      	cmp	r3, #7
 8001bcc:	d104      	bne.n	8001bd8 <HAL_UART_RxCpltCallback+0xc8>
	{
		flagSpeedMode = (int) UART_rx7Buffer[13];
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001bd0:	7b5b      	ldrb	r3, [r3, #13]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_UART_RxCpltCallback+0x124>)
 8001bd6:	601a      	str	r2, [r3, #0]
	}
	if (UART_rx7Buffer[14] == 0x08)
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001bda:	7b9b      	ldrb	r3, [r3, #14]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d104      	bne.n	8001bea <HAL_UART_RxCpltCallback+0xda>
	{
		flagBoatBrake = (int) UART_rx7Buffer[15];
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_UART_RxCpltCallback+0x108>)
 8001be2:	7bdb      	ldrb	r3, [r3, #15]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_RxCpltCallback+0x128>)
 8001be8:	601a      	str	r2, [r3, #0]
//	}
//	HAL_UART_Transmit(&huart3, (&(pitch)), sizeof (float), 10);
//	HAL_UART_Transmit(&huart3, (&(rotY)), sizeof (float), 10);
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(pitch)), &TxMailbox);
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (&(rotY)), &TxMailbox);
	HAL_UART_Receive_DMA(&huart6, UART_rxBuffer, 54);						//Waits for a new message to be received
 8001bea:	2236      	movs	r2, #54	; 0x36
 8001bec:	4913      	ldr	r1, [pc, #76]	; (8001c3c <HAL_UART_RxCpltCallback+0x12c>)
 8001bee:	4814      	ldr	r0, [pc, #80]	; (8001c40 <HAL_UART_RxCpltCallback+0x130>)
 8001bf0:	f004 fffa 	bl	8006be8 <HAL_UART_Receive_DMA>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000266 	.word	0x20000266
 8001c00:	200002ac 	.word	0x200002ac
 8001c04:	20000344 	.word	0x20000344
 8001c08:	20000348 	.word	0x20000348
 8001c0c:	200002c4 	.word	0x200002c4
 8001c10:	2000034c 	.word	0x2000034c
 8001c14:	20000350 	.word	0x20000350
 8001c18:	2000029c 	.word	0x2000029c
 8001c1c:	20000374 	.word	0x20000374
 8001c20:	20000358 	.word	0x20000358
 8001c24:	20000354 	.word	0x20000354
 8001c28:	20000378 	.word	0x20000378
 8001c2c:	2000037c 	.word	0x2000037c
 8001c30:	20000380 	.word	0x20000380
 8001c34:	20000384 	.word	0x20000384
 8001c38:	20000388 	.word	0x20000388
 8001c3c:	20000264 	.word	0x20000264
 8001c40:	2000015c 	.word	0x2000015c

08001c44 <parseMTData2>:

void parseMTData2(uint8_t* data, uint8_t datalength) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
  if (datalength < 2)                                                           //Reached the end of the MTData2 message
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d97c      	bls.n	8001d50 <parseMTData2+0x10c>
    return;

  uint8_t XDI = data[0] ;                                                       //Xsens Data Identifier
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  if (XDI == (uint8_t)MTDATA2) {                                         //Start of the MTData2 message
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b36      	cmp	r3, #54	; 0x36
 8001c60:	d10a      	bne.n	8001c78 <parseMTData2+0x34>
    uint8_t length = data[1];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	737b      	strb	r3, [r7, #13]
    parseMTData2(data + 2, length);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	7b7a      	ldrb	r2, [r7, #13]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffe7 	bl	8001c44 <parseMTData2>
 8001c76:	e06c      	b.n	8001d52 <parseMTData2+0x10e>
  } else {
    uint8_t length = data[2];
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	789b      	ldrb	r3, [r3, #2]
 8001c7c:	73bb      	strb	r3, [r7, #14]

    switch (((uint16_t)data[1] | ((uint16_t)data[0] << 8)) & (uint16_t)0xFFFF) { //Extract the 2-byte Xsens Data Identifier
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3301      	adds	r3, #1
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f248 0220 	movw	r2, #32800	; 0x8020
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d030      	beq.n	8001cfa <parseMTData2+0xb6>
 8001c98:	f248 0220 	movw	r2, #32800	; 0x8020
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	dc48      	bgt.n	8001d32 <parseMTData2+0xee>
 8001ca0:	f245 0240 	movw	r2, #20544	; 0x5040
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d036      	beq.n	8001d16 <parseMTData2+0xd2>
 8001ca8:	f245 0240 	movw	r2, #20544	; 0x5040
 8001cac:	4293      	cmp	r3, r2
 8001cae:	dc40      	bgt.n	8001d32 <parseMTData2+0xee>
 8001cb0:	f242 0230 	movw	r2, #8240	; 0x2030
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <parseMTData2+0x7e>
 8001cb8:	f244 0220 	movw	r2, #16416	; 0x4020
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <parseMTData2+0x9a>
      case ((uint16_t)LATLON):
        dataswapendian(data + 3, sizeof(float) * 2);
        memcpy(latlon, data + 3, sizeof(float) * 2);
        break;
      default:
        break;
 8001cc0:	e037      	b.n	8001d32 <parseMTData2+0xee>
        dataswapendian(data + 3, sizeof(float) * 3);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	210c      	movs	r1, #12
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f84d 	bl	8001d68 <dataswapendian>
        memcpy(euler, data + 3, sizeof(float) * 3);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4820      	ldr	r0, [pc, #128]	; (8001d58 <parseMTData2+0x114>)
 8001cd8:	f009 fd3f 	bl	800b75a <memcpy>
        break;
 8001cdc:	e02a      	b.n	8001d34 <parseMTData2+0xf0>
        dataswapendian(data + 3, sizeof(float) * 3);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	210c      	movs	r1, #12
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 f83f 	bl	8001d68 <dataswapendian>
        memcpy(acc, data + 3, sizeof(float) * 3);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3303      	adds	r3, #3
 8001cee:	220c      	movs	r2, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481a      	ldr	r0, [pc, #104]	; (8001d5c <parseMTData2+0x118>)
 8001cf4:	f009 fd31 	bl	800b75a <memcpy>
        break;
 8001cf8:	e01c      	b.n	8001d34 <parseMTData2+0xf0>
        dataswapendian(data + 3, sizeof(float) * 3);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	210c      	movs	r1, #12
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f831 	bl	8001d68 <dataswapendian>
        memcpy(rot, data + 3, sizeof(float) * 3);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3303      	adds	r3, #3
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <parseMTData2+0x11c>)
 8001d10:	f009 fd23 	bl	800b75a <memcpy>
        break;
 8001d14:	e00e      	b.n	8001d34 <parseMTData2+0xf0>
        dataswapendian(data + 3, sizeof(float) * 2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	2108      	movs	r1, #8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f823 	bl	8001d68 <dataswapendian>
        memcpy(latlon, data + 3, sizeof(float) * 2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3303      	adds	r3, #3
 8001d26:	2208      	movs	r2, #8
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <parseMTData2+0x120>)
 8001d2c:	f009 fd15 	bl	800b75a <memcpy>
        break;
 8001d30:	e000      	b.n	8001d34 <parseMTData2+0xf0>
        break;
 8001d32:	bf00      	nop
    }
    parseMTData2(data + length + 3, datalength - length - 3);                     //Move onto next data element within MTData2 packet
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	3303      	adds	r3, #3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	18d0      	adds	r0, r2, r3
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3b03      	subs	r3, #3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7ff ff7b 	bl	8001c44 <parseMTData2>
 8001d4e:	e000      	b.n	8001d52 <parseMTData2+0x10e>
    return;
 8001d50:	bf00      	nop
  }
}
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200002ac 	.word	0x200002ac
 8001d5c:	200002b8 	.word	0x200002b8
 8001d60:	200002c4 	.word	0x200002c4
 8001d64:	200002d0 	.word	0x200002d0

08001d68 <dataswapendian>:

void dataswapendian(uint8_t* data, uint8_t length) {                         		 //Swap the endianness of the data such that the float value can be printed
 8001d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
 8001d76:	466b      	mov	r3, sp
 8001d78:	461e      	mov	r6, r3
  uint8_t cpy[length];                                                              //Create a copy of the data
 8001d7a:	78f9      	ldrb	r1, [r7, #3]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	b2cb      	uxtb	r3, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	4698      	mov	r8, r3
 8001d88:	4691      	mov	r9, r2
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d9e:	b2cb      	uxtb	r3, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	461c      	mov	r4, r3
 8001da4:	4615      	mov	r5, r2
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	00eb      	lsls	r3, r5, #3
 8001db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db4:	00e2      	lsls	r2, r4, #3
 8001db6:	460b      	mov	r3, r1
 8001db8:	3307      	adds	r3, #7
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc2:	466b      	mov	r3, sp
 8001dc4:	3300      	adds	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  memcpy(cpy, data, length);                                                        //Create a copy of the data
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f009 fcc3 	bl	800b75a <memcpy>
  for (int i = 0; i < length / 4; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e01b      	b.n	8001e12 <dataswapendian+0xaa>
    for (int j = 0; j < 4; j++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e012      	b.n	8001e06 <dataswapendian+0x9e>
      data[j + i * 4] = cpy[3 - j + i * 4];                                         //Within each 4-byte (32-bit) float, reverse the order of the individual bytes
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f1c3 0203 	rsb	r2, r3, #3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	440b      	add	r3, r1
 8001df4:	4619      	mov	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	440b      	add	r3, r1
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	5c8a      	ldrb	r2, [r1, r2]
 8001dfe:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 4; j++) {
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	3301      	adds	r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	dde9      	ble.n	8001de0 <dataswapendian+0x78>
  for (int i = 0; i < length / 4; i++) {
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	dbdc      	blt.n	8001dda <dataswapendian+0x72>
 8001e20:	46b5      	mov	sp, r6
    }
  }
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e2c <CDC_HANDLE>:

void CDC_HANDLE (void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	USBH_CDC_Stop(&hUsbHostFS);
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <CDC_HANDLE+0x28>)
 8001e32:	f006 ffec 	bl	8008e0e <USBH_CDC_Stop>
	usbresult = USBH_CDC_Receive(&hUsbHostFS, (uint8_t *) CDC_RX_Buffer, RX_USB_BUFF_SIZE);
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <CDC_HANDLE+0x2c>)
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <CDC_HANDLE+0x28>)
 8001e3c:	f007 f84e 	bl	8008edc <USBH_CDC_Receive>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <CDC_HANDLE+0x30>)
 8001e46:	701a      	strb	r2, [r3, #0]
	HAL_Delay (100);
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f000 fba9 	bl	80025a0 <HAL_Delay>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000042c 	.word	0x2000042c
 8001e58:	20000390 	.word	0x20000390
 8001e5c:	2000038c 	.word	0x2000038c

08001e60 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <RetargetInit+0x28>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <RetargetInit+0x2c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	2300      	movs	r3, #0
 8001e96:	2202      	movs	r2, #2
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f009 fa07 	bl	800b2ac <setvbuf>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000420 	.word	0x20000420
 8001eac:	20000084 	.word	0x20000084

08001eb0 <_isatty>:

int _isatty(int fd) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db04      	blt.n	8001ec8 <_isatty+0x18>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	dc01      	bgt.n	8001ec8 <_isatty+0x18>
    return 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e005      	b.n	8001ed4 <_isatty+0x24>

  errno = EBADF;
 8001ec8:	f009 fc1a 	bl	800b700 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2209      	movs	r2, #9
 8001ed0:	601a      	str	r2, [r3, #0]
  return 0;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

int _write(int fd, char* ptr, int len) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <_write+0x18>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d111      	bne.n	8001f18 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <_write+0x54>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	f004 fd4f 	bl	80069a4 <HAL_UART_Transmit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <_write+0x38>
      return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	e008      	b.n	8001f26 <_write+0x4a>
    else
      return EIO;
 8001f14:	2305      	movs	r3, #5
 8001f16:	e006      	b.n	8001f26 <_write+0x4a>
  }
  errno = EBADF;
 8001f18:	f009 fbf2 	bl	800b700 <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2209      	movs	r2, #9
 8001f20:	601a      	str	r2, [r3, #0]
  return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000420 	.word	0x20000420

08001f34 <_close>:

int _close(int fd) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db04      	blt.n	8001f4c <_close+0x18>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	dc01      	bgt.n	8001f4c <_close+0x18>
    return 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e006      	b.n	8001f5a <_close+0x26>

  errno = EBADF;
 8001f4c:	f009 fbd8 	bl	800b700 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2209      	movs	r2, #9
 8001f54:	601a      	str	r2, [r3, #0]
  return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001f6e:	f009 fbc7 	bl	800b700 <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2209      	movs	r2, #9
 8001f76:	601a      	str	r2, [r3, #0]
  return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_read>:

int _read(int fd, char* ptr, int len) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d110      	bne.n	8001fb8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <_read+0x4c>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	f004 fd8a 	bl	8006aba <HAL_UART_Receive>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <_read+0x30>
      return 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e008      	b.n	8001fc6 <_read+0x42>
    else
      return EIO;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	e006      	b.n	8001fc6 <_read+0x42>
  }
  errno = EBADF;
 8001fb8:	f009 fba2 	bl	800b700 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2209      	movs	r2, #9
 8001fc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000420 	.word	0x20000420

08001fd4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db08      	blt.n	8001ff6 <_fstat+0x22>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	dc05      	bgt.n	8001ff6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff0:	605a      	str	r2, [r3, #4]
    return 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e005      	b.n	8002002 <_fstat+0x2e>
  }

  errno = EBADF;
 8001ff6:	f009 fb83 	bl	800b700 <__errno>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2209      	movs	r2, #9
 8001ffe:	601a      	str	r2, [r3, #0]
  return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_CAN_MspInit+0x94>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d133      	bne.n	80020e6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 8002088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_CAN_MspInit+0x98>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b6:	2303      	movs	r3, #3
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020c6:	2309      	movs	r3, #9
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_CAN_MspInit+0x9c>)
 80020d2:	f001 fc85 	bl	80039e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2013      	movs	r0, #19
 80020dc:	f001 f8d9 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80020e0:	2013      	movs	r0, #19
 80020e2:	f001 f8f2 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	; 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40006400 	.word	0x40006400
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020c00 	.word	0x40020c00

080020fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7b      	ldr	r2, [pc, #492]	; (8002308 <HAL_UART_MspInit+0x20c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d15c      	bne.n	80021d8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_UART_MspInit+0x210>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_UART_MspInit+0x210>)
 8002128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b77      	ldr	r3, [pc, #476]	; (800230c <HAL_UART_MspInit+0x210>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_UART_MspInit+0x210>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a72      	ldr	r2, [pc, #456]	; (800230c <HAL_UART_MspInit+0x210>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_UART_MspInit+0x210>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002156:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002168:	2308      	movs	r3, #8
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	4867      	ldr	r0, [pc, #412]	; (8002310 <HAL_UART_MspInit+0x214>)
 8002174:	f001 fc34 	bl	80039e0 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002178:	4b66      	ldr	r3, [pc, #408]	; (8002314 <HAL_UART_MspInit+0x218>)
 800217a:	4a67      	ldr	r2, [pc, #412]	; (8002318 <HAL_UART_MspInit+0x21c>)
 800217c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_UART_MspInit+0x218>)
 8002180:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002184:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_UART_MspInit+0x218>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_UART_MspInit+0x218>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_UART_MspInit+0x218>)
 8002194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002198:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_UART_MspInit+0x218>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ac:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80021ba:	4856      	ldr	r0, [pc, #344]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021bc:	f001 f8a0 	bl	8003300 <HAL_DMA_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021c6:	f7ff fe55 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80021d0:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_UART_MspInit+0x218>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021d6:	e092      	b.n	80022fe <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_UART_MspInit+0x220>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12d      	bne.n	800223e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_UART_MspInit+0x210>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_UART_MspInit+0x210>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_UART_MspInit+0x210>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_UART_MspInit+0x210>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_UART_MspInit+0x210>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_UART_MspInit+0x210>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800222c:	2307      	movs	r3, #7
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	483a      	ldr	r0, [pc, #232]	; (8002320 <HAL_UART_MspInit+0x224>)
 8002238:	f001 fbd2 	bl	80039e0 <HAL_GPIO_Init>
}
 800223c:	e05f      	b.n	80022fe <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART6)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a38      	ldr	r2, [pc, #224]	; (8002324 <HAL_UART_MspInit+0x228>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d15a      	bne.n	80022fe <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_UART_MspInit+0x210>)
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_UART_MspInit+0x210>)
 8002252:	f043 0320 	orr.w	r3, r3, #32
 8002256:	6453      	str	r3, [r2, #68]	; 0x44
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_UART_MspInit+0x210>)
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_UART_MspInit+0x210>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_UART_MspInit+0x210>)
 800226e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002272:	6313      	str	r3, [r2, #48]	; 0x30
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_UART_MspInit+0x210>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002280:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002292:	2308      	movs	r3, #8
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4822      	ldr	r0, [pc, #136]	; (8002328 <HAL_UART_MspInit+0x22c>)
 800229e:	f001 fb9f 	bl	80039e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_UART_MspInit+0x230>)
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_UART_MspInit+0x234>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_UART_MspInit+0x230>)
 80022aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022ae:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_UART_MspInit+0x230>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_UART_MspInit+0x230>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_UART_MspInit+0x230>)
 80022be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_UART_MspInit+0x230>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x230>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_UART_MspInit+0x230>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x230>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_UART_MspInit+0x230>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <HAL_UART_MspInit+0x230>)
 80022e4:	f001 f80c 	bl	8003300 <HAL_DMA_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80022ee:	f7ff fdc1 	bl	8001e74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_UART_MspInit+0x230>)
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_UART_MspInit+0x230>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022fe:	bf00      	nop
 8002300:	3738      	adds	r7, #56	; 0x38
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40007800 	.word	0x40007800
 800230c:	40023800 	.word	0x40023800
 8002310:	40021000 	.word	0x40021000
 8002314:	200001a4 	.word	0x200001a4
 8002318:	40026058 	.word	0x40026058
 800231c:	40004800 	.word	0x40004800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40011400 	.word	0x40011400
 8002328:	40021800 	.word	0x40021800
 800232c:	20000204 	.word	0x20000204
 8002330:	40026428 	.word	0x40026428

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f000 f8ee 	bl	8002560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA1_Stream3_IRQHandler+0x10>)
 800238e:	f001 f8bd 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200001a4 	.word	0x200001a4

0800239c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <CAN1_TX_IRQHandler+0x10>)
 80023a2:	f000 fc6c 	bl	8002c7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200000a4 	.word	0x200000a4

080023b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA2_Stream1_IRQHandler+0x10>)
 80023b6:	f001 f8a9 	bl	800350c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000204 	.word	0x20000204

080023c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <OTG_FS_IRQHandler+0x10>)
 80023ca:	f001 ffc9 	bl	8004360 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000808 	.word	0x20000808

080023d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <_sbrk+0x5c>)
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <_sbrk+0x60>)
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_sbrk+0x64>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <_sbrk+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	429a      	cmp	r2, r3
 8002406:	d207      	bcs.n	8002418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002408:	f009 f97a 	bl	800b700 <__errno>
 800240c:	4603      	mov	r3, r0
 800240e:	220c      	movs	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002416:	e009      	b.n	800242c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <_sbrk+0x64>)
 8002428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20030000 	.word	0x20030000
 8002438:	00000400 	.word	0x00000400
 800243c:	20000424 	.word	0x20000424
 8002440:	20000d38 	.word	0x20000d38

08002444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SystemInit+0x20>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <SystemInit+0x20>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800246c:	f7ff ffea 	bl	8002444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002488:	4c0a      	ldr	r4, [pc, #40]	; (80024b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002496:	f009 f939 	bl	800b70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249a:	f7fe fcb5 	bl	8000e08 <main>
  bx  lr    
 800249e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80024ac:	0800c2ac 	.word	0x0800c2ac
  ldr r2, =_sbss
 80024b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80024b4:	20000d34 	.word	0x20000d34

080024b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_Init+0x40>)
 80024c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_Init+0x40>)
 80024d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <HAL_Init+0x40>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e4:	2003      	movs	r0, #3
 80024e6:	f000 fec9 	bl	800327c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f000 f808 	bl	8002500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f0:	f7ff fd8c 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x54>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x58>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	fbb3 f3f1 	udiv	r3, r3, r1
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fee1 	bl	80032e6 <HAL_SYSTICK_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00e      	b.n	800254c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b0f      	cmp	r3, #15
 8002532:	d80a      	bhi.n	800254a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002534:	2200      	movs	r2, #0
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800253c:	f000 fea9 	bl	8003292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002540:	4a06      	ldr	r2, [pc, #24]	; (800255c <HAL_InitTick+0x5c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000000 	.word	0x20000000
 8002558:	20000008 	.word	0x20000008
 800255c:	20000004 	.word	0x20000004

08002560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_IncTick+0x20>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x24>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_IncTick+0x24>)
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000008 	.word	0x20000008
 8002584:	20000428 	.word	0x20000428

08002588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return uwTick;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_GetTick+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000428 	.word	0x20000428

080025a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff ffee 	bl	8002588 <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b8:	d005      	beq.n	80025c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_Delay+0x44>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025c6:	bf00      	nop
 80025c8:	f7ff ffde 	bl	8002588 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d8f7      	bhi.n	80025c8 <HAL_Delay+0x28>
  {
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008

080025e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0ed      	b.n	80027d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fd28 	bl	800205c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261c:	f7ff ffb4 	bl	8002588 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002622:	e012      	b.n	800264a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002624:	f7ff ffb0 	bl	8002588 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d90b      	bls.n	800264a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2205      	movs	r2, #5
 8002642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0c5      	b.n	80027d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0e5      	beq.n	8002624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0202 	bic.w	r2, r2, #2
 8002666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7ff ff8e 	bl	8002588 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266e:	e012      	b.n	8002696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002670:	f7ff ff8a 	bl	8002588 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d90b      	bls.n	8002696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e09f      	b.n	80027d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e5      	bne.n	8002670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e1b      	ldrb	r3, [r3, #24]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d108      	bne.n	80026be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e007      	b.n	80026ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7e5b      	ldrb	r3, [r3, #25]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e007      	b.n	80026f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e9b      	ldrb	r3, [r3, #26]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d108      	bne.n	8002712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e007      	b.n	8002722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0220 	bic.w	r2, r2, #32
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7edb      	ldrb	r3, [r3, #27]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0210 	bic.w	r2, r2, #16
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e007      	b.n	800274c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0210 	orr.w	r2, r2, #16
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7f1b      	ldrb	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0208 	orr.w	r2, r2, #8
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e007      	b.n	8002776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0208 	bic.w	r2, r2, #8
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7f5b      	ldrb	r3, [r3, #29]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d108      	bne.n	8002790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0204 	orr.w	r2, r2, #4
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e007      	b.n	80027a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	ea42 0103 	orr.w	r1, r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d003      	beq.n	8002806 <HAL_CAN_ConfigFilter+0x26>
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80be 	bne.w	8002982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_CAN_ConfigFilter+0x1bc>)
 8002808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	431a      	orrs	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2201      	movs	r2, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d123      	bne.n	80028b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800288a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3248      	adds	r2, #72	; 0x48
 8002890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	3348      	adds	r3, #72	; 0x48
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d122      	bne.n	80028fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3248      	adds	r2, #72	; 0x48
 80028de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	3348      	adds	r3, #72	; 0x48
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	401a      	ands	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002918:	e007      	b.n	800292a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	431a      	orrs	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002944:	e007      	b.n	8002956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	431a      	orrs	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	431a      	orrs	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002974:	f023 0201 	bic.w	r2, r3, #1
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e006      	b.n	8002990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40006400 	.word	0x40006400

080029a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d12e      	bne.n	8002a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029cc:	f7ff fddc 	bl	8002588 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029d2:	e012      	b.n	80029fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029d4:	f7ff fdd8 	bl	8002588 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b0a      	cmp	r3, #10
 80029e0:	d90b      	bls.n	80029fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2205      	movs	r2, #5
 80029f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e012      	b.n	8002a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e5      	bne.n	80029d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e006      	b.n	8002a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d003      	beq.n	8002a54 <HAL_CAN_AddTxMessage+0x2c>
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	f040 80ad 	bne.w	8002bae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8095 	beq.w	8002b9e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	0e1b      	lsrs	r3, r3, #24
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a7e:	2201      	movs	r2, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	6809      	ldr	r1, [r1, #0]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3318      	adds	r3, #24
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	440b      	add	r3, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e00f      	b.n	8002acc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abc:	68f9      	ldr	r1, [r7, #12]
 8002abe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ac0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	440b      	add	r3, r1
 8002aca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	440b      	add	r3, r1
 8002adc:	3304      	adds	r3, #4
 8002ade:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	7d1b      	ldrb	r3, [r3, #20]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d111      	bne.n	8002b0c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3318      	adds	r3, #24
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	6811      	ldr	r1, [r2, #0]
 8002afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3318      	adds	r3, #24
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	440b      	add	r3, r1
 8002b08:	3304      	adds	r3, #4
 8002b0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3307      	adds	r3, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	061a      	lsls	r2, r3, #24
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3306      	adds	r3, #6
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3305      	adds	r3, #5
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	4313      	orrs	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	3204      	adds	r2, #4
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	4610      	mov	r0, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	ea43 0200 	orr.w	r2, r3, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3303      	adds	r3, #3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	061a      	lsls	r2, r3, #24
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3302      	adds	r3, #2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	4610      	mov	r0, r2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	ea43 0200 	orr.w	r2, r3, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3318      	adds	r3, #24
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	6811      	ldr	r1, [r2, #0]
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3318      	adds	r3, #24
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	440b      	add	r3, r1
 8002b98:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e00e      	b.n	8002bbc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e006      	b.n	8002bbc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3724      	adds	r7, #36	; 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bda:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d002      	beq.n	8002be8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d11d      	bne.n	8002c24 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <HAL_CAN_ActivateNotification+0x1e>
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d109      	bne.n	8002c64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6959      	ldr	r1, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e006      	b.n	8002c72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08a      	sub	sp, #40	; 0x28
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d07c      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d023      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f983 	bl	8002fec <HAL_CAN_TxMailbox0CompleteCallback>
 8002ce6:	e016      	b.n	8002d16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e00c      	b.n	8002d16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e002      	b.n	8002d16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f97f 	bl	8003014 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d024      	beq.n	8002d6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff f893 	bl	8001e60 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d3a:	e016      	b.n	8002d6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e00c      	b.n	8002d6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e002      	b.n	8002d6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f95f 	bl	8003028 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d024      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f939 	bl	8003000 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d8e:	e016      	b.n	8002dbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	e00c      	b.n	8002dbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	e002      	b.n	8002dbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f93f 	bl	800303c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2210      	movs	r2, #16
 8002de0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f930 	bl	8003064 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f917 	bl	8003050 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2210      	movs	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2208      	movs	r2, #8
 8002e60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f912 	bl	800308c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8f9 	bl	8003078 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8fc 	bl	80030a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8f5 	bl	80030b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d07b      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d072      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d043      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03e      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d02b      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x32a>
 8002f50:	2b60      	cmp	r3, #96	; 0x60
 8002f52:	d82e      	bhi.n	8002fb2 <HAL_CAN_IRQHandler+0x334>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d022      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x320>
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d82a      	bhi.n	8002fb2 <HAL_CAN_IRQHandler+0x334>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d019      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x316>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d826      	bhi.n	8002fb2 <HAL_CAN_IRQHandler+0x334>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d010      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x30c>
 8002f68:	2b30      	cmp	r3, #48	; 0x30
 8002f6a:	d822      	bhi.n	8002fb2 <HAL_CAN_IRQHandler+0x334>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d002      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x2f8>
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d005      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f74:	e01d      	b.n	8002fb2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f7e:	e019      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f043 0310 	orr.w	r3, r3, #16
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f88:	e014      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f043 0320 	orr.w	r3, r3, #32
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f92:	e00f      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f9c:	e00a      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa6:	e005      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002fb2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fc2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f872 	bl	80030c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <__NVIC_EnableIRQ+0x38>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <__NVIC_SetPriority+0x4c>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4908      	ldr	r1, [pc, #32]	; (80031cc <__NVIC_SetPriority+0x50>)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3b04      	subs	r3, #4
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43d9      	mvns	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	4313      	orrs	r3, r2
         );
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d301      	bcc.n	800324e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324a:	2301      	movs	r3, #1
 800324c:	e00f      	b.n	800326e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <SysTick_Config+0x40>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003256:	210f      	movs	r1, #15
 8003258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325c:	f7ff ff8e 	bl	800317c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <SysTick_Config+0x40>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <SysTick_Config+0x40>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000e010 	.word	0xe000e010

0800327c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff29 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a4:	f7ff ff3e 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80032a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7ff ff8e 	bl	80031d0 <NVIC_EncodePriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff5d 	bl	800317c <__NVIC_SetPriority>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff31 	bl	8003140 <__NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffa2 	bl	8003238 <SysTick_Config>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff f93c 	bl	8002588 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e099      	b.n	8003450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333c:	e00f      	b.n	800335e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333e:	f7ff f923 	bl	8002588 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b05      	cmp	r3, #5
 800334a:	d908      	bls.n	800335e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e078      	b.n	8003450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e8      	bne.n	800333e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_DMA_Init+0x158>)
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4313      	orrs	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d117      	bne.n	8003422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa6f 	bl	80038e8 <DMA_CheckFifoParam>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800341e:	2301      	movs	r3, #1
 8003420:	e016      	b.n	8003450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa26 	bl	800387c <DMA_CalcBaseAndBitshift>
 8003430:	4603      	mov	r3, r0
 8003432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	f010803f 	.word	0xf010803f

0800345c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Start_IT+0x26>
 800347e:	2302      	movs	r3, #2
 8003480:	e040      	b.n	8003504 <HAL_DMA_Start_IT+0xa8>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d12f      	bne.n	80034f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9b8 	bl	8003820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0216 	orr.w	r2, r2, #22
 80034ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0208 	orr.w	r2, r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e005      	b.n	8003502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_DMA_IRQHandler+0x248>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a8e      	ldr	r2, [pc, #568]	; (8003758 <HAL_DMA_IRQHandler+0x24c>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2208      	movs	r2, #8
 8003538:	409a      	lsls	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2208      	movs	r2, #8
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f043 0202 	orr.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2204      	movs	r2, #4
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2204      	movs	r2, #4
 80035d2:	409a      	lsls	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2210      	movs	r2, #16
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d043      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d03c      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	2210      	movs	r2, #16
 8003608:	409a      	lsls	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d018      	beq.n	800364e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d024      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e01f      	b.n	800367c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
 800364c:	e016      	b.n	800367c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0208 	bic.w	r2, r2, #8
 800366a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2220      	movs	r2, #32
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 808f 	beq.w	80037ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8087 	beq.w	80037ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2220      	movs	r2, #32
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d136      	bne.n	8003724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0216 	bic.w	r2, r2, #22
 80036c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x1da>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0208 	bic.w	r2, r2, #8
 80036f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	223f      	movs	r2, #63	; 0x3f
 80036fc:	409a      	lsls	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07e      	beq.n	8003818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
        }
        return;
 8003722:	e079      	b.n	8003818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01d      	beq.n	800376e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	2b00      	cmp	r3, #0
 8003746:	d031      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e02c      	b.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
 8003752:	bf00      	nop
 8003754:	20000000 	.word	0x20000000
 8003758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e01e      	b.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0210 	bic.w	r2, r2, #16
 800378a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d022      	beq.n	8003806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2205      	movs	r2, #5
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3301      	adds	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d307      	bcc.n	80037f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f2      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x2cc>
 80037f2:	e000      	b.n	80037f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	e000      	b.n	800381a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003818:	bf00      	nop
    }
  }
}
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800383c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d108      	bne.n	8003860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800385e:	e007      	b.n	8003870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3b10      	subs	r3, #16
 800388c:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <DMA_CalcBaseAndBitshift+0x64>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003896:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d909      	bls.n	80038be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	1d1a      	adds	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58
 80038bc:	e007      	b.n	80038ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	aaaaaaab 	.word	0xaaaaaaab
 80038e4:	0800c260 	.word	0x0800c260

080038e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11f      	bne.n	8003942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d856      	bhi.n	80039b6 <DMA_CheckFifoParam+0xce>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <DMA_CheckFifoParam+0x28>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003921 	.word	0x08003921
 8003914:	08003933 	.word	0x08003933
 8003918:	08003921 	.word	0x08003921
 800391c:	080039b7 	.word	0x080039b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d046      	beq.n	80039ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e043      	b.n	80039ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800393a:	d140      	bne.n	80039be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e03d      	b.n	80039be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	d121      	bne.n	8003990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d837      	bhi.n	80039c2 <DMA_CheckFifoParam+0xda>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <DMA_CheckFifoParam+0x70>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	08003969 	.word	0x08003969
 800395c:	0800396f 	.word	0x0800396f
 8003960:	08003969 	.word	0x08003969
 8003964:	08003981 	.word	0x08003981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e030      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d025      	beq.n	80039c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397e:	e022      	b.n	80039c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003988:	d11f      	bne.n	80039ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800398e:	e01c      	b.n	80039ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d903      	bls.n	800399e <DMA_CheckFifoParam+0xb6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800399c:	e018      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      break;
 80039a2:	e015      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e00b      	b.n	80039ce <DMA_CheckFifoParam+0xe6>
      break;
 80039b6:	bf00      	nop
 80039b8:	e00a      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ba:	bf00      	nop
 80039bc:	e008      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
 80039c0:	e006      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e004      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e002      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
    }
  } 
  
  return status; 
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	e177      	b.n	8003cec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f040 8166 	bne.w	8003ce6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d005      	beq.n	8003a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d130      	bne.n	8003a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 0201 	and.w	r2, r3, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d017      	beq.n	8003ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d123      	bne.n	8003b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	220f      	movs	r2, #15
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0203 	and.w	r2, r3, #3
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80c0 	beq.w	8003ce6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_GPIO_Init+0x324>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_GPIO_Init+0x324>)
 8003b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b74:	6453      	str	r3, [r2, #68]	; 0x44
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_GPIO_Init+0x324>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b82:	4a61      	ldr	r2, [pc, #388]	; (8003d08 <HAL_GPIO_Init+0x328>)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	3302      	adds	r3, #2
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	220f      	movs	r2, #15
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_GPIO_Init+0x32c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d037      	beq.n	8003c1e <HAL_GPIO_Init+0x23e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <HAL_GPIO_Init+0x330>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_GPIO_Init+0x23a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a56      	ldr	r2, [pc, #344]	; (8003d14 <HAL_GPIO_Init+0x334>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02b      	beq.n	8003c16 <HAL_GPIO_Init+0x236>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a55      	ldr	r2, [pc, #340]	; (8003d18 <HAL_GPIO_Init+0x338>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d025      	beq.n	8003c12 <HAL_GPIO_Init+0x232>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_GPIO_Init+0x33c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01f      	beq.n	8003c0e <HAL_GPIO_Init+0x22e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_GPIO_Init+0x340>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d019      	beq.n	8003c0a <HAL_GPIO_Init+0x22a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_GPIO_Init+0x344>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_GPIO_Init+0x226>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <HAL_GPIO_Init+0x348>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00d      	beq.n	8003c02 <HAL_GPIO_Init+0x222>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a50      	ldr	r2, [pc, #320]	; (8003d2c <HAL_GPIO_Init+0x34c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <HAL_GPIO_Init+0x21e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4f      	ldr	r2, [pc, #316]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_GPIO_Init+0x21a>
 8003bf6:	2309      	movs	r3, #9
 8003bf8:	e012      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	e010      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	e00e      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c02:	2307      	movs	r3, #7
 8003c04:	e00c      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c06:	2306      	movs	r3, #6
 8003c08:	e00a      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	e008      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	e006      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c12:	2303      	movs	r3, #3
 8003c14:	e004      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_GPIO_Init+0x240>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f002 0203 	and.w	r2, r2, #3
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	4093      	lsls	r3, r2
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c30:	4935      	ldr	r1, [pc, #212]	; (8003d08 <HAL_GPIO_Init+0x328>)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	3302      	adds	r3, #2
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c62:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c8c:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c92:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <HAL_GPIO_Init+0x354>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	f67f ae84 	bls.w	80039fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3724      	adds	r7, #36	; 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40022400 	.word	0x40022400
 8003d34:	40013c00 	.word	0x40013c00

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d54:	e003      	b.n	8003d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	041a      	lsls	r2, r3, #16
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af02      	add	r7, sp, #8
 8003da4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e059      	b.n	8003e64 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f006 ff12 	bl	800abf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dde:	d102      	bne.n	8003de6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fca7 	bl	800773e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7c1a      	ldrb	r2, [r3, #16]
 8003df8:	f88d 2000 	strb.w	r2, [sp]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e00:	f003 fc28 	bl	8007654 <USB_CoreInit>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e026      	b.n	8003e64 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fc9f 	bl	8007760 <USB_SetCurrentMode>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e017      	b.n	8003e64 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7c1a      	ldrb	r2, [r3, #16]
 8003e3c:	f88d 2000 	strb.w	r2, [sp]
 8003e40:	3304      	adds	r3, #4
 8003e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e44:	f003 fe42 	bl	8007acc <USB_HostInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e004      	b.n	8003e64 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b08b      	sub	sp, #44	; 0x2c
 8003e70:	af04      	add	r7, sp, #16
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	70fb      	strb	r3, [r7, #3]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70bb      	strb	r3, [r7, #2]
 8003e82:	4613      	mov	r3, r2
 8003e84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003e86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003e88:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_HCD_HC_Init+0x2c>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e09d      	b.n	8003fd4 <HAL_HCD_HC_Init+0x168>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3319      	adds	r3, #25
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	787a      	ldrb	r2, [r7, #1]
 8003ec6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	3315      	adds	r3, #21
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3326      	adds	r3, #38	; 0x26
 8003eec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	78bb      	ldrb	r3, [r7, #2]
 8003ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efa:	b2d8      	uxtb	r0, r3
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3316      	adds	r3, #22
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fbc8 	bl	80046a8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da0a      	bge.n	8003f36 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3317      	adds	r3, #23
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e009      	b.n	8003f4a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3317      	adds	r3, #23
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f003 ff20 	bl	8007d94 <USB_GetHostSpeed>
 8003f54:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d10b      	bne.n	8003f76 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_HCD_HC_Init+0x10a>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2bbc      	cmp	r3, #188	; 0xbc
 8003f70:	d901      	bls.n	8003f76 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003f72:	23bc      	movs	r3, #188	; 0xbc
 8003f74:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3318      	adds	r3, #24
 8003f86:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	b298      	uxth	r0, r3
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3328      	adds	r3, #40	; 0x28
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	787c      	ldrb	r4, [r7, #1]
 8003fae:	78ba      	ldrb	r2, [r7, #2]
 8003fb0:	78f9      	ldrb	r1, [r7, #3]
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	f003 ff0f 	bl	8007de4 <USB_HC_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_HCD_HC_Halt+0x1e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e00f      	b.n	800401a <HAL_HCD_HC_Halt+0x3e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f004 faa1 	bl	8008552 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	460b      	mov	r3, r1
 8004038:	70bb      	strb	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3317      	adds	r3, #23
 800404e:	78ba      	ldrb	r2, [r7, #2]
 8004050:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3326      	adds	r3, #38	; 0x26
 8004062:	787a      	ldrb	r2, [r7, #1]
 8004064:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004066:	7c3b      	ldrb	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	332a      	adds	r3, #42	; 0x2a
 800407c:	2203      	movs	r2, #3
 800407e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3319      	adds	r3, #25
 8004090:	7f3a      	ldrb	r2, [r7, #28]
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e009      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	332a      	adds	r3, #42	; 0x2a
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040aa:	787b      	ldrb	r3, [r7, #1]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	f200 8102 	bhi.w	80042b6 <HAL_HCD_HC_SubmitRequest+0x292>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080042a1 	.word	0x080042a1
 80040c0:	0800418d 	.word	0x0800418d
 80040c4:	08004217 	.word	0x08004217
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80040c8:	7c3b      	ldrb	r3, [r7, #16]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	f040 80f5 	bne.w	80042ba <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80040d0:	78bb      	ldrb	r3, [r7, #2]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d12d      	bne.n	8004132 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80040d6:	8b3b      	ldrh	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	333d      	adds	r3, #61	; 0x3d
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	333d      	adds	r3, #61	; 0x3d
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	332a      	adds	r3, #42	; 0x2a
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800411a:	e0ce      	b.n	80042ba <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	332a      	adds	r3, #42	; 0x2a
 800412c:	2202      	movs	r2, #2
 800412e:	701a      	strb	r2, [r3, #0]
      break;
 8004130:	e0c3      	b.n	80042ba <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	331a      	adds	r3, #26
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	f040 80b8 	bne.w	80042ba <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	333c      	adds	r3, #60	; 0x3c
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	332a      	adds	r3, #42	; 0x2a
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e0a1      	b.n	80042ba <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	332a      	adds	r3, #42	; 0x2a
 8004186:	2202      	movs	r2, #2
 8004188:	701a      	strb	r2, [r3, #0]
      break;
 800418a:	e096      	b.n	80042ba <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800418c:	78bb      	ldrb	r3, [r7, #2]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d120      	bne.n	80041d4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	333d      	adds	r3, #61	; 0x3d
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	332a      	adds	r3, #42	; 0x2a
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80041bc:	e07e      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	332a      	adds	r3, #42	; 0x2a
 80041ce:	2202      	movs	r2, #2
 80041d0:	701a      	strb	r2, [r3, #0]
      break;
 80041d2:	e073      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	333c      	adds	r3, #60	; 0x3c
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	332a      	adds	r3, #42	; 0x2a
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
      break;
 80041fe:	e05d      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	332a      	adds	r3, #42	; 0x2a
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
      break;
 8004214:	e052      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004216:	78bb      	ldrb	r3, [r7, #2]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d120      	bne.n	800425e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	333d      	adds	r3, #61	; 0x3d
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	332a      	adds	r3, #42	; 0x2a
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004246:	e039      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	332a      	adds	r3, #42	; 0x2a
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]
      break;
 800425c:	e02e      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	333c      	adds	r3, #60	; 0x3c
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	332a      	adds	r3, #42	; 0x2a
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
      break;
 8004288:	e018      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	332a      	adds	r3, #42	; 0x2a
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	e00d      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	332a      	adds	r3, #42	; 0x2a
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
      break;
 80042b4:	e002      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80042ba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	332c      	adds	r3, #44	; 0x2c
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	8b39      	ldrh	r1, [r7, #24]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4403      	add	r3, r0
 80042e0:	3334      	adds	r3, #52	; 0x34
 80042e2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334c      	adds	r3, #76	; 0x4c
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3315      	adds	r3, #21
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	334d      	adds	r3, #77	; 0x4d
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	3310      	adds	r3, #16
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	799b      	ldrb	r3, [r3, #6]
 800434e:	461a      	mov	r2, r3
 8004350:	f003 fe74 	bl	800803c <USB_HC_StartXfer>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop

08004360 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fb68 	bl	8007a4c <USB_GetMode>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	f040 80fb 	bne.w	800457a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f003 fb2b 	bl	80079e4 <USB_ReadInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80f1 	beq.w	8004578 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f003 fb22 	bl	80079e4 <USB_ReadInterrupts>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d104      	bne.n	80043b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80043b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fb12 	bl	80079e4 <USB_ReadInterrupts>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ca:	d104      	bne.n	80043d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 fb02 	bl	80079e4 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ea:	d104      	bne.n	80043f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f003 faf2 	bl	80079e4 <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d103      	bne.n	8004412 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2202      	movs	r2, #2
 8004410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f003 fae4 	bl	80079e4 <USB_ReadInterrupts>
 800441c:	4603      	mov	r3, r0
 800441e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d120      	bne.n	800446a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004430:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004442:	2110      	movs	r1, #16
 8004444:	6938      	ldr	r0, [r7, #16]
 8004446:	f003 f9d7 	bl	80077f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f003 fa06 	bl	800785c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7a5b      	ldrb	r3, [r3, #9]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d105      	bne.n	8004464 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fbf8 	bl	8007c54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f006 fc43 	bl	800acf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fab8 	bl	80079e4 <USB_ReadInterrupts>
 8004474:	4603      	mov	r3, r0
 8004476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800447e:	d102      	bne.n	8004486 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 fd33 	bl	8005eec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f003 faaa 	bl	80079e4 <USB_ReadInterrupts>
 8004490:	4603      	mov	r3, r0
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b08      	cmp	r3, #8
 8004498:	d106      	bne.n	80044a8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f006 fc0c 	bl	800acb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 fa99 	bl	80079e4 <USB_ReadInterrupts>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044bc:	d139      	bne.n	8004532 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 f834 	bl	8008530 <USB_HC_ReadInterrupt>
 80044c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e025      	b.n	800451c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d018      	beq.n	8004516 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fa:	d106      	bne.n	800450a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f905 	bl	8004712 <HCD_HC_IN_IRQHandler>
 8004508:	e005      	b.n	8004516 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 ff67 	bl	80053e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	795b      	ldrb	r3, [r3, #5]
 8004520:	461a      	mov	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4293      	cmp	r3, r2
 8004526:	d3d3      	bcc.n	80044d0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f003 fa54 	bl	80079e4 <USB_ReadInterrupts>
 800453c:	4603      	mov	r3, r0
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d101      	bne.n	800454a <HAL_HCD_IRQHandler+0x1ea>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_HCD_IRQHandler+0x1ec>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d014      	beq.n	800457a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0210 	bic.w	r2, r2, #16
 800455e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fbe4 	bl	8005d2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0210 	orr.w	r2, r2, #16
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	e000      	b.n	800457a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004578:	bf00      	nop
    }
  }
}
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_HCD_Start+0x16>
 8004592:	2302      	movs	r3, #2
 8004594:	e013      	b.n	80045be <HAL_HCD_Start+0x3e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 fbbc 	bl	8007d22 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 f8b4 	bl	800771c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_HCD_Stop+0x16>
 80045d8:	2302      	movs	r3, #2
 80045da:	e00d      	b.n	80045f8 <HAL_HCD_Stop+0x32>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f004 f90f 	bl	800880c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f003 fb5e 	bl	8007cce <USB_ResetPort>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	334c      	adds	r3, #76	; 0x4c
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3338      	adds	r3, #56	; 0x38
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f003 fba0 	bl	8007dc2 <USB_GetCurrentFrame>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fb7b 	bl	8007d94 <USB_GetHostSpeed>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	331a      	adds	r3, #26
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	331b      	adds	r3, #27
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3325      	adds	r3, #37	; 0x25
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f003 f96a 	bl	8007a0a <USB_ReadChInterrupts>
 8004736:	4603      	mov	r3, r0
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11a      	bne.n	8004776 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	461a      	mov	r2, r3
 800474e:	2304      	movs	r3, #4
 8004750:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	334d      	adds	r3, #77	; 0x4d
 8004762:	2207      	movs	r2, #7
 8004764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f003 feef 	bl	8008552 <USB_HC_Halt>
 8004774:	e09e      	b.n	80048b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f003 f943 	bl	8007a0a <USB_ReadChInterrupts>
 8004784:	4603      	mov	r3, r0
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d11b      	bne.n	80047c8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334d      	adds	r3, #77	; 0x4d
 80047b4:	2208      	movs	r2, #8
 80047b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f003 fec6 	bl	8008552 <USB_HC_Halt>
 80047c6:	e075      	b.n	80048b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 f91a 	bl	8007a0a <USB_ReadChInterrupts>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d11a      	bne.n	8004816 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	2308      	movs	r3, #8
 80047f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	334d      	adds	r3, #77	; 0x4d
 8004802:	2206      	movs	r2, #6
 8004804:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f003 fe9f 	bl	8008552 <USB_HC_Halt>
 8004814:	e04e      	b.n	80048b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f003 f8f3 	bl	8007a0a <USB_ReadChInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d11b      	bne.n	8004868 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	461a      	mov	r2, r3
 800483e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004842:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334d      	adds	r3, #77	; 0x4d
 8004854:	2209      	movs	r2, #9
 8004856:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fe76 	bl	8008552 <USB_HC_Halt>
 8004866:	e025      	b.n	80048b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f003 f8ca 	bl	8007a0a <USB_ReadChInterrupts>
 8004876:	4603      	mov	r3, r0
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d119      	bne.n	80048b4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	461a      	mov	r2, r3
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	334d      	adds	r3, #77	; 0x4d
 80048a2:	2207      	movs	r2, #7
 80048a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fe4f 	bl	8008552 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 f8a4 	bl	8007a0a <USB_ReadChInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d112      	bne.n	80048f4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f003 fe3b 	bl	8008552 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ee:	6093      	str	r3, [r2, #8]
 80048f0:	f000 bd75 	b.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f003 f884 	bl	8007a0a <USB_ReadChInterrupts>
 8004902:	4603      	mov	r3, r0
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	f040 8128 	bne.w	8004b5e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	461a      	mov	r2, r3
 800491c:	2320      	movs	r3, #32
 800491e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	331b      	adds	r3, #27
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d119      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	331b      	adds	r3, #27
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	440a      	add	r2, r1
 8004960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004968:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	799b      	ldrb	r3, [r3, #6]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01b      	beq.n	80049aa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3330      	adds	r3, #48	; 0x30
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	1ac9      	subs	r1, r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4403      	add	r3, r0
 80049a6:	3338      	adds	r3, #56	; 0x38
 80049a8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	334d      	adds	r3, #77	; 0x4d
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3344      	adds	r3, #68	; 0x44
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	2301      	movs	r3, #1
 80049e2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	3326      	adds	r3, #38	; 0x26
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3326      	adds	r3, #38	; 0x26
 8004a0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d110      	bne.n	8004a32 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f003 fd9a 	bl	8008552 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	6093      	str	r3, [r2, #8]
 8004a30:	e03d      	b.n	8004aae <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3326      	adds	r3, #38	; 0x26
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d00a      	beq.n	8004a5e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3326      	adds	r3, #38	; 0x26
 8004a58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d127      	bne.n	8004aae <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	334c      	adds	r3, #76	; 0x4c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334c      	adds	r3, #76	; 0x4c
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f006 f92f 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	799b      	ldrb	r3, [r3, #6]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d13b      	bne.n	8004b2e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	3338      	adds	r3, #56	; 0x38
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4403      	add	r3, r0
 8004ad6:	3328      	adds	r3, #40	; 0x28
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	440b      	add	r3, r1
 8004adc:	1e59      	subs	r1, r3, #1
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4403      	add	r3, r0
 8004aec:	3328      	adds	r3, #40	; 0x28
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8470 	beq.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	333c      	adds	r3, #60	; 0x3c
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	f083 0301 	eor.w	r3, r3, #1
 8004b16:	b2d8      	uxtb	r0, r3
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	333c      	adds	r3, #60	; 0x3c
 8004b26:	4602      	mov	r2, r0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	f000 bc58 	b.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	333c      	adds	r3, #60	; 0x3c
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2d8      	uxtb	r0, r3
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	333c      	adds	r3, #60	; 0x3c
 8004b56:	4602      	mov	r2, r0
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	f000 bc40 	b.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f002 ff4f 	bl	8007a0a <USB_ReadChInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d131      	bne.n	8004bda <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	461a      	mov	r2, r3
 8004b84:	2320      	movs	r3, #32
 8004b86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	331a      	adds	r3, #26
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 841f 	bne.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	331b      	adds	r3, #27
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334d      	adds	r3, #77	; 0x4d
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fcbe 	bl	8008552 <USB_HC_Halt>
 8004bd6:	f000 bc02 	b.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 ff11 	bl	8007a0a <USB_ReadChInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	f040 8305 	bne.w	80051fe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	461a      	mov	r2, r3
 8004c02:	2302      	movs	r3, #2
 8004c04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	334d      	adds	r3, #77	; 0x4d
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d114      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	334d      	adds	r3, #77	; 0x4d
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334c      	adds	r3, #76	; 0x4c
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e2cc      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334d      	adds	r3, #77	; 0x4d
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b06      	cmp	r3, #6
 8004c5a:	d114      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	334d      	adds	r3, #77	; 0x4d
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	334c      	adds	r3, #76	; 0x4c
 8004c80:	2205      	movs	r2, #5
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e2ac      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	334d      	adds	r3, #77	; 0x4d
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b07      	cmp	r3, #7
 8004c9a:	d00b      	beq.n	8004cb4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	334d      	adds	r3, #77	; 0x4d
 8004cac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	f040 80a6 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	334d      	adds	r3, #77	; 0x4d
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3344      	adds	r3, #68	; 0x44
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	3344      	adds	r3, #68	; 0x44
 8004cea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3344      	adds	r3, #68	; 0x44
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d943      	bls.n	8004d8a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3344      	adds	r3, #68	; 0x44
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	331a      	adds	r3, #26
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d123      	bne.n	8004d74 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	331b      	adds	r3, #27
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	331c      	adds	r3, #28
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d72:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	334c      	adds	r3, #76	; 0x4c
 8004d84:	2204      	movs	r2, #4
 8004d86:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d88:	e229      	b.n	80051de <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	334c      	adds	r3, #76	; 0x4c
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3326      	adds	r3, #38	; 0x26
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3326      	adds	r3, #38	; 0x26
 8004dc4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	f040 8209 	bne.w	80051de <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dfe:	e1ee      	b.n	80051de <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	334d      	adds	r3, #77	; 0x4d
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	f040 80c8 	bne.w	8004fa8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	334d      	adds	r3, #77	; 0x4d
 8004e28:	2202      	movs	r2, #2
 8004e2a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	331b      	adds	r3, #27
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f040 81ce 	bne.w	80051e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3326      	adds	r3, #38	; 0x26
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d16b      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3348      	adds	r3, #72	; 0x48
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	1c59      	adds	r1, r3, #1
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4403      	add	r3, r0
 8004e7a:	3348      	adds	r3, #72	; 0x48
 8004e7c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3348      	adds	r3, #72	; 0x48
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d943      	bls.n	8004f1c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3348      	adds	r3, #72	; 0x48
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3344      	adds	r3, #68	; 0x44
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d809      	bhi.n	8004ee6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	331c      	adds	r3, #28
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f04:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	334c      	adds	r3, #76	; 0x4c
 8004f16:	2204      	movs	r2, #4
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e014      	b.n	8004f46 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	334c      	adds	r3, #76	; 0x4c
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e009      	b.n	8004f46 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	334c      	adds	r3, #76	; 0x4c
 8004f42:	2202      	movs	r2, #2
 8004f44:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3326      	adds	r3, #38	; 0x26
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3326      	adds	r3, #38	; 0x26
 8004f6c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	f040 8136 	bne.w	80051e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f8a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e11b      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	334d      	adds	r3, #77	; 0x4d
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	f040 8081 	bne.w	80050c2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	334d      	adds	r3, #77	; 0x4d
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	331b      	adds	r3, #27
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	f040 80fa 	bne.w	80051e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334c      	adds	r3, #76	; 0x4c
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	440a      	add	r2, r1
 8005016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	440a      	add	r2, r1
 8005036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	440a      	add	r2, r1
 8005056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3326      	adds	r3, #38	; 0x26
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3326      	adds	r3, #38	; 0x26
 8005086:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005088:	2b02      	cmp	r3, #2
 800508a:	f040 80a9 	bne.w	80051e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	461a      	mov	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e08e      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	; 0x4d
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d143      	bne.n	8005160 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	334d      	adds	r3, #77	; 0x4d
 80050e8:	2202      	movs	r2, #2
 80050ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	334c      	adds	r3, #76	; 0x4c
 80050fc:	2202      	movs	r2, #2
 80050fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	3326      	adds	r3, #38	; 0x26
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3326      	adds	r3, #38	; 0x26
 8005126:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005128:	2b02      	cmp	r3, #2
 800512a:	d159      	bne.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005142:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800514a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e03f      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	334d      	adds	r3, #77	; 0x4d
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d126      	bne.n	80051c4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	334d      	adds	r3, #77	; 0x4d
 8005186:	2202      	movs	r2, #2
 8005188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3344      	adds	r3, #68	; 0x44
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4403      	add	r3, r0
 80051aa:	3344      	adds	r3, #68	; 0x44
 80051ac:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	334c      	adds	r3, #76	; 0x4c
 80051be:	2204      	movs	r2, #4
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e00d      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	334d      	adds	r3, #77	; 0x4d
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	f000 8100 	beq.w	80053dc <HCD_HC_IN_IRQHandler+0xcca>
 80051dc:	e000      	b.n	80051e0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	334c      	adds	r3, #76	; 0x4c
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f005 fd88 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80051fc:	e0ef      	b.n	80053de <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f002 fbff 	bl	8007a0a <USB_ReadChInterrupts>
 800520c:	4603      	mov	r3, r0
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d12f      	bne.n	8005276 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	334d      	adds	r3, #77	; 0x4d
 8005238:	2205      	movs	r2, #5
 800523a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	331a      	adds	r3, #26
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3344      	adds	r3, #68	; 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	78fa      	ldrb	r2, [r7, #3]
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f003 f96f 	bl	8008552 <USB_HC_Halt>
 8005274:	e0b3      	b.n	80053de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fbc3 	bl	8007a0a <USB_ReadChInterrupts>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b10      	cmp	r3, #16
 800528c:	f040 80a7 	bne.w	80053de <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3326      	adds	r3, #38	; 0x26
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d11b      	bne.n	80052de <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3344      	adds	r3, #68	; 0x44
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	334d      	adds	r3, #77	; 0x4d
 80052ca:	2204      	movs	r2, #4
 80052cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 f93b 	bl	8008552 <USB_HC_Halt>
 80052dc:	e03f      	b.n	800535e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3326      	adds	r3, #38	; 0x26
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3326      	adds	r3, #38	; 0x26
 8005304:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005306:	2b02      	cmp	r3, #2
 8005308:	d129      	bne.n	800535e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	3344      	adds	r3, #68	; 0x44
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	799b      	ldrb	r3, [r3, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HCD_HC_IN_IRQHandler+0xc2a>
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	331b      	adds	r3, #27
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d110      	bne.n	800535e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	334d      	adds	r3, #77	; 0x4d
 800534c:	2204      	movs	r2, #4
 800534e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f003 f8fa 	bl	8008552 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	331b      	adds	r3, #27
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d129      	bne.n	80053c8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	331b      	adds	r3, #27
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	440a      	add	r2, r1
 800539e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c2:	f043 0320 	orr.w	r3, r3, #32
 80053c6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	461a      	mov	r2, r3
 80053d6:	2310      	movs	r3, #16
 80053d8:	6093      	str	r3, [r2, #8]
 80053da:	e000      	b.n	80053de <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80053dc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f002 fb01 	bl	8007a0a <USB_ReadChInterrupts>
 8005408:	4603      	mov	r3, r0
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d11b      	bne.n	800544a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	461a      	mov	r2, r3
 8005420:	2304      	movs	r3, #4
 8005422:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	334d      	adds	r3, #77	; 0x4d
 8005434:	2207      	movs	r2, #7
 8005436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f003 f886 	bl	8008552 <USB_HC_Halt>
 8005446:	f000 bc6f 	b.w	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f002 fad9 	bl	8007a0a <USB_ReadChInterrupts>
 8005458:	4603      	mov	r3, r0
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b20      	cmp	r3, #32
 8005460:	f040 8082 	bne.w	8005568 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	2320      	movs	r3, #32
 8005474:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3319      	adds	r3, #25
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d124      	bne.n	80054d6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	3319      	adds	r3, #25
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054a0:	78fa      	ldrb	r2, [r7, #3]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	334c      	adds	r3, #76	; 0x4c
 80054b0:	2202      	movs	r2, #2
 80054b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	334d      	adds	r3, #77	; 0x4d
 80054c4:	2203      	movs	r2, #3
 80054c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f003 f83e 	bl	8008552 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	331a      	adds	r3, #26
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 841d 	bne.w	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	331b      	adds	r3, #27
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 8411 	bne.w	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3326      	adds	r3, #38	; 0x26
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d009      	beq.n	8005530 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	331b      	adds	r3, #27
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	334d      	adds	r3, #77	; 0x4d
 8005540:	2203      	movs	r2, #3
 8005542:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f003 f800 	bl	8008552 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3344      	adds	r3, #68	; 0x44
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e3df      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f002 fa4a 	bl	8007a0a <USB_ReadChInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d111      	bne.n	80055a6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005594:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f002 ffd7 	bl	8008552 <USB_HC_Halt>
 80055a4:	e3c0      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 fa2b 	bl	8007a0a <USB_ReadChInterrupts>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d168      	bne.n	8005690 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3344      	adds	r3, #68	; 0x44
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	4611      	mov	r1, r2
 80055da:	4618      	mov	r0, r3
 80055dc:	f002 fa15 	bl	8007a0a <USB_ReadChInterrupts>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d112      	bne.n	8005610 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	3319      	adds	r3, #25
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	331b      	adds	r3, #27
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	331b      	adds	r3, #27
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005658:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	461a      	mov	r2, r3
 8005668:	2301      	movs	r3, #1
 800566a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	334d      	adds	r3, #77	; 0x4d
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	4611      	mov	r1, r2
 8005688:	4618      	mov	r0, r3
 800568a:	f002 ff62 	bl	8008552 <USB_HC_Halt>
 800568e:	e34b      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f002 f9b6 	bl	8007a0a <USB_ReadChInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b40      	cmp	r3, #64	; 0x40
 80056a6:	d139      	bne.n	800571c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	334d      	adds	r3, #77	; 0x4d
 80056b8:	2205      	movs	r2, #5
 80056ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	331a      	adds	r3, #26
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	3319      	adds	r3, #25
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	3344      	adds	r3, #68	; 0x44
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f002 ff25 	bl	8008552 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	461a      	mov	r2, r3
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	e305      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f002 f970 	bl	8007a0a <USB_ReadChInterrupts>
 800572a:	4603      	mov	r3, r0
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d11a      	bne.n	800576a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	461a      	mov	r2, r3
 8005742:	2308      	movs	r3, #8
 8005744:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005746:	78fa      	ldrb	r2, [r7, #3]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	334d      	adds	r3, #77	; 0x4d
 8005756:	2206      	movs	r2, #6
 8005758:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f002 fef5 	bl	8008552 <USB_HC_Halt>
 8005768:	e2de      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f002 f949 	bl	8007a0a <USB_ReadChInterrupts>
 8005778:	4603      	mov	r3, r0
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d144      	bne.n	800580c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3344      	adds	r3, #68	; 0x44
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	334d      	adds	r3, #77	; 0x4d
 80057a6:	2204      	movs	r2, #4
 80057a8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3319      	adds	r3, #25
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d114      	bne.n	80057ea <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3318      	adds	r3, #24
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	3319      	adds	r3, #25
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 fead 	bl	8008552 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005804:	461a      	mov	r2, r3
 8005806:	2310      	movs	r3, #16
 8005808:	6093      	str	r3, [r2, #8]
 800580a:	e28d      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f002 f8f8 	bl	8007a0a <USB_ReadChInterrupts>
 800581a:	4603      	mov	r3, r0
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d169      	bne.n	80058f8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	799b      	ldrb	r3, [r3, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d111      	bne.n	8005850 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	334d      	adds	r3, #77	; 0x4d
 800583c:	2207      	movs	r2, #7
 800583e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	4611      	mov	r1, r2
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fe82 	bl	8008552 <USB_HC_Halt>
 800584e:	e049      	b.n	80058e4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	3344      	adds	r3, #68	; 0x44
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4403      	add	r3, r0
 8005870:	3344      	adds	r3, #68	; 0x44
 8005872:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3344      	adds	r3, #68	; 0x44
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d922      	bls.n	80058d0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3344      	adds	r3, #68	; 0x44
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800589e:	78fa      	ldrb	r2, [r7, #3]
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	334c      	adds	r3, #76	; 0x4c
 80058ae:	2204      	movs	r2, #4
 80058b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	334c      	adds	r3, #76	; 0x4c
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f005 fa1f 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80058ce:	e009      	b.n	80058e4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	334c      	adds	r3, #76	; 0x4c
 80058e0:	2202      	movs	r2, #2
 80058e2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f0:	461a      	mov	r2, r3
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	6093      	str	r3, [r2, #8]
 80058f6:	e217      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f002 f882 	bl	8007a0a <USB_ReadChInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d11b      	bne.n	800594a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	334d      	adds	r3, #77	; 0x4d
 8005922:	2209      	movs	r2, #9
 8005924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f002 fe0f 	bl	8008552 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	461a      	mov	r2, r3
 8005942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005946:	6093      	str	r3, [r2, #8]
 8005948:	e1ee      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f002 f859 	bl	8007a0a <USB_ReadChInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	f040 81df 	bne.w	8005d22 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	2302      	movs	r3, #2
 8005974:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334d      	adds	r3, #77	; 0x4d
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 8093 	bne.w	8005ab4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800598e:	78fa      	ldrb	r2, [r7, #3]
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	334d      	adds	r3, #77	; 0x4d
 800599e:	2202      	movs	r2, #2
 80059a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	334c      	adds	r3, #76	; 0x4c
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3326      	adds	r3, #38	; 0x26
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d00b      	beq.n	80059e4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3326      	adds	r3, #38	; 0x26
 80059dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80059de:	2b03      	cmp	r3, #3
 80059e0:	f040 8190 	bne.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	799b      	ldrb	r3, [r3, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d115      	bne.n	8005a18 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	333d      	adds	r3, #61	; 0x3d
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	f083 0301 	eor.w	r3, r3, #1
 8005a04:	b2d8      	uxtb	r0, r3
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	333d      	adds	r3, #61	; 0x3d
 8005a14:	4602      	mov	r2, r0
 8005a16:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	799b      	ldrb	r3, [r3, #6]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 8171 	bne.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3334      	adds	r3, #52	; 0x34
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8165 	beq.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3334      	adds	r3, #52	; 0x34
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4403      	add	r3, r0
 8005a5a:	3328      	adds	r3, #40	; 0x28
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	440b      	add	r3, r1
 8005a60:	1e59      	subs	r1, r3, #1
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	3328      	adds	r3, #40	; 0x28
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a78:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 813f 	beq.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	333d      	adds	r3, #61	; 0x3d
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	f083 0301 	eor.w	r3, r3, #1
 8005a9e:	b2d8      	uxtb	r0, r3
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	333d      	adds	r3, #61	; 0x3d
 8005aae:	4602      	mov	r2, r0
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e127      	b.n	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	334d      	adds	r3, #77	; 0x4d
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d120      	bne.n	8005b0c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	334d      	adds	r3, #77	; 0x4d
 8005ada:	2202      	movs	r2, #2
 8005adc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	331b      	adds	r3, #27
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	f040 8107 	bne.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	334c      	adds	r3, #76	; 0x4c
 8005b06:	2202      	movs	r2, #2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e0fb      	b.n	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005b0c:	78fa      	ldrb	r2, [r7, #3]
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	334d      	adds	r3, #77	; 0x4d
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d13a      	bne.n	8005b98 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	334d      	adds	r3, #77	; 0x4d
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	334c      	adds	r3, #76	; 0x4c
 8005b46:	2202      	movs	r2, #2
 8005b48:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	331b      	adds	r3, #27
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f040 80d1 	bne.w	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	331b      	adds	r3, #27
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	e0b5      	b.n	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	334d      	adds	r3, #77	; 0x4d
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d114      	bne.n	8005bd8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	334d      	adds	r3, #77	; 0x4d
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	334c      	adds	r3, #76	; 0x4c
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e095      	b.n	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	334d      	adds	r3, #77	; 0x4d
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d114      	bne.n	8005c18 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	1a9b      	subs	r3, r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	334d      	adds	r3, #77	; 0x4d
 8005bfe:	2202      	movs	r2, #2
 8005c00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	334c      	adds	r3, #76	; 0x4c
 8005c12:	2205      	movs	r2, #5
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e075      	b.n	8005d04 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	334d      	adds	r3, #77	; 0x4d
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b07      	cmp	r3, #7
 8005c2c:	d00a      	beq.n	8005c44 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	334d      	adds	r3, #77	; 0x4d
 8005c3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c40:	2b09      	cmp	r3, #9
 8005c42:	d170      	bne.n	8005d26 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	334d      	adds	r3, #77	; 0x4d
 8005c54:	2202      	movs	r2, #2
 8005c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3344      	adds	r3, #68	; 0x44
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4403      	add	r3, r0
 8005c78:	3344      	adds	r3, #68	; 0x44
 8005c7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3344      	adds	r3, #68	; 0x44
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d914      	bls.n	8005cbc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3344      	adds	r3, #68	; 0x44
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	334c      	adds	r3, #76	; 0x4c
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005cba:	e022      	b.n	8005d02 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	334c      	adds	r3, #76	; 0x4c
 8005ccc:	2202      	movs	r2, #2
 8005cce:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ce6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d02:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	334c      	adds	r3, #76	; 0x4c
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f004 fff6 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d20:	e002      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005d26:	bf00      	nop
  }
}
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08a      	sub	sp, #40	; 0x28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	0c5b      	lsrs	r3, r3, #17
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d004      	beq.n	8005d74 <HCD_RXQLVL_IRQHandler+0x46>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	f000 80b6 	beq.w	8005ede <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005d72:	e0b7      	b.n	8005ee4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80b3 	beq.w	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	332c      	adds	r3, #44	; 0x2c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80a7 	beq.w	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3338      	adds	r3, #56	; 0x38
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	18d1      	adds	r1, r2, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4613      	mov	r3, r2
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4403      	add	r3, r0
 8005db8:	3334      	adds	r3, #52	; 0x34
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	f200 8083 	bhi.w	8005ec8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	332c      	adds	r3, #44	; 0x2c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f001 fda9 	bl	8007934 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4613      	mov	r3, r2
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	332c      	adds	r3, #44	; 0x2c
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	18d1      	adds	r1, r2, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4403      	add	r3, r0
 8005e06:	332c      	adds	r3, #44	; 0x2c
 8005e08:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	3338      	adds	r3, #56	; 0x38
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	18d1      	adds	r1, r2, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4613      	mov	r3, r2
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4403      	add	r3, r0
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	0cdb      	lsrs	r3, r3, #19
 8005e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e46:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	3328      	adds	r3, #40	; 0x28
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d13f      	bne.n	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d03c      	beq.n	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e86:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	333c      	adds	r3, #60	; 0x3c
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f083 0301 	eor.w	r3, r3, #1
 8005eb0:	b2d8      	uxtb	r0, r3
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	333c      	adds	r3, #60	; 0x3c
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	701a      	strb	r2, [r3, #0]
      break;
 8005ec6:	e00c      	b.n	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	334c      	adds	r3, #76	; 0x4c
 8005ed8:	2204      	movs	r2, #4
 8005eda:	701a      	strb	r2, [r3, #0]
      break;
 8005edc:	e001      	b.n	8005ee2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005ee2:	bf00      	nop
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3728      	adds	r7, #40	; 0x28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d10b      	bne.n	8005f3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d102      	bne.n	8005f34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f004 fed0 	bl	800acd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d132      	bne.n	8005fac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f043 0308 	orr.w	r3, r3, #8
 8005f4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d126      	bne.n	8005fa6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7a5b      	ldrb	r3, [r3, #9]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d113      	bne.n	8005f88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f6a:	d106      	bne.n	8005f7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2102      	movs	r1, #2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fe6e 	bl	8007c54 <USB_InitFSLSPClkSel>
 8005f78:	e011      	b.n	8005f9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fe67 	bl	8007c54 <USB_InitFSLSPClkSel>
 8005f86:	e00a      	b.n	8005f9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	79db      	ldrb	r3, [r3, #7]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d106      	bne.n	8005f9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f96:	461a      	mov	r2, r3
 8005f98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005f9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f004 fec2 	bl	800ad28 <HAL_HCD_PortEnabled_Callback>
 8005fa4:	e002      	b.n	8005fac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f004 fecc 	bl	800ad44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d103      	bne.n	8005fbe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f043 0320 	orr.w	r3, r3, #32
 8005fbc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6013      	str	r3, [r2, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e267      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d075      	beq.n	80060de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ff2:	4b88      	ldr	r3, [pc, #544]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffe:	4b85      	ldr	r3, [pc, #532]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006006:	2b08      	cmp	r3, #8
 8006008:	d112      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600a:	4b82      	ldr	r3, [pc, #520]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006016:	d10b      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006018:	4b7e      	ldr	r3, [pc, #504]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05b      	beq.n	80060dc <HAL_RCC_OscConfig+0x108>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d157      	bne.n	80060dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e242      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x74>
 800603a:	4b76      	ldr	r3, [pc, #472]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a75      	ldr	r2, [pc, #468]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e01d      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x98>
 8006052:	4b70      	ldr	r3, [pc, #448]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6f      	ldr	r2, [pc, #444]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b6d      	ldr	r3, [pc, #436]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6c      	ldr	r2, [pc, #432]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 800606c:	4b69      	ldr	r3, [pc, #420]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4b66      	ldr	r3, [pc, #408]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a65      	ldr	r2, [pc, #404]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fc fa7c 	bl	8002588 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006094:	f7fc fa78 	bl	8002588 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	; 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e207      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	4b5b      	ldr	r3, [pc, #364]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0xc0>
 80060b2:	e014      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fc fa68 	bl	8002588 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fc fa64 	bl	8002588 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e1f3      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	4b51      	ldr	r3, [pc, #324]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0xe8>
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d063      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ea:	4b4a      	ldr	r3, [pc, #296]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f6:	4b47      	ldr	r3, [pc, #284]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d11c      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006102:	4b44      	ldr	r3, [pc, #272]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610e:	4b41      	ldr	r3, [pc, #260]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e1c7      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4937      	ldr	r1, [pc, #220]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613a:	e03a      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006144:	4b34      	ldr	r3, [pc, #208]	; (8006218 <HAL_RCC_OscConfig+0x244>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614a:	f7fc fa1d 	bl	8002588 <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006152:	f7fc fa19 	bl	8002588 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e1a8      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	4b2b      	ldr	r3, [pc, #172]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4925      	ldr	r1, [pc, #148]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]
 8006184:	e015      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <HAL_RCC_OscConfig+0x244>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fc f9fc 	bl	8002588 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006194:	f7fc f9f8 	bl	8002588 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e187      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a6:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d036      	beq.n	800622c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <HAL_RCC_OscConfig+0x248>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fc f9dc 	bl	8002588 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fc f9d8 	bl	8002588 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e167      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_OscConfig+0x240>)
 80061e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x200>
 80061f2:	e01b      	b.n	800622c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <HAL_RCC_OscConfig+0x248>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fa:	f7fc f9c5 	bl	8002588 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	e00e      	b.n	8006220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006202:	f7fc f9c1 	bl	8002588 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d907      	bls.n	8006220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e150      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
 8006214:	40023800 	.word	0x40023800
 8006218:	42470000 	.word	0x42470000
 800621c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006220:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ea      	bne.n	8006202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8097 	beq.w	8006368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623e:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	4b7d      	ldr	r3, [pc, #500]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	4a7c      	ldr	r2, [pc, #496]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6413      	str	r3, [r2, #64]	; 0x40
 800625a:	4b7a      	ldr	r3, [pc, #488]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	60bb      	str	r3, [r7, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626a:	4b77      	ldr	r3, [pc, #476]	; (8006448 <HAL_RCC_OscConfig+0x474>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d118      	bne.n	80062a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006276:	4b74      	ldr	r3, [pc, #464]	; (8006448 <HAL_RCC_OscConfig+0x474>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a73      	ldr	r2, [pc, #460]	; (8006448 <HAL_RCC_OscConfig+0x474>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006282:	f7fc f981 	bl	8002588 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628a:	f7fc f97d 	bl	8002588 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e10c      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629c:	4b6a      	ldr	r3, [pc, #424]	; (8006448 <HAL_RCC_OscConfig+0x474>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d106      	bne.n	80062be <HAL_RCC_OscConfig+0x2ea>
 80062b0:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6713      	str	r3, [r2, #112]	; 0x70
 80062bc:	e01c      	b.n	80062f8 <HAL_RCC_OscConfig+0x324>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x30c>
 80062c6:	4b5f      	ldr	r3, [pc, #380]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	4a5e      	ldr	r2, [pc, #376]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	6713      	str	r3, [r2, #112]	; 0x70
 80062d2:	4b5c      	ldr	r3, [pc, #368]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	4a5b      	ldr	r2, [pc, #364]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6713      	str	r3, [r2, #112]	; 0x70
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x324>
 80062e0:	4b58      	ldr	r3, [pc, #352]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e4:	4a57      	ldr	r2, [pc, #348]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6713      	str	r3, [r2, #112]	; 0x70
 80062ec:	4b55      	ldr	r3, [pc, #340]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	4a54      	ldr	r2, [pc, #336]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80062f2:	f023 0304 	bic.w	r3, r3, #4
 80062f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006300:	f7fc f942 	bl	8002588 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fc f93e 	bl	8002588 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0cb      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	4b49      	ldr	r3, [pc, #292]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <HAL_RCC_OscConfig+0x334>
 800632a:	e014      	b.n	8006356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632c:	f7fc f92c 	bl	8002588 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fc f928 	bl	8002588 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0b5      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800634a:	4b3e      	ldr	r3, [pc, #248]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ee      	bne.n	8006334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d105      	bne.n	8006368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635c:	4b39      	ldr	r3, [pc, #228]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	4a38      	ldr	r2, [pc, #224]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a1 	beq.w	80064b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006372:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b08      	cmp	r3, #8
 800637c:	d05c      	beq.n	8006438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d141      	bne.n	800640a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006386:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_RCC_OscConfig+0x478>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fc f8fc 	bl	8002588 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006394:	f7fc f8f8 	bl	8002588 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e087      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	4b27      	ldr	r3, [pc, #156]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	3b01      	subs	r3, #1
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	491b      	ldr	r1, [pc, #108]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063dc:	4b1b      	ldr	r3, [pc, #108]	; (800644c <HAL_RCC_OscConfig+0x478>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e2:	f7fc f8d1 	bl	8002588 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ea:	f7fc f8cd 	bl	8002588 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e05c      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x416>
 8006408:	e054      	b.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <HAL_RCC_OscConfig+0x478>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fc f8ba 	bl	8002588 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006418:	f7fc f8b6 	bl	8002588 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e045      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <HAL_RCC_OscConfig+0x470>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x444>
 8006436:	e03d      	b.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d107      	bne.n	8006450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e038      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
 8006444:	40023800 	.word	0x40023800
 8006448:	40007000 	.word	0x40007000
 800644c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <HAL_RCC_OscConfig+0x4ec>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d028      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d121      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006476:	429a      	cmp	r2, r3
 8006478:	d11a      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006480:	4013      	ands	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006488:	4293      	cmp	r3, r2
 800648a:	d111      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	3b01      	subs	r3, #1
 800649a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649c:	429a      	cmp	r2, r3
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800

080064c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0cc      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064d8:	4b68      	ldr	r3, [pc, #416]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d90c      	bls.n	8006500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e6:	4b65      	ldr	r3, [pc, #404]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	4b63      	ldr	r3, [pc, #396]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0b8      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d020      	beq.n	800654e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006518:	4b59      	ldr	r3, [pc, #356]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a58      	ldr	r2, [pc, #352]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006530:	4b53      	ldr	r3, [pc, #332]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a52      	ldr	r2, [pc, #328]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800653a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800653c:	4b50      	ldr	r3, [pc, #320]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	494d      	ldr	r1, [pc, #308]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d044      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d107      	bne.n	8006572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	4b47      	ldr	r3, [pc, #284]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d119      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e07f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d003      	beq.n	8006582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657e:	2b03      	cmp	r3, #3
 8006580:	d107      	bne.n	8006592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006582:	4b3f      	ldr	r3, [pc, #252]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e06f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006592:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e067      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a2:	4b37      	ldr	r3, [pc, #220]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f023 0203 	bic.w	r2, r3, #3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	4934      	ldr	r1, [pc, #208]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b4:	f7fb ffe8 	bl	8002588 <HAL_GetTick>
 80065b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ba:	e00a      	b.n	80065d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065bc:	f7fb ffe4 	bl	8002588 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e04f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 020c 	and.w	r2, r3, #12
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d1eb      	bne.n	80065bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d20c      	bcs.n	800660c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b22      	ldr	r3, [pc, #136]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fa:	4b20      	ldr	r3, [pc, #128]	; (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d001      	beq.n	800660c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e032      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006618:	4b19      	ldr	r3, [pc, #100]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4916      	ldr	r1, [pc, #88]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	490e      	ldr	r1, [pc, #56]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800664a:	f000 f821 	bl	8006690 <HAL_RCC_GetSysClockFreq>
 800664e:	4602      	mov	r2, r0
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	490a      	ldr	r1, [pc, #40]	; (8006684 <HAL_RCC_ClockConfig+0x1c0>)
 800665c:	5ccb      	ldrb	r3, [r1, r3]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006666:	4b09      	ldr	r3, [pc, #36]	; (800668c <HAL_RCC_ClockConfig+0x1c8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f7fb ff48 	bl	8002500 <HAL_InitTick>

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40023c00 	.word	0x40023c00
 8006680:	40023800 	.word	0x40023800
 8006684:	0800c248 	.word	0x0800c248
 8006688:	20000000 	.word	0x20000000
 800668c:	20000004 	.word	0x20000004

08006690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006694:	b094      	sub	sp, #80	; 0x50
 8006696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	647b      	str	r3, [r7, #68]	; 0x44
 800669c:	2300      	movs	r3, #0
 800669e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a0:	2300      	movs	r3, #0
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a8:	4b79      	ldr	r3, [pc, #484]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 030c 	and.w	r3, r3, #12
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d00d      	beq.n	80066d0 <HAL_RCC_GetSysClockFreq+0x40>
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	f200 80e1 	bhi.w	800687c <HAL_RCC_GetSysClockFreq+0x1ec>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x34>
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d003      	beq.n	80066ca <HAL_RCC_GetSysClockFreq+0x3a>
 80066c2:	e0db      	b.n	800687c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b73      	ldr	r3, [pc, #460]	; (8006894 <HAL_RCC_GetSysClockFreq+0x204>)
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80066c8:	e0db      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ca:	4b73      	ldr	r3, [pc, #460]	; (8006898 <HAL_RCC_GetSysClockFreq+0x208>)
 80066cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066ce:	e0d8      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d0:	4b6f      	ldr	r3, [pc, #444]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066da:	4b6d      	ldr	r3, [pc, #436]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d063      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e6:	4b6a      	ldr	r3, [pc, #424]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	099b      	lsrs	r3, r3, #6
 80066ec:	2200      	movs	r2, #0
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
 80066fa:	2300      	movs	r3, #0
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
 80066fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	f04f 0000 	mov.w	r0, #0
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	0159      	lsls	r1, r3, #5
 8006710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006714:	0150      	lsls	r0, r2, #5
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4621      	mov	r1, r4
 800671c:	1a51      	subs	r1, r2, r1
 800671e:	6139      	str	r1, [r7, #16]
 8006720:	4629      	mov	r1, r5
 8006722:	eb63 0301 	sbc.w	r3, r3, r1
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006734:	4659      	mov	r1, fp
 8006736:	018b      	lsls	r3, r1, #6
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800673e:	4651      	mov	r1, sl
 8006740:	018a      	lsls	r2, r1, #6
 8006742:	4651      	mov	r1, sl
 8006744:	ebb2 0801 	subs.w	r8, r2, r1
 8006748:	4659      	mov	r1, fp
 800674a:	eb63 0901 	sbc.w	r9, r3, r1
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006762:	4690      	mov	r8, r2
 8006764:	4699      	mov	r9, r3
 8006766:	4623      	mov	r3, r4
 8006768:	eb18 0303 	adds.w	r3, r8, r3
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	462b      	mov	r3, r5
 8006770:	eb49 0303 	adc.w	r3, r9, r3
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006782:	4629      	mov	r1, r5
 8006784:	024b      	lsls	r3, r1, #9
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800678c:	4621      	mov	r1, r4
 800678e:	024a      	lsls	r2, r1, #9
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006796:	2200      	movs	r2, #0
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28
 800679a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800679c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a0:	f7fa f9b4 	bl	8000b0c <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ac:	e058      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	4b38      	ldr	r3, [pc, #224]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	2200      	movs	r2, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	4611      	mov	r1, r2
 80067ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	f04f 0000 	mov.w	r0, #0
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	0159      	lsls	r1, r3, #5
 80067d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067da:	0150      	lsls	r0, r2, #5
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4641      	mov	r1, r8
 80067e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80067e6:	4649      	mov	r1, r9
 80067e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006800:	ebb2 040a 	subs.w	r4, r2, sl
 8006804:	eb63 050b 	sbc.w	r5, r3, fp
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	00eb      	lsls	r3, r5, #3
 8006812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006816:	00e2      	lsls	r2, r4, #3
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	4643      	mov	r3, r8
 800681e:	18e3      	adds	r3, r4, r3
 8006820:	603b      	str	r3, [r7, #0]
 8006822:	464b      	mov	r3, r9
 8006824:	eb45 0303 	adc.w	r3, r5, r3
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006836:	4629      	mov	r1, r5
 8006838:	028b      	lsls	r3, r1, #10
 800683a:	4621      	mov	r1, r4
 800683c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006840:	4621      	mov	r1, r4
 8006842:	028a      	lsls	r2, r1, #10
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684a:	2200      	movs	r2, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	61fa      	str	r2, [r7, #28]
 8006850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006854:	f7fa f95a 	bl	8000b0c <__aeabi_uldivmod>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4613      	mov	r3, r2
 800685e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	3301      	adds	r3, #1
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800687a:	e002      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_RCC_GetSysClockFreq+0x204>)
 800687e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006884:	4618      	mov	r0, r3
 8006886:	3750      	adds	r7, #80	; 0x50
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	40023800 	.word	0x40023800
 8006894:	00f42400 	.word	0x00f42400
 8006898:	007a1200 	.word	0x007a1200

0800689c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a2:	681b      	ldr	r3, [r3, #0]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000000 	.word	0x20000000

080068b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068b8:	f7ff fff0 	bl	800689c <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0a9b      	lsrs	r3, r3, #10
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4903      	ldr	r1, [pc, #12]	; (80068d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40023800 	.word	0x40023800
 80068d8:	0800c258 	.word	0x0800c258

080068dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068e0:	f7ff ffdc 	bl	800689c <HAL_RCC_GetHCLKFreq>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	0b5b      	lsrs	r3, r3, #13
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	4903      	ldr	r1, [pc, #12]	; (8006900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f2:	5ccb      	ldrb	r3, [r1, r3]
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40023800 	.word	0x40023800
 8006900:	0800c258 	.word	0x0800c258

08006904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e042      	b.n	800699c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fb fbe6 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	; 0x24
 8006934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc0f 	bl	800716c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800695c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800696c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800697c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d175      	bne.n	8006ab0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_UART_Transmit+0x2c>
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e06e      	b.n	8006ab2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2221      	movs	r2, #33	; 0x21
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e2:	f7fb fdd1 	bl	8002588 <HAL_GetTick>
 80069e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	d108      	bne.n	8006a10 <HAL_UART_Transmit+0x6c>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e003      	b.n	8006a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a18:	e02e      	b.n	8006a78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	; 0x80
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fa22 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e03a      	b.n	8006ab2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	3302      	adds	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	e007      	b.n	8006a6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1cb      	bne.n	8006a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2140      	movs	r1, #64	; 0x40
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f9ee 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e006      	b.n	8006ab2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b08a      	sub	sp, #40	; 0x28
 8006abe:	af02      	add	r7, sp, #8
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	f040 8081 	bne.w	8006bde <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_UART_Receive+0x2e>
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e079      	b.n	8006be0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2222      	movs	r2, #34	; 0x22
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b00:	f7fb fd42 	bl	8002588 <HAL_GetTick>
 8006b04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	88fa      	ldrh	r2, [r7, #6]
 8006b0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1a:	d108      	bne.n	8006b2e <HAL_UART_Receive+0x74>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	e003      	b.n	8006b36 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b36:	e047      	b.n	8006bc8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2120      	movs	r1, #32
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f993 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e042      	b.n	8006be0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	3302      	adds	r3, #2
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e01f      	b.n	8006bba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d007      	beq.n	8006b94 <HAL_UART_Receive+0xda>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <HAL_UART_Receive+0xe8>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e008      	b.n	8006bb4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1b2      	bne.n	8006b38 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006bde:	2302      	movs	r3, #2
  }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d112      	bne.n	8006c28 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_UART_Receive_DMA+0x26>
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e00b      	b.n	8006c2a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f97e 	bl	8006f20 <UART_Start_Receive_DMA>
 8006c24:	4603      	mov	r3, r0
 8006c26:	e000      	b.n	8006c2a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b09c      	sub	sp, #112	; 0x70
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d172      	bne.n	8006d74 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	2200      	movs	r2, #0
 8006c92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	667b      	str	r3, [r7, #100]	; 0x64
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ce8:	647a      	str	r2, [r7, #68]	; 0x44
 8006cea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	663b      	str	r3, [r7, #96]	; 0x60
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d119      	bne.n	8006d74 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d76:	2200      	movs	r2, #0
 8006d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d106      	bne.n	8006d90 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d86:	4619      	mov	r1, r3
 8006d88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d8a:	f7ff ff66 	bl	8006c5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8e:	e002      	b.n	8006d96 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d92:	f7fa febd 	bl	8001b10 <HAL_UART_RxCpltCallback>
}
 8006d96:	bf00      	nop
 8006d98:	3770      	adds	r7, #112	; 0x70
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d108      	bne.n	8006dcc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff ff48 	bl	8006c5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dca:	e002      	b.n	8006dd2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff30 	bl	8006c32 <HAL_UART_RxHalfCpltCallback>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b21      	cmp	r3, #33	; 0x21
 8006e0c:	d108      	bne.n	8006e20 <UART_DMAError+0x46>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e1a:	68b8      	ldr	r0, [r7, #8]
 8006e1c:	f000 f91a 	bl	8007054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	bf0c      	ite	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	2300      	movne	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b22      	cmp	r3, #34	; 0x22
 8006e40:	d108      	bne.n	8006e54 <UART_DMAError+0x7a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e4e:	68b8      	ldr	r0, [r7, #8]
 8006e50:	f000 f928 	bl	80070a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e58:	f043 0210 	orr.w	r2, r3, #16
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e60:	68b8      	ldr	r0, [r7, #8]
 8006e62:	f7ff fef0 	bl	8006c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7e:	e03b      	b.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e86:	d037      	beq.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e88:	f7fb fb7e 	bl	8002588 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d302      	bcc.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e03a      	b.n	8006f18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d020      	beq.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d01d      	beq.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d116      	bne.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f8df 	bl	80070a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e00f      	b.n	8006f18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d0b4      	beq.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b098      	sub	sp, #96	; 0x60
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2222      	movs	r2, #34	; 0x22
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	4a3e      	ldr	r2, [pc, #248]	; (8007048 <UART_Start_Receive_DMA+0x128>)
 8006f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	4a3d      	ldr	r2, [pc, #244]	; (800704c <UART_Start_Receive_DMA+0x12c>)
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	4a3c      	ldr	r2, [pc, #240]	; (8007050 <UART_Start_Receive_DMA+0x130>)
 8006f5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f64:	2200      	movs	r2, #0
 8006f66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	f7fc fa6c 	bl	800345c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d019      	beq.n	8006fd6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3314      	adds	r3, #20
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	657b      	str	r3, [r7, #84]	; 0x54
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ff6:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e5      	bne.n	8006fd6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	617b      	str	r3, [r7, #20]
   return(result);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007020:	653b      	str	r3, [r7, #80]	; 0x50
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3314      	adds	r3, #20
 8007028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800702a:	627a      	str	r2, [r7, #36]	; 0x24
 800702c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6a39      	ldr	r1, [r7, #32]
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	61fb      	str	r3, [r7, #28]
   return(result);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3760      	adds	r7, #96	; 0x60
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	08006c73 	.word	0x08006c73
 800704c:	08006d9f 	.word	0x08006d9f
 8007050:	08006ddb 	.word	0x08006ddb

08007054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b089      	sub	sp, #36	; 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	60bb      	str	r3, [r7, #8]
   return(result);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	61ba      	str	r2, [r7, #24]
 800707e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6979      	ldr	r1, [r7, #20]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	613b      	str	r3, [r7, #16]
   return(result);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e5      	bne.n	800705c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007098:	bf00      	nop
 800709a:	3724      	adds	r7, #36	; 0x24
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b095      	sub	sp, #84	; 0x54
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070cc:	643a      	str	r2, [r7, #64]	; 0x40
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e5      	bne.n	80070ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3314      	adds	r3, #20
 80070e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3314      	adds	r3, #20
 80070fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007100:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	d119      	bne.n	8007150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	330c      	adds	r3, #12
 8007122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	60bb      	str	r3, [r7, #8]
   return(result);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f023 0310 	bic.w	r3, r3, #16
 8007132:	647b      	str	r3, [r7, #68]	; 0x44
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800713c:	61ba      	str	r2, [r7, #24]
 800713e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6979      	ldr	r1, [r7, #20]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	613b      	str	r3, [r7, #16]
   return(result);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e5      	bne.n	800711c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800715e:	bf00      	nop
 8007160:	3754      	adds	r7, #84	; 0x54
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800716c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007170:	b0c0      	sub	sp, #256	; 0x100
 8007172:	af00      	add	r7, sp, #0
 8007174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	68d9      	ldr	r1, [r3, #12]
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	ea40 0301 	orr.w	r3, r0, r1
 8007194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071c4:	f021 010c 	bic.w	r1, r1, #12
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071d2:	430b      	orrs	r3, r1
 80071d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e6:	6999      	ldr	r1, [r3, #24]
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	ea40 0301 	orr.w	r3, r0, r1
 80071f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b8f      	ldr	r3, [pc, #572]	; (8007438 <UART_SetConfig+0x2cc>)
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d005      	beq.n	800720c <UART_SetConfig+0xa0>
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b8d      	ldr	r3, [pc, #564]	; (800743c <UART_SetConfig+0x2d0>)
 8007208:	429a      	cmp	r2, r3
 800720a:	d104      	bne.n	8007216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7ff fb66 	bl	80068dc <HAL_RCC_GetPCLK2Freq>
 8007210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007214:	e003      	b.n	800721e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007216:	f7ff fb4d 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800721a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007228:	f040 810c 	bne.w	8007444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800722c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007230:	2200      	movs	r2, #0
 8007232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800723a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	1891      	adds	r1, r2, r2
 8007244:	65b9      	str	r1, [r7, #88]	; 0x58
 8007246:	415b      	adcs	r3, r3
 8007248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800724e:	4621      	mov	r1, r4
 8007250:	eb12 0801 	adds.w	r8, r2, r1
 8007254:	4629      	mov	r1, r5
 8007256:	eb43 0901 	adc.w	r9, r3, r1
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800726e:	4690      	mov	r8, r2
 8007270:	4699      	mov	r9, r3
 8007272:	4623      	mov	r3, r4
 8007274:	eb18 0303 	adds.w	r3, r8, r3
 8007278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800727c:	462b      	mov	r3, r5
 800727e:	eb49 0303 	adc.w	r3, r9, r3
 8007282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800729a:	460b      	mov	r3, r1
 800729c:	18db      	adds	r3, r3, r3
 800729e:	653b      	str	r3, [r7, #80]	; 0x50
 80072a0:	4613      	mov	r3, r2
 80072a2:	eb42 0303 	adc.w	r3, r2, r3
 80072a6:	657b      	str	r3, [r7, #84]	; 0x54
 80072a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072b0:	f7f9 fc2c 	bl	8000b0c <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <UART_SetConfig+0x2d4>)
 80072ba:	fba3 2302 	umull	r2, r3, r3, r2
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	011c      	lsls	r4, r3, #4
 80072c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072d4:	4642      	mov	r2, r8
 80072d6:	464b      	mov	r3, r9
 80072d8:	1891      	adds	r1, r2, r2
 80072da:	64b9      	str	r1, [r7, #72]	; 0x48
 80072dc:	415b      	adcs	r3, r3
 80072de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072e4:	4641      	mov	r1, r8
 80072e6:	eb12 0a01 	adds.w	sl, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb43 0b01 	adc.w	fp, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007304:	4692      	mov	sl, r2
 8007306:	469b      	mov	fp, r3
 8007308:	4643      	mov	r3, r8
 800730a:	eb1a 0303 	adds.w	r3, sl, r3
 800730e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007312:	464b      	mov	r3, r9
 8007314:	eb4b 0303 	adc.w	r3, fp, r3
 8007318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800732c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007330:	460b      	mov	r3, r1
 8007332:	18db      	adds	r3, r3, r3
 8007334:	643b      	str	r3, [r7, #64]	; 0x40
 8007336:	4613      	mov	r3, r2
 8007338:	eb42 0303 	adc.w	r3, r2, r3
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
 800733e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007346:	f7f9 fbe1 	bl	8000b0c <__aeabi_uldivmod>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4611      	mov	r1, r2
 8007350:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <UART_SetConfig+0x2d4>)
 8007352:	fba3 2301 	umull	r2, r3, r3, r1
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	2264      	movs	r2, #100	; 0x64
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	1acb      	subs	r3, r1, r3
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007366:	4b36      	ldr	r3, [pc, #216]	; (8007440 <UART_SetConfig+0x2d4>)
 8007368:	fba3 2302 	umull	r2, r3, r3, r2
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007374:	441c      	add	r4, r3
 8007376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800737a:	2200      	movs	r2, #0
 800737c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	1891      	adds	r1, r2, r2
 800738e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007390:	415b      	adcs	r3, r3
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007398:	4641      	mov	r1, r8
 800739a:	1851      	adds	r1, r2, r1
 800739c:	6339      	str	r1, [r7, #48]	; 0x30
 800739e:	4649      	mov	r1, r9
 80073a0:	414b      	adcs	r3, r1
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 0300 	mov.w	r3, #0
 80073ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073b0:	4659      	mov	r1, fp
 80073b2:	00cb      	lsls	r3, r1, #3
 80073b4:	4651      	mov	r1, sl
 80073b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ba:	4651      	mov	r1, sl
 80073bc:	00ca      	lsls	r2, r1, #3
 80073be:	4610      	mov	r0, r2
 80073c0:	4619      	mov	r1, r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	4642      	mov	r2, r8
 80073c6:	189b      	adds	r3, r3, r2
 80073c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073cc:	464b      	mov	r3, r9
 80073ce:	460a      	mov	r2, r1
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073ec:	460b      	mov	r3, r1
 80073ee:	18db      	adds	r3, r3, r3
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f2:	4613      	mov	r3, r2
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007402:	f7f9 fb83 	bl	8000b0c <__aeabi_uldivmod>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <UART_SetConfig+0x2d4>)
 800740c:	fba3 1302 	umull	r1, r3, r3, r2
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	2164      	movs	r1, #100	; 0x64
 8007414:	fb01 f303 	mul.w	r3, r1, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	3332      	adds	r3, #50	; 0x32
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <UART_SetConfig+0x2d4>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	f003 0207 	and.w	r2, r3, #7
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4422      	add	r2, r4
 8007432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007434:	e106      	b.n	8007644 <UART_SetConfig+0x4d8>
 8007436:	bf00      	nop
 8007438:	40011000 	.word	0x40011000
 800743c:	40011400 	.word	0x40011400
 8007440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007448:	2200      	movs	r2, #0
 800744a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800744e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007456:	4642      	mov	r2, r8
 8007458:	464b      	mov	r3, r9
 800745a:	1891      	adds	r1, r2, r2
 800745c:	6239      	str	r1, [r7, #32]
 800745e:	415b      	adcs	r3, r3
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
 8007462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007466:	4641      	mov	r1, r8
 8007468:	1854      	adds	r4, r2, r1
 800746a:	4649      	mov	r1, r9
 800746c:	eb43 0501 	adc.w	r5, r3, r1
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	00eb      	lsls	r3, r5, #3
 800747a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800747e:	00e2      	lsls	r2, r4, #3
 8007480:	4614      	mov	r4, r2
 8007482:	461d      	mov	r5, r3
 8007484:	4643      	mov	r3, r8
 8007486:	18e3      	adds	r3, r4, r3
 8007488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800748c:	464b      	mov	r3, r9
 800748e:	eb45 0303 	adc.w	r3, r5, r3
 8007492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074b2:	4629      	mov	r1, r5
 80074b4:	008b      	lsls	r3, r1, #2
 80074b6:	4621      	mov	r1, r4
 80074b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074bc:	4621      	mov	r1, r4
 80074be:	008a      	lsls	r2, r1, #2
 80074c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074c4:	f7f9 fb22 	bl	8000b0c <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4b60      	ldr	r3, [pc, #384]	; (8007650 <UART_SetConfig+0x4e4>)
 80074ce:	fba3 2302 	umull	r2, r3, r3, r2
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	011c      	lsls	r4, r3, #4
 80074d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	61b9      	str	r1, [r7, #24]
 80074f0:	415b      	adcs	r3, r3
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074f8:	4641      	mov	r1, r8
 80074fa:	1851      	adds	r1, r2, r1
 80074fc:	6139      	str	r1, [r7, #16]
 80074fe:	4649      	mov	r1, r9
 8007500:	414b      	adcs	r3, r1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007510:	4659      	mov	r1, fp
 8007512:	00cb      	lsls	r3, r1, #3
 8007514:	4651      	mov	r1, sl
 8007516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751a:	4651      	mov	r1, sl
 800751c:	00ca      	lsls	r2, r1, #3
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	4603      	mov	r3, r0
 8007524:	4642      	mov	r2, r8
 8007526:	189b      	adds	r3, r3, r2
 8007528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800752c:	464b      	mov	r3, r9
 800752e:	460a      	mov	r2, r1
 8007530:	eb42 0303 	adc.w	r3, r2, r3
 8007534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	67bb      	str	r3, [r7, #120]	; 0x78
 8007542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007550:	4649      	mov	r1, r9
 8007552:	008b      	lsls	r3, r1, #2
 8007554:	4641      	mov	r1, r8
 8007556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755a:	4641      	mov	r1, r8
 800755c:	008a      	lsls	r2, r1, #2
 800755e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007562:	f7f9 fad3 	bl	8000b0c <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4611      	mov	r1, r2
 800756c:	4b38      	ldr	r3, [pc, #224]	; (8007650 <UART_SetConfig+0x4e4>)
 800756e:	fba3 2301 	umull	r2, r3, r3, r1
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	2264      	movs	r2, #100	; 0x64
 8007576:	fb02 f303 	mul.w	r3, r2, r3
 800757a:	1acb      	subs	r3, r1, r3
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	3332      	adds	r3, #50	; 0x32
 8007580:	4a33      	ldr	r2, [pc, #204]	; (8007650 <UART_SetConfig+0x4e4>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800758c:	441c      	add	r4, r3
 800758e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007592:	2200      	movs	r2, #0
 8007594:	673b      	str	r3, [r7, #112]	; 0x70
 8007596:	677a      	str	r2, [r7, #116]	; 0x74
 8007598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800759c:	4642      	mov	r2, r8
 800759e:	464b      	mov	r3, r9
 80075a0:	1891      	adds	r1, r2, r2
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	415b      	adcs	r3, r3
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ac:	4641      	mov	r1, r8
 80075ae:	1851      	adds	r1, r2, r1
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	4649      	mov	r1, r9
 80075b4:	414b      	adcs	r3, r1
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075c4:	4659      	mov	r1, fp
 80075c6:	00cb      	lsls	r3, r1, #3
 80075c8:	4651      	mov	r1, sl
 80075ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ce:	4651      	mov	r1, sl
 80075d0:	00ca      	lsls	r2, r1, #3
 80075d2:	4610      	mov	r0, r2
 80075d4:	4619      	mov	r1, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	4642      	mov	r2, r8
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075de:	464b      	mov	r3, r9
 80075e0:	460a      	mov	r2, r1
 80075e2:	eb42 0303 	adc.w	r3, r2, r3
 80075e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	663b      	str	r3, [r7, #96]	; 0x60
 80075f2:	667a      	str	r2, [r7, #100]	; 0x64
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007600:	4649      	mov	r1, r9
 8007602:	008b      	lsls	r3, r1, #2
 8007604:	4641      	mov	r1, r8
 8007606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760a:	4641      	mov	r1, r8
 800760c:	008a      	lsls	r2, r1, #2
 800760e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007612:	f7f9 fa7b 	bl	8000b0c <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <UART_SetConfig+0x4e4>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	3332      	adds	r3, #50	; 0x32
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <UART_SetConfig+0x4e4>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4422      	add	r2, r4
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800764a:	46bd      	mov	sp, r7
 800764c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007650:	51eb851f 	.word	0x51eb851f

08007654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007654:	b084      	sub	sp, #16
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	f107 001c 	add.w	r0, r7, #28
 8007662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007666:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800766a:	2b01      	cmp	r3, #1
 800766c:	d123      	bne.n	80076b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800769a:	2b01      	cmp	r3, #1
 800769c:	d105      	bne.n	80076aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9dc 	bl	8007a68 <USB_CoreReset>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
 80076b4:	e01b      	b.n	80076ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f9d0 	bl	8007a68 <USB_CoreReset>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
 80076e0:	e005      	b.n	80076ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076ee:	7fbb      	ldrb	r3, [r7, #30]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d10b      	bne.n	800770c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f043 0206 	orr.w	r2, r3, #6
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007718:	b004      	add	sp, #16
 800771a:	4770      	bx	lr

0800771c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f043 0201 	orr.w	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f023 0201 	bic.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d115      	bne.n	80077ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800778e:	200a      	movs	r0, #10
 8007790:	f7fa ff06 	bl	80025a0 <HAL_Delay>
      ms += 10U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	330a      	adds	r3, #10
 8007798:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f956 	bl	8007a4c <USB_GetMode>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d01e      	beq.n	80077e4 <USB_SetCurrentMode+0x84>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2bc7      	cmp	r3, #199	; 0xc7
 80077aa:	d9f0      	bls.n	800778e <USB_SetCurrentMode+0x2e>
 80077ac:	e01a      	b.n	80077e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d115      	bne.n	80077e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c0:	200a      	movs	r0, #10
 80077c2:	f7fa feed 	bl	80025a0 <HAL_Delay>
      ms += 10U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	330a      	adds	r3, #10
 80077ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f93d 	bl	8007a4c <USB_GetMode>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <USB_SetCurrentMode+0x84>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2bc7      	cmp	r3, #199	; 0xc7
 80077dc:	d9f0      	bls.n	80077c0 <USB_SetCurrentMode+0x60>
 80077de:	e001      	b.n	80077e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e005      	b.n	80077f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2bc8      	cmp	r3, #200	; 0xc8
 80077e8:	d101      	bne.n	80077ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007812:	d901      	bls.n	8007818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e01b      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	daf2      	bge.n	8007806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	019b      	lsls	r3, r3, #6
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800783c:	d901      	bls.n	8007842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e006      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b20      	cmp	r3, #32
 800784c:	d0f0      	beq.n	8007830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007874:	d901      	bls.n	800787a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e018      	b.n	80078ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	daf2      	bge.n	8007868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2210      	movs	r2, #16
 800788a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3301      	adds	r3, #1
 8007890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007898:	d901      	bls.n	800789e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e006      	b.n	80078ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b10      	cmp	r3, #16
 80078a8:	d0f0      	beq.n	800788c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b089      	sub	sp, #36	; 0x24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4611      	mov	r1, r2
 80078c4:	461a      	mov	r2, r3
 80078c6:	460b      	mov	r3, r1
 80078c8:	71fb      	strb	r3, [r7, #7]
 80078ca:	4613      	mov	r3, r2
 80078cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d123      	bne.n	8007926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078de:	88bb      	ldrh	r3, [r7, #4]
 80078e0:	3303      	adds	r3, #3
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e018      	b.n	800791e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	031a      	lsls	r2, r3, #12
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f8:	461a      	mov	r2, r3
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	3301      	adds	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	3301      	adds	r3, #1
 8007910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	3301      	adds	r3, #1
 8007916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	3301      	adds	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	429a      	cmp	r2, r3
 8007924:	d3e2      	bcc.n	80078ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3724      	adds	r7, #36	; 0x24
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007934:	b480      	push	{r7}
 8007936:	b08b      	sub	sp, #44	; 0x2c
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	089b      	lsrs	r3, r3, #2
 800794e:	b29b      	uxth	r3, r3
 8007950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	623b      	str	r3, [r7, #32]
 800795e:	e014      	b.n	800798a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	601a      	str	r2, [r3, #0]
    pDest++;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	3301      	adds	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	3301      	adds	r3, #1
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	3301      	adds	r3, #1
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	3301      	adds	r3, #1
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	3301      	adds	r3, #1
 8007988:	623b      	str	r3, [r7, #32]
 800798a:	6a3a      	ldr	r2, [r7, #32]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	429a      	cmp	r2, r3
 8007990:	d3e6      	bcc.n	8007960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007992:	8bfb      	ldrh	r3, [r7, #30]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01e      	beq.n	80079d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a2:	461a      	mov	r2, r3
 80079a4:	f107 0310 	add.w	r3, r7, #16
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	701a      	strb	r2, [r3, #0]
      i++;
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	3301      	adds	r3, #1
 80079c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	3301      	adds	r3, #1
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079ca:	8bfb      	ldrh	r3, [r7, #30]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079d0:	8bfb      	ldrh	r3, [r7, #30]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1ea      	bne.n	80079ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079d8:	4618      	mov	r0, r3
 80079da:	372c      	adds	r7, #44	; 0x2c
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f003 0301 	and.w	r3, r3, #1
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a80:	d901      	bls.n	8007a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e01b      	b.n	8007abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	daf2      	bge.n	8007a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f043 0201 	orr.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007aaa:	d901      	bls.n	8007ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e006      	b.n	8007abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d0f0      	beq.n	8007a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007acc:	b084      	sub	sp, #16
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aec:	461a      	mov	r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d10a      	bne.n	8007b40 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b38:	f043 0304 	orr.w	r3, r3, #4
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e014      	b.n	8007b6a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b4e:	f023 0304 	bic.w	r3, r3, #4
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e009      	b.n	8007b6a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b64:	f023 0304 	bic.w	r3, r3, #4
 8007b68:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b6a:	2110      	movs	r1, #16
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff fe43 	bl	80077f8 <USB_FlushTxFifo>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff fe6d 	bl	800785c <USB_FlushRxFifo>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	e015      	b.n	8007bbe <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ba4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d3e3      	bcc.n	8007b92 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bd6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <USB_HostInit+0x170>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10b      	bne.n	8007bf8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <USB_HostInit+0x174>)
 8007bec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <USB_HostInit+0x178>)
 8007bf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007bf6:	e009      	b.n	8007c0c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2280      	movs	r2, #128	; 0x80
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <USB_HostInit+0x17c>)
 8007c02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <USB_HostInit+0x180>)
 8007c08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f043 0210 	orr.w	r2, r3, #16
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699a      	ldr	r2, [r3, #24]
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <USB_HostInit+0x184>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c38:	b004      	add	sp, #16
 8007c3a:	4770      	bx	lr
 8007c3c:	40040000 	.word	0x40040000
 8007c40:	01000200 	.word	0x01000200
 8007c44:	00e00300 	.word	0x00e00300
 8007c48:	00600080 	.word	0x00600080
 8007c4c:	004000e0 	.word	0x004000e0
 8007c50:	a3200008 	.word	0xa3200008

08007c54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d107      	bne.n	8007ca6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ca2:	6053      	str	r3, [r2, #4]
 8007ca4:	e00c      	b.n	8007cc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d107      	bne.n	8007cbc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007cb8:	6053      	str	r3, [r2, #4]
 8007cba:	e001      	b.n	8007cc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007cee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007cfe:	2064      	movs	r0, #100	; 0x64
 8007d00:	f7fa fc4e 	bl	80025a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d10:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d12:	200a      	movs	r0, #10
 8007d14:	f7fa fc44 	bl	80025a0 <HAL_Delay>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <USB_DriveVbus+0x44>
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d106      	bne.n	8007d66 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d64:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d70:	d109      	bne.n	8007d86 <USB_DriveVbus+0x64>
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d84:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0c5b      	lsrs	r3, r3, #17
 8007db2:	f003 0303 	and.w	r3, r3, #3
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	b29b      	uxth	r3, r3
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	70fb      	strb	r3, [r7, #3]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70bb      	strb	r3, [r7, #2]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e12:	461a      	mov	r2, r3
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d87c      	bhi.n	8007f1c <USB_HC_Init+0x138>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <USB_HC_Init+0x44>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007edf 	.word	0x08007edf
 8007e30:	08007e39 	.word	0x08007e39
 8007e34:	08007ea1 	.word	0x08007ea1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e44:	461a      	mov	r2, r3
 8007e46:	f240 439d 	movw	r3, #1181	; 0x49d
 8007e4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da10      	bge.n	8007e76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e72:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007e74:	e055      	b.n	8007f22 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a6f      	ldr	r2, [pc, #444]	; (8008038 <USB_HC_Init+0x254>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d151      	bne.n	8007f22 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e9c:	60d3      	str	r3, [r2, #12]
      break;
 8007e9e:	e040      	b.n	8007f22 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eac:	461a      	mov	r2, r3
 8007eae:	f240 639d 	movw	r3, #1693	; 0x69d
 8007eb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007eb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da34      	bge.n	8007f26 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007edc:	e023      	b.n	8007f26 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eea:	461a      	mov	r2, r3
 8007eec:	f240 2325 	movw	r3, #549	; 0x225
 8007ef0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ef2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da17      	bge.n	8007f2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f14:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007f18:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f1a:	e006      	b.n	8007f2a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77fb      	strb	r3, [r7, #31]
      break;
 8007f20:	e004      	b.n	8007f2c <USB_HC_Init+0x148>
      break;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <USB_HC_Init+0x148>
      break;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <USB_HC_Init+0x148>
      break;
 8007f2a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f58:	f043 0302 	orr.w	r3, r3, #2
 8007f5c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	6939      	ldr	r1, [r7, #16]
 8007f74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da03      	bge.n	8007f98 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e001      	b.n	8007f9c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fef9 	bl	8007d94 <USB_GetHostSpeed>
 8007fa2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d106      	bne.n	8007fba <USB_HC_Init+0x1d6>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d003      	beq.n	8007fba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	e001      	b.n	8007fbe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fbe:	787b      	ldrb	r3, [r7, #1]
 8007fc0:	059b      	lsls	r3, r3, #22
 8007fc2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fc6:	78bb      	ldrb	r3, [r7, #2]
 8007fc8:	02db      	lsls	r3, r3, #11
 8007fca:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fd4:	049b      	lsls	r3, r3, #18
 8007fd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007fdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fe2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ffc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008002:	2b03      	cmp	r3, #3
 8008004:	d003      	beq.n	800800e <USB_HC_Init+0x22a>
 8008006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10f      	bne.n	800802e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	440a      	add	r2, r1
 8008024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800802c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800802e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40040000 	.word	0x40040000

0800803c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08c      	sub	sp, #48	; 0x30
 8008040:	af02      	add	r7, sp, #8
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008058:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a5d      	ldr	r2, [pc, #372]	; (80081d4 <USB_HC_StartXfer+0x198>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d12f      	bne.n	80080c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d11c      	bne.n	80080a2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	7c9b      	ldrb	r3, [r3, #18]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <USB_HC_StartXfer+0x3c>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	7c9b      	ldrb	r3, [r3, #18]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d124      	bne.n	80080c2 <USB_HC_StartXfer+0x86>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	799b      	ldrb	r3, [r3, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d120      	bne.n	80080c2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60d3      	str	r3, [r2, #12]
 80080a0:	e00f      	b.n	80080c2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <USB_HC_StartXfer+0x86>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	795b      	ldrb	r3, [r3, #5]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d107      	bne.n	80080c2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb6b 	bl	8008794 <USB_DoPing>
        return HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e232      	b.n	8008528 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	799b      	ldrb	r3, [r3, #6]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d158      	bne.n	800817c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80080ca:	2301      	movs	r3, #1
 80080cc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	78db      	ldrb	r3, [r3, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	8a92      	ldrh	r2, [r2, #20]
 80080dc:	fb03 f202 	mul.w	r2, r3, r2
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	61da      	str	r2, [r3, #28]
 80080e4:	e07c      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7c9b      	ldrb	r3, [r3, #18]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d130      	bne.n	8008150 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	2bbc      	cmp	r3, #188	; 0xbc
 80080f4:	d918      	bls.n	8008128 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	8a9b      	ldrh	r3, [r3, #20]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d003      	beq.n	8008118 <USB_HC_StartXfer+0xdc>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d103      	bne.n	8008120 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2202      	movs	r2, #2
 800811c:	60da      	str	r2, [r3, #12]
 800811e:	e05f      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2201      	movs	r2, #1
 8008124:	60da      	str	r2, [r3, #12]
 8008126:	e05b      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d007      	beq.n	8008148 <USB_HC_StartXfer+0x10c>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d003      	beq.n	8008148 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2204      	movs	r2, #4
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	e04b      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2203      	movs	r2, #3
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	e047      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10d      	bne.n	8008172 <USB_HC_StartXfer+0x136>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	8a92      	ldrh	r2, [r2, #20]
 800815e:	4293      	cmp	r3, r2
 8008160:	d907      	bls.n	8008172 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	8a92      	ldrh	r2, [r2, #20]
 8008168:	fb03 f202 	mul.w	r2, r3, r2
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	61da      	str	r2, [r3, #28]
 8008170:	e036      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6a1a      	ldr	r2, [r3, #32]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	61da      	str	r2, [r3, #28]
 800817a:	e031      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d018      	beq.n	80081b6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	8a92      	ldrh	r2, [r2, #20]
 800818c:	4413      	add	r3, r2
 800818e:	3b01      	subs	r3, #1
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	8a92      	ldrh	r2, [r2, #20]
 8008194:	fbb3 f3f2 	udiv	r3, r3, r2
 8008198:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800819a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800819c:	8b7b      	ldrh	r3, [r7, #26]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d90b      	bls.n	80081ba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80081a2:	8b7b      	ldrh	r3, [r7, #26]
 80081a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	8a92      	ldrh	r2, [r2, #20]
 80081ac:	fb03 f202 	mul.w	r2, r3, r2
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	61da      	str	r2, [r3, #28]
 80081b4:	e001      	b.n	80081ba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80081b6:	2301      	movs	r3, #1
 80081b8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	8a92      	ldrh	r2, [r2, #20]
 80081c8:	fb03 f202 	mul.w	r2, r3, r2
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	61da      	str	r2, [r3, #28]
 80081d0:	e006      	b.n	80081e0 <USB_HC_StartXfer+0x1a4>
 80081d2:	bf00      	nop
 80081d4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ea:	04d9      	lsls	r1, r3, #19
 80081ec:	4ba3      	ldr	r3, [pc, #652]	; (800847c <USB_HC_StartXfer+0x440>)
 80081ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	7d9b      	ldrb	r3, [r3, #22]
 80081f6:	075b      	lsls	r3, r3, #29
 80081f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	0148      	lsls	r0, r1, #5
 8008200:	6a39      	ldr	r1, [r7, #32]
 8008202:	4401      	add	r1, r0
 8008204:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008208:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800820a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6999      	ldr	r1, [r3, #24]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	460a      	mov	r2, r1
 8008224:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	440a      	add	r2, r1
 8008254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800825c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	7e7b      	ldrb	r3, [r7, #25]
 800826e:	075b      	lsls	r3, r3, #29
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	0148      	lsls	r0, r1, #5
 8008274:	6a39      	ldr	r1, [r7, #32]
 8008276:	4401      	add	r1, r0
 8008278:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800827c:	4313      	orrs	r3, r2
 800827e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	799b      	ldrb	r3, [r3, #6]
 8008284:	2b01      	cmp	r3, #1
 8008286:	f040 80c3 	bne.w	8008410 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	7c5b      	ldrb	r3, [r3, #17]
 800828e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008294:	4313      	orrs	r3, r2
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80082a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80082a6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	79db      	ldrb	r3, [r3, #7]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d123      	bne.n	8008318 <USB_HC_StartXfer+0x2dc>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	78db      	ldrb	r3, [r3, #3]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d11f      	bne.n	8008318 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	6a3a      	ldr	r2, [r7, #32]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	440a      	add	r2, r1
 800830e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008316:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	7c9b      	ldrb	r3, [r3, #18]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d003      	beq.n	8008328 <USB_HC_StartXfer+0x2ec>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	7c9b      	ldrb	r3, [r3, #18]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d117      	bne.n	8008358 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800832c:	2b01      	cmp	r3, #1
 800832e:	d113      	bne.n	8008358 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d10f      	bne.n	8008358 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	4413      	add	r3, r2
 8008340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	6a3a      	ldr	r2, [r7, #32]
 800834c:	440a      	add	r2, r1
 800834e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008356:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	7c9b      	ldrb	r3, [r3, #18]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d162      	bne.n	8008426 <USB_HC_StartXfer+0x3ea>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	78db      	ldrb	r3, [r3, #3]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d15e      	bne.n	8008426 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	3b01      	subs	r3, #1
 800836e:	2b03      	cmp	r3, #3
 8008370:	d858      	bhi.n	8008424 <USB_HC_StartXfer+0x3e8>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <USB_HC_StartXfer+0x33c>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008389 	.word	0x08008389
 800837c:	080083ab 	.word	0x080083ab
 8008380:	080083cd 	.word	0x080083cd
 8008384:	080083ef 	.word	0x080083ef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	6a3a      	ldr	r2, [r7, #32]
 800839c:	440a      	add	r2, r1
 800839e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	6053      	str	r3, [r2, #4]
          break;
 80083a8:	e03d      	b.n	8008426 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	6a3a      	ldr	r2, [r7, #32]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c4:	f043 030e 	orr.w	r3, r3, #14
 80083c8:	6053      	str	r3, [r2, #4]
          break;
 80083ca:	e02c      	b.n	8008426 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	6a3a      	ldr	r2, [r7, #32]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083ea:	6053      	str	r3, [r2, #4]
          break;
 80083ec:	e01b      	b.n	8008426 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	6a3a      	ldr	r2, [r7, #32]
 8008402:	440a      	add	r2, r1
 8008404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800840c:	6053      	str	r3, [r2, #4]
          break;
 800840e:	e00a      	b.n	8008426 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	4413      	add	r3, r2
 8008418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6053      	str	r3, [r2, #4]
 8008422:	e000      	b.n	8008426 <USB_HC_StartXfer+0x3ea>
          break;
 8008424:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800843c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	78db      	ldrb	r3, [r3, #3]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	e003      	b.n	8008458 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008456:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800845e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	4413      	add	r3, r2
 8008468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846c:	461a      	mov	r2, r3
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e055      	b.n	8008528 <USB_HC_StartXfer+0x4ec>
 800847c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d14e      	bne.n	8008526 <USB_HC_StartXfer+0x4ea>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d04a      	beq.n	8008526 <USB_HC_StartXfer+0x4ea>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	79db      	ldrb	r3, [r3, #7]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d146      	bne.n	8008526 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	7c9b      	ldrb	r3, [r3, #18]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d831      	bhi.n	8008504 <USB_HC_StartXfer+0x4c8>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USB_HC_StartXfer+0x46c>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084dd 	.word	0x080084dd
 80084b0:	080084b9 	.word	0x080084b9
 80084b4:	080084dd 	.word	0x080084dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	3303      	adds	r3, #3
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80084c2:	8afa      	ldrh	r2, [r7, #22]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d91c      	bls.n	8008508 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f043 0220 	orr.w	r2, r3, #32
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80084da:	e015      	b.n	8008508 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	3303      	adds	r3, #3
 80084e2:	089b      	lsrs	r3, r3, #2
 80084e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084e6:	8afa      	ldrh	r2, [r7, #22]
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90a      	bls.n	800850c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	619a      	str	r2, [r3, #24]
        }
        break;
 8008502:	e003      	b.n	800850c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008504:	bf00      	nop
 8008506:	e002      	b.n	800850e <USB_HC_StartXfer+0x4d2>
        break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <USB_HC_StartXfer+0x4d2>
        break;
 800850c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6999      	ldr	r1, [r3, #24]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785a      	ldrb	r2, [r3, #1]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	b29b      	uxth	r3, r3
 800851c:	2000      	movs	r0, #0
 800851e:	9000      	str	r0, [sp, #0]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff f9c9 	bl	80078b8 <USB_WritePacket>
  }

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3728      	adds	r7, #40	; 0x28
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	b29b      	uxth	r3, r3
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008552:	b480      	push	{r7}
 8008554:	b089      	sub	sp, #36	; 0x24
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	0c9b      	lsrs	r3, r3, #18
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	0fdb      	lsrs	r3, r3, #31
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	0fdb      	lsrs	r3, r3, #31
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d10d      	bne.n	80085d4 <USB_HC_Halt+0x82>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <USB_HC_Halt+0x82>
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d002      	beq.n	80085d0 <USB_HC_Halt+0x7e>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d101      	bne.n	80085d4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e0d8      	b.n	8008786 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <USB_HC_Halt+0x8e>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d173      	bne.n	80086c8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	0151      	lsls	r1, r2, #5
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	440a      	add	r2, r1
 80085f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d14a      	bne.n	80086a2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d133      	bne.n	8008680 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	0151      	lsls	r1, r2, #5
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	440a      	add	r2, r1
 800862e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008636:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008656:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	3301      	adds	r3, #1
 800865c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008664:	d82e      	bhi.n	80086c4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867c:	d0ec      	beq.n	8008658 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800867e:	e081      	b.n	8008784 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800869a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800869e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086a0:	e070      	b.n	8008784 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086c2:	e05f      	b.n	8008784 <USB_HC_Halt+0x232>
            break;
 80086c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086c6:	e05d      	b.n	8008784 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d133      	bne.n	8008760 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	440a      	add	r2, r1
 800870e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008712:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008716:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008736:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	3301      	adds	r3, #1
 800873c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008744:	d81d      	bhi.n	8008782 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800875c:	d0ec      	beq.n	8008738 <USB_HC_Halt+0x1e6>
 800875e:	e011      	b.n	8008784 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	440a      	add	r2, r1
 8008776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800877a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	e000      	b.n	8008784 <USB_HC_Halt+0x232>
          break;
 8008782:	bf00      	nop
    }
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3724      	adds	r7, #36	; 0x24
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
	...

08008794 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80087a8:	2301      	movs	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	04da      	lsls	r2, r3, #19
 80087b0:	4b15      	ldr	r3, [pc, #84]	; (8008808 <USB_DoPing+0x74>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	0151      	lsls	r1, r2, #5
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	440a      	add	r2, r1
 80087bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	461a      	mov	r2, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	1ff80000 	.word	0x1ff80000

0800880c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe ff8c 	bl	800773e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008826:	2110      	movs	r1, #16
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7fe ffe5 	bl	80077f8 <USB_FlushTxFifo>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff f80f 	bl	800785c <USB_FlushRxFifo>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	e01f      	b.n	800888e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008864:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800886c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008874:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008882:	461a      	mov	r2, r3
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	3301      	adds	r3, #1
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b0f      	cmp	r3, #15
 8008892:	d9dc      	bls.n	800884e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e034      	b.n	8008904 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ce:	461a      	mov	r2, r3
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088e0:	d80c      	bhi.n	80088fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088f8:	d0ec      	beq.n	80088d4 <USB_StopHost+0xc8>
 80088fa:	e000      	b.n	80088fe <USB_StopHost+0xf2>
        break;
 80088fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	3301      	adds	r3, #1
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d9c7      	bls.n	800889a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008910:	461a      	mov	r2, r3
 8008912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008916:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800891e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7fe fefb 	bl	800771c <USB_EnableGlobalInt>

  return ret;
 8008926:	7ffb      	ldrb	r3, [r7, #31]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b089      	sub	sp, #36	; 0x24
 8008934:	af04      	add	r7, sp, #16
 8008936:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008938:	2301      	movs	r3, #1
 800893a:	2202      	movs	r2, #2
 800893c:	2102      	movs	r1, #2
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fcea 	bl	8009318 <USBH_FindInterface>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2bff      	cmp	r3, #255	; 0xff
 800894c:	d002      	beq.n	8008954 <USBH_CDC_InterfaceInit+0x24>
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d901      	bls.n	8008958 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	e13d      	b.n	8008bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fcbf 	bl	80092e0 <USBH_SelectInterface>
 8008962:	4603      	mov	r3, r0
 8008964:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800896c:	2302      	movs	r3, #2
 800896e:	e131      	b.n	8008bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008976:	2050      	movs	r0, #80	; 0x50
 8008978:	f002 fbe8 	bl	800b14c <malloc>
 800897c:	4603      	mov	r3, r0
 800897e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008990:	2302      	movs	r3, #2
 8008992:	e11f      	b.n	8008bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008994:	2250      	movs	r2, #80	; 0x50
 8008996:	2100      	movs	r1, #0
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	f002 fe77 	bl	800b68c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	211a      	movs	r1, #26
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	da15      	bge.n	80089e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	211a      	movs	r1, #26
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	4413      	add	r3, r2
 80089c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	211a      	movs	r1, #26
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089dc:	881a      	ldrh	r2, [r3, #0]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f002 f832 	bl	800aa52 <USBH_AllocPipe>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	7858      	ldrb	r0, [r3, #1]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	8952      	ldrh	r2, [r2, #10]
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	2203      	movs	r2, #3
 8008a12:	9201      	str	r2, [sp, #4]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4623      	mov	r3, r4
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 ffea 	bl	800a9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2200      	movs	r2, #0
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f002 fb09 	bl	800b040 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2200      	movs	r2, #0
 8008a32:	210a      	movs	r1, #10
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc6f 	bl	8009318 <USBH_FindInterface>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	2bff      	cmp	r3, #255	; 0xff
 8008a42:	d002      	beq.n	8008a4a <USBH_CDC_InterfaceInit+0x11a>
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d901      	bls.n	8008a4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e0c2      	b.n	8008bd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	211a      	movs	r1, #26
 8008a54:	fb01 f303 	mul.w	r3, r1, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da16      	bge.n	8008a94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	211a      	movs	r1, #26
 8008a6c:	fb01 f303 	mul.w	r3, r1, r3
 8008a70:	4413      	add	r3, r2
 8008a72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	211a      	movs	r1, #26
 8008a82:	fb01 f303 	mul.w	r3, r1, r3
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a8c:	881a      	ldrh	r2, [r3, #0]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	835a      	strh	r2, [r3, #26]
 8008a92:	e015      	b.n	8008ac0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	211a      	movs	r1, #26
 8008a9a:	fb01 f303 	mul.w	r3, r1, r3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	211a      	movs	r1, #26
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008aba:	881a      	ldrh	r2, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	211a      	movs	r1, #26
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da16      	bge.n	8008b06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	211a      	movs	r1, #26
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	211a      	movs	r1, #26
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008afe:	881a      	ldrh	r2, [r3, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	835a      	strh	r2, [r3, #26]
 8008b04:	e015      	b.n	8008b32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	211a      	movs	r1, #26
 8008b0c:	fb01 f303 	mul.w	r3, r1, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	211a      	movs	r1, #26
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b2c:	881a      	ldrh	r2, [r3, #0]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	7b9b      	ldrb	r3, [r3, #14]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 ff8a 	bl	800aa52 <USBH_AllocPipe>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	7bdb      	ldrb	r3, [r3, #15]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 ff80 	bl	800aa52 <USBH_AllocPipe>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	7b59      	ldrb	r1, [r3, #13]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	7b98      	ldrb	r0, [r3, #14]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	8b12      	ldrh	r2, [r2, #24]
 8008b72:	9202      	str	r2, [sp, #8]
 8008b74:	2202      	movs	r2, #2
 8008b76:	9201      	str	r2, [sp, #4]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 ff38 	bl	800a9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	7b19      	ldrb	r1, [r3, #12]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	7bd8      	ldrb	r0, [r3, #15]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	8b52      	ldrh	r2, [r2, #26]
 8008b9c:	9202      	str	r2, [sp, #8]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	9201      	str	r2, [sp, #4]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 ff23 	bl	800a9f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	7b5b      	ldrb	r3, [r3, #13]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f002 fa3e 	bl	800b040 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	7b1b      	ldrb	r3, [r3, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f002 fa37 	bl	800b040 <USBH_LL_SetToggle>

  return USBH_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd90      	pop	{r4, r7, pc}

08008bdc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00e      	beq.n	8008c14 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 ff18 	bl	800aa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 ff43 	bl	800aa94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	7b1b      	ldrb	r3, [r3, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00e      	beq.n	8008c3a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	7b1b      	ldrb	r3, [r3, #12]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 ff05 	bl	800aa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	7b1b      	ldrb	r3, [r3, #12]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 ff30 	bl	800aa94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	7b5b      	ldrb	r3, [r3, #13]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	7b5b      	ldrb	r3, [r3, #13]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fef2 	bl	800aa32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	7b5b      	ldrb	r3, [r3, #13]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 ff1d 	bl	800aa94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f002 fa71 	bl	800b15c <free>
    phost->pActiveClass->pData = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c80:	2200      	movs	r2, #0
 8008c82:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3340      	adds	r3, #64	; 0x40
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8da 	bl	8008e60 <GetLineCoding>
 8008cac:	4603      	mov	r3, r0
 8008cae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d105      	bne.n	8008cc2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d877      	bhi.n	8008de0 <USBH_CDC_Process+0x114>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <USBH_CDC_Process+0x2c>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d13 	.word	0x08008d13
 8008d00:	08008d43 	.word	0x08008d43
 8008d04:	08008db7 	.word	0x08008db7
 8008d08:	08008dc5 	.word	0x08008dc5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e06d      	b.n	8008dee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8c0 	bl	8008e9e <SetLineCoding>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d30:	e058      	b.n	8008de4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d055      	beq.n	8008de4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008d40:	e050      	b.n	8008de4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3340      	adds	r3, #64	; 0x40
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f889 	bl	8008e60 <GetLineCoding>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d126      	bne.n	8008da6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d13b      	bne.n	8008de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d133      	bne.n	8008de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d12b      	bne.n	8008de8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d124      	bne.n	8008de8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9bd 	bl	800911e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008da4:	e020      	b.n	8008de8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d01d      	beq.n	8008de8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2204      	movs	r2, #4
 8008db0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008db4:	e018      	b.n	8008de8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8cc 	bl	8008f54 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f93f 	bl	8009040 <CDC_ProcessReception>
      break;
 8008dc2:	e014      	b.n	8008dee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 f886 	bl	8009ed8 <USBH_ClrFeature>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008dde:	e005      	b.n	8008dec <USBH_CDC_Process+0x120>

    default:
      break;
 8008de0:	bf00      	nop
 8008de2:	e004      	b.n	8008dee <USBH_CDC_Process+0x122>
      break;
 8008de4:	bf00      	nop
 8008de6:	e002      	b.n	8008dee <USBH_CDC_Process+0x122>
      break;
 8008de8:	bf00      	nop
 8008dea:	e000      	b.n	8008dee <USBH_CDC_Process+0x122>
      break;
 8008dec:	bf00      	nop

  }

  return status;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b0b      	cmp	r3, #11
 8008e28:	d115      	bne.n	8008e56 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 fdfa 	bl	800aa32 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	7b1b      	ldrb	r3, [r3, #12]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fdf4 	bl	800aa32 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7b5b      	ldrb	r3, [r3, #13]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 fdee 	bl	800aa32 <USBH_ClosePipe>
  }
  return USBH_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	22a1      	movs	r2, #161	; 0xa1
 8008e6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2221      	movs	r2, #33	; 0x21
 8008e74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2207      	movs	r2, #7
 8008e86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2207      	movs	r2, #7
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fb5e 	bl	800a550 <USBH_CtlReq>
 8008e94:	4603      	mov	r3, r0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2221      	movs	r2, #33	; 0x21
 8008eac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2207      	movs	r2, #7
 8008ec4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2207      	movs	r2, #7
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 fb3f 	bl	800a550 <USBH_CtlReq>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	77fb      	strb	r3, [r7, #31]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	61bb      	str	r3, [r7, #24]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <USBH_CDC_Receive+0x2e>
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d11c      	bne.n	8008f44 <USBH_CDC_Receive+0x68>
  {
    CDC_Handle->pRxData = pbuff;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2203      	movs	r2, #3
 8008f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2203      	movs	r2, #3
 8008f22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	77fb      	strb	r3, [r7, #31]

    memset (buffer, '\0', 64);  // clear the buffer
 8008f2a:	2240      	movs	r2, #64	; 0x40
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4808      	ldr	r0, [pc, #32]	; (8008f50 <USBH_CDC_Receive+0x74>)
 8008f30:	f002 fbac 	bl	800b68c <memset>
    uint8_t len = length;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	75fb      	strb	r3, [r7, #23]
    memcpy(buffer, pbuff, len);  // copy the data to the buffer
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4804      	ldr	r0, [pc, #16]	; (8008f50 <USBH_CDC_Receive+0x74>)
 8008f40:	f002 fc0b 	bl	800b75a <memcpy>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8008f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200003d0 	.word	0x200003d0

08008f54 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d002      	beq.n	8008f7a <CDC_ProcessTransmission+0x26>
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d023      	beq.n	8008fc0 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f78:	e05e      	b.n	8009038 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	8b12      	ldrh	r2, [r2, #24]
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d90b      	bls.n	8008f9e <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	69d9      	ldr	r1, [r3, #28]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8b1a      	ldrh	r2, [r3, #24]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	7b5b      	ldrb	r3, [r3, #13]
 8008f92:	2001      	movs	r0, #1
 8008f94:	9000      	str	r0, [sp, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fce9 	bl	800a96e <USBH_BulkSendData>
 8008f9c:	e00b      	b.n	8008fb6 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	7b5b      	ldrb	r3, [r3, #13]
 8008fac:	2001      	movs	r0, #1
 8008fae:	9000      	str	r0, [sp, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fcdc 	bl	800a96e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fbe:	e03b      	b.n	8009038 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	7b5b      	ldrb	r3, [r3, #13]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f002 f810 	bl	800afec <USBH_LL_GetURBState>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d128      	bne.n	8009028 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	8b12      	ldrh	r2, [r2, #24]
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d90e      	bls.n	8009000 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	8b12      	ldrh	r2, [r2, #24]
 8008fea:	1a9a      	subs	r2, r3, r2
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	8b12      	ldrh	r2, [r2, #24]
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	61da      	str	r2, [r3, #28]
 8008ffe:	e002      	b.n	8009006 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009016:	e00e      	b.n	8009036 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f868 	bl	80090f6 <USBH_CDC_TransmitCallback>
      break;
 8009026:	e006      	b.n	8009036 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d103      	bne.n	8009036 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009036:	bf00      	nop
  }
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009052:	2300      	movs	r3, #0
 8009054:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800905c:	2b03      	cmp	r3, #3
 800905e:	d002      	beq.n	8009066 <CDC_ProcessReception+0x26>
 8009060:	2b04      	cmp	r3, #4
 8009062:	d00e      	beq.n	8009082 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009064:	e043      	b.n	80090ee <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	6a19      	ldr	r1, [r3, #32]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	8b5a      	ldrh	r2, [r3, #26]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	7b1b      	ldrb	r3, [r3, #12]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 fca0 	bl	800a9b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2204      	movs	r2, #4
 800907c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009080:	e035      	b.n	80090ee <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 ffaf 	bl	800afec <USBH_LL_GetURBState>
 800908e:	4603      	mov	r3, r0
 8009090:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009092:	7cfb      	ldrb	r3, [r7, #19]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d129      	bne.n	80090ec <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	7b1b      	ldrb	r3, [r3, #12]
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 ff12 	bl	800aec8 <USBH_LL_GetLastXferSize>
 80090a4:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d016      	beq.n	80090de <CDC_ProcessReception+0x9e>
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	8b5b      	ldrh	r3, [r3, #26]
 80090b4:	461a      	mov	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d910      	bls.n	80090de <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	441a      	add	r2, r3
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2203      	movs	r2, #3
 80090d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090dc:	e006      	b.n	80090ec <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f80f 	bl	800910a <USBH_CDC_ReceiveCallback>
      break;
 80090ec:	bf00      	nop
  }
}
 80090ee:	bf00      	nop
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	4613      	mov	r3, r2
 800913e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009146:	2302      	movs	r3, #2
 8009148:	e029      	b.n	800919e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	79fa      	ldrb	r2, [r7, #7]
 800914e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 f81f 	bl	80091a6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f001 fde2 	bl	800ad60 <USBH_LL_Init>

  return USBH_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	e009      	b.n	80091cc <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	33e0      	adds	r3, #224	; 0xe0
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3301      	adds	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b0f      	cmp	r3, #15
 80091d0:	d9f2      	bls.n	80091b8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e009      	b.n	80091ec <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091f2:	d3f1      	bcc.n	80091d8 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2240      	movs	r2, #64	; 0x40
 8009218:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	331c      	adds	r3, #28
 8009244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009248:	2100      	movs	r1, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f002 fa1e 	bl	800b68c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800925a:	2100      	movs	r1, #0
 800925c:	4618      	mov	r0, r3
 800925e:	f002 fa15 	bl	800b68c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009268:	2212      	movs	r2, #18
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f002 fa0d 	bl	800b68c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009278:	223e      	movs	r2, #62	; 0x3e
 800927a:	2100      	movs	r1, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f002 fa05 	bl	800b68c <memset>

  return USBH_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d016      	beq.n	80092ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10e      	bne.n	80092c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092b0:	1c59      	adds	r1, r3, #1
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	33de      	adds	r3, #222	; 0xde
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
 80092c6:	e004      	b.n	80092d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092c8:	2302      	movs	r3, #2
 80092ca:	73fb      	strb	r3, [r7, #15]
 80092cc:	e001      	b.n	80092d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d204      	bcs.n	8009306 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009304:	e001      	b.n	800930a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009306:	2302      	movs	r3, #2
 8009308:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	461a      	mov	r2, r3
 8009326:	4603      	mov	r3, r0
 8009328:	70fb      	strb	r3, [r7, #3]
 800932a:	460b      	mov	r3, r1
 800932c:	70bb      	strb	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009340:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009342:	e025      	b.n	8009390 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	221a      	movs	r2, #26
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	3308      	adds	r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	3302      	adds	r3, #2
 8009354:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	795b      	ldrb	r3, [r3, #5]
 800935a:	78fa      	ldrb	r2, [r7, #3]
 800935c:	429a      	cmp	r2, r3
 800935e:	d002      	beq.n	8009366 <USBH_FindInterface+0x4e>
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	2bff      	cmp	r3, #255	; 0xff
 8009364:	d111      	bne.n	800938a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800936a:	78ba      	ldrb	r2, [r7, #2]
 800936c:	429a      	cmp	r2, r3
 800936e:	d002      	beq.n	8009376 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009370:	78bb      	ldrb	r3, [r7, #2]
 8009372:	2bff      	cmp	r3, #255	; 0xff
 8009374:	d109      	bne.n	800938a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800937a:	787a      	ldrb	r2, [r7, #1]
 800937c:	429a      	cmp	r2, r3
 800937e:	d002      	beq.n	8009386 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009380:	787b      	ldrb	r3, [r7, #1]
 8009382:	2bff      	cmp	r3, #255	; 0xff
 8009384:	d101      	bne.n	800938a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	e006      	b.n	8009398 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	3301      	adds	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d9d6      	bls.n	8009344 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009396:	23ff      	movs	r3, #255	; 0xff
}
 8009398:	4618      	mov	r0, r3
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fd13 	bl	800add8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80093b2:	2101      	movs	r1, #1
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 fe2c 	bl	800b012 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af04      	add	r7, sp, #16
 80093ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093cc:	2302      	movs	r3, #2
 80093ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d102      	bne.n	80093e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2203      	movs	r2, #3
 80093e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b0b      	cmp	r3, #11
 80093ee:	f200 81be 	bhi.w	800976e <USBH_Process+0x3aa>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <USBH_Process+0x34>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009429 	.word	0x08009429
 80093fc:	0800945b 	.word	0x0800945b
 8009400:	080094c3 	.word	0x080094c3
 8009404:	08009709 	.word	0x08009709
 8009408:	0800976f 	.word	0x0800976f
 800940c:	08009567 	.word	0x08009567
 8009410:	080096af 	.word	0x080096af
 8009414:	0800959d 	.word	0x0800959d
 8009418:	080095bd 	.word	0x080095bd
 800941c:	080095dd 	.word	0x080095dd
 8009420:	08009621 	.word	0x08009621
 8009424:	080096f1 	.word	0x080096f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 819e 	beq.w	8009772 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800943c:	20c8      	movs	r0, #200	; 0xc8
 800943e:	f001 fe32 	bl	800b0a6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fd25 	bl	800ae92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009458:	e18b      	b.n	8009772 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009460:	2b01      	cmp	r3, #1
 8009462:	d107      	bne.n	8009474 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009472:	e18d      	b.n	8009790 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800947a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800947e:	d914      	bls.n	80094aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009486:	3301      	adds	r3, #1
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009496:	2b03      	cmp	r3, #3
 8009498:	d903      	bls.n	80094a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	220d      	movs	r2, #13
 800949e:	701a      	strb	r2, [r3, #0]
      break;
 80094a0:	e176      	b.n	8009790 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
      break;
 80094a8:	e172      	b.n	8009790 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094b0:	f103 020a 	add.w	r2, r3, #10
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094ba:	200a      	movs	r0, #10
 80094bc:	f001 fdf3 	bl	800b0a6 <USBH_Delay>
      break;
 80094c0:	e166      	b.n	8009790 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094d2:	2104      	movs	r1, #4
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094d8:	2064      	movs	r0, #100	; 0x64
 80094da:	f001 fde4 	bl	800b0a6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 fcb0 	bl	800ae44 <USBH_LL_GetSpeed>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2205      	movs	r2, #5
 80094f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 faab 	bl	800aa52 <USBH_AllocPipe>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009504:	2180      	movs	r1, #128	; 0x80
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 faa3 	bl	800aa52 <USBH_AllocPipe>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7919      	ldrb	r1, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009528:	b292      	uxth	r2, r2
 800952a:	9202      	str	r2, [sp, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4603      	mov	r3, r0
 8009534:	2280      	movs	r2, #128	; 0x80
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fa5c 	bl	800a9f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	7959      	ldrb	r1, [r3, #5]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009550:	b292      	uxth	r2, r2
 8009552:	9202      	str	r2, [sp, #8]
 8009554:	2200      	movs	r2, #0
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4603      	mov	r3, r0
 800955c:	2200      	movs	r2, #0
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fa48 	bl	800a9f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009564:	e114      	b.n	8009790 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f918 	bl	800979c <USBH_HandleEnum>
 800956c:	4603      	mov	r3, r0
 800956e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	f040 80fe 	bne.w	8009776 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009588:	2b01      	cmp	r3, #1
 800958a:	d103      	bne.n	8009594 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2208      	movs	r2, #8
 8009590:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009592:	e0f0      	b.n	8009776 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2207      	movs	r2, #7
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e0ec      	b.n	8009776 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80e9 	beq.w	800977a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ae:	2101      	movs	r1, #1
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2208      	movs	r2, #8
 80095b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80095ba:	e0de      	b.n	800977a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fc3f 	bl	8009e4a <USBH_SetCfg>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80d5 	bne.w	800977e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2209      	movs	r2, #9
 80095d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095da:	e0d0      	b.n	800977e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d016      	beq.n	8009618 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80095ea:	2101      	movs	r1, #1
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fc4f 	bl	8009e90 <USBH_SetFeature>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d103      	bne.n	8009606 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	220a      	movs	r2, #10
 8009602:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009604:	e0bd      	b.n	8009782 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b03      	cmp	r3, #3
 800960c:	f040 80b9 	bne.w	8009782 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	220a      	movs	r2, #10
 8009614:	701a      	strb	r2, [r3, #0]
      break;
 8009616:	e0b4      	b.n	8009782 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	220a      	movs	r2, #10
 800961c:	701a      	strb	r2, [r3, #0]
      break;
 800961e:	e0b0      	b.n	8009782 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 80ad 	beq.w	8009786 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
 8009638:	e016      	b.n	8009668 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	32de      	adds	r2, #222	; 0xde
 8009640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009644:	791a      	ldrb	r2, [r3, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800964c:	429a      	cmp	r2, r3
 800964e:	d108      	bne.n	8009662 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009650:	7bfa      	ldrb	r2, [r7, #15]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	32de      	adds	r2, #222	; 0xde
 8009656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009660:	e005      	b.n	800966e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	3301      	adds	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0e5      	beq.n	800963a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d016      	beq.n	80096a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d109      	bne.n	800969e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2206      	movs	r2, #6
 800968e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009696:	2103      	movs	r1, #3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800969c:	e073      	b.n	8009786 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	220d      	movs	r2, #13
 80096a2:	701a      	strb	r2, [r3, #0]
      break;
 80096a4:	e06f      	b.n	8009786 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	220d      	movs	r2, #13
 80096aa:	701a      	strb	r2, [r3, #0]
      break;
 80096ac:	e06b      	b.n	8009786 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d017      	beq.n	80096e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	220b      	movs	r2, #11
 80096d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096d6:	e058      	b.n	800978a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d154      	bne.n	800978a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220d      	movs	r2, #13
 80096e4:	701a      	strb	r2, [r3, #0]
      break;
 80096e6:	e050      	b.n	800978a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	220d      	movs	r2, #13
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	e04c      	b.n	800978a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d049      	beq.n	800978e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
      }
      break;
 8009706:	e042      	b.n	800978e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fd48 	bl	80091a6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009744:	2105      	movs	r1, #5
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d107      	bne.n	8009766 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fe20 	bl	80093a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009764:	e014      	b.n	8009790 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fb36 	bl	800add8 <USBH_LL_Start>
      break;
 800976c:	e010      	b.n	8009790 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800976e:	bf00      	nop
 8009770:	e00e      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 8009772:	bf00      	nop
 8009774:	e00c      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 8009776:	bf00      	nop
 8009778:	e00a      	b.n	8009790 <USBH_Process+0x3cc>
    break;
 800977a:	bf00      	nop
 800977c:	e008      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 800977e:	bf00      	nop
 8009780:	e006      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 8009782:	bf00      	nop
 8009784:	e004      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 8009786:	bf00      	nop
 8009788:	e002      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <USBH_Process+0x3cc>
      break;
 800978e:	bf00      	nop
  }
  return USBH_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop

0800979c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af04      	add	r7, sp, #16
 80097a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097a4:	2301      	movs	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	2b07      	cmp	r3, #7
 80097b2:	f200 81c1 	bhi.w	8009b38 <USBH_HandleEnum+0x39c>
 80097b6:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <USBH_HandleEnum+0x20>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097dd 	.word	0x080097dd
 80097c0:	0800989b 	.word	0x0800989b
 80097c4:	08009905 	.word	0x08009905
 80097c8:	08009993 	.word	0x08009993
 80097cc:	080099fd 	.word	0x080099fd
 80097d0:	08009a6d 	.word	0x08009a6d
 80097d4:	08009ab3 	.word	0x08009ab3
 80097d8:	08009af9 	.word	0x08009af9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097dc:	2108      	movs	r1, #8
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa50 	bl	8009c84 <USBH_Get_DevDesc>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d130      	bne.n	8009850 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7919      	ldrb	r1, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009812:	b292      	uxth	r2, r2
 8009814:	9202      	str	r2, [sp, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	9201      	str	r2, [sp, #4]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	4603      	mov	r3, r0
 800981e:	2280      	movs	r2, #128	; 0x80
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 f8e7 	bl	800a9f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7959      	ldrb	r1, [r3, #5]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800983a:	b292      	uxth	r2, r2
 800983c:	9202      	str	r2, [sp, #8]
 800983e:	2200      	movs	r2, #0
 8009840:	9201      	str	r2, [sp, #4]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	2200      	movs	r2, #0
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 f8d3 	bl	800a9f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800984e:	e175      	b.n	8009b3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	2b03      	cmp	r3, #3
 8009854:	f040 8172 	bne.w	8009b3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800985e:	3301      	adds	r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800986e:	2b03      	cmp	r3, #3
 8009870:	d903      	bls.n	800987a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	220d      	movs	r2, #13
 8009876:	701a      	strb	r2, [r3, #0]
      break;
 8009878:	e160      	b.n	8009b3c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	795b      	ldrb	r3, [r3, #5]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 f907 	bl	800aa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	791b      	ldrb	r3, [r3, #4]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 f901 	bl	800aa94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
      break;
 8009898:	e150      	b.n	8009b3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800989a:	2112      	movs	r1, #18
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f9f1 	bl	8009c84 <USBH_Get_DevDesc>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098b2:	e145      	b.n	8009b40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	f040 8142 	bne.w	8009b40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098c2:	3301      	adds	r3, #1
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d903      	bls.n	80098de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	220d      	movs	r2, #13
 80098da:	701a      	strb	r2, [r3, #0]
      break;
 80098dc:	e130      	b.n	8009b40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	795b      	ldrb	r3, [r3, #5]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 f8d5 	bl	800aa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	791b      	ldrb	r3, [r3, #4]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 f8cf 	bl	800aa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
      break;
 8009902:	e11d      	b.n	8009b40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009904:	2101      	movs	r1, #1
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa7b 	bl	8009e02 <USBH_SetAddress>
 800990c:	4603      	mov	r3, r0
 800990e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d132      	bne.n	800997c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009916:	2002      	movs	r0, #2
 8009918:	f001 fbc5 	bl	800b0a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2203      	movs	r2, #3
 8009928:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7919      	ldrb	r1, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800993e:	b292      	uxth	r2, r2
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	2200      	movs	r2, #0
 8009944:	9201      	str	r2, [sp, #4]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	4603      	mov	r3, r0
 800994a:	2280      	movs	r2, #128	; 0x80
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f851 	bl	800a9f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	7959      	ldrb	r1, [r3, #5]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009966:	b292      	uxth	r2, r2
 8009968:	9202      	str	r2, [sp, #8]
 800996a:	2200      	movs	r2, #0
 800996c:	9201      	str	r2, [sp, #4]
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	4603      	mov	r3, r0
 8009972:	2200      	movs	r2, #0
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 f83d 	bl	800a9f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800997a:	e0e3      	b.n	8009b44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b03      	cmp	r3, #3
 8009980:	f040 80e0 	bne.w	8009b44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	220d      	movs	r2, #13
 8009988:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	705a      	strb	r2, [r3, #1]
      break;
 8009990:	e0d8      	b.n	8009b44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009992:	2109      	movs	r1, #9
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f9a1 	bl	8009cdc <USBH_Get_CfgDesc>
 800999a:	4603      	mov	r3, r0
 800999c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2204      	movs	r2, #4
 80099a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099aa:	e0cd      	b.n	8009b48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	f040 80ca 	bne.w	8009b48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ba:	3301      	adds	r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d903      	bls.n	80099d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	220d      	movs	r2, #13
 80099d2:	701a      	strb	r2, [r3, #0]
      break;
 80099d4:	e0b8      	b.n	8009b48 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	795b      	ldrb	r3, [r3, #5]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 f859 	bl	800aa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	791b      	ldrb	r3, [r3, #4]
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 f853 	bl	800aa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
      break;
 80099fa:	e0a5      	b.n	8009b48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f969 	bl	8009cdc <USBH_Get_CfgDesc>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d103      	bne.n	8009a1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2205      	movs	r2, #5
 8009a18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a1a:	e097      	b.n	8009b4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	f040 8094 	bne.w	8009b4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d903      	bls.n	8009a46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	220d      	movs	r2, #13
 8009a42:	701a      	strb	r2, [r3, #0]
      break;
 8009a44:	e082      	b.n	8009b4c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	795b      	ldrb	r3, [r3, #5]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f821 	bl	800aa94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	791b      	ldrb	r3, [r3, #4]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 f81b 	bl	800aa94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]
      break;
 8009a6a:	e06f      	b.n	8009b4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d019      	beq.n	8009aaa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a82:	23ff      	movs	r3, #255	; 0xff
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f953 	bl	8009d30 <USBH_Get_StringDesc>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d103      	bne.n	8009a9c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2206      	movs	r2, #6
 8009a98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a9a:	e059      	b.n	8009b50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d156      	bne.n	8009b50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2206      	movs	r2, #6
 8009aa6:	705a      	strb	r2, [r3, #1]
      break;
 8009aa8:	e052      	b.n	8009b50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2206      	movs	r2, #6
 8009aae:	705a      	strb	r2, [r3, #1]
      break;
 8009ab0:	e04e      	b.n	8009b50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d019      	beq.n	8009af0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ac8:	23ff      	movs	r3, #255	; 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f930 	bl	8009d30 <USBH_Get_StringDesc>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2207      	movs	r2, #7
 8009ade:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ae0:	e038      	b.n	8009b54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d135      	bne.n	8009b54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2207      	movs	r2, #7
 8009aec:	705a      	strb	r2, [r3, #1]
      break;
 8009aee:	e031      	b.n	8009b54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2207      	movs	r2, #7
 8009af4:	705a      	strb	r2, [r3, #1]
      break;
 8009af6:	e02d      	b.n	8009b54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d017      	beq.n	8009b32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b0e:	23ff      	movs	r3, #255	; 0xff
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f90d 	bl	8009d30 <USBH_Get_StringDesc>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b24:	e018      	b.n	8009b58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d115      	bne.n	8009b58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b30:	e012      	b.n	8009b58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]
      break;
 8009b36:	e00f      	b.n	8009b58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b38:	bf00      	nop
 8009b3a:	e00e      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e00c      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b40:	bf00      	nop
 8009b42:	e00a      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b44:	bf00      	nop
 8009b46:	e008      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b48:	bf00      	nop
 8009b4a:	e006      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e004      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b50:	bf00      	nop
 8009b52:	e002      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b54:	bf00      	nop
 8009b56:	e000      	b.n	8009b5a <USBH_HandleEnum+0x3be>
      break;
 8009b58:	bf00      	nop
  }
  return Status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f804 	bl	8009ba6 <USBH_HandleSof>
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b0b      	cmp	r3, #11
 8009bb6:	d10a      	bne.n	8009bce <USBH_HandleSof+0x28>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
  }
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009be6:	bf00      	nop
}
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c02:	bf00      	nop
}
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 f8d6 	bl	800ae0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	791b      	ldrb	r3, [r3, #4]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 ff13 	bl	800aa94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	795b      	ldrb	r3, [r3, #5]
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 ff0d 	bl	800aa94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009c90:	887b      	ldrh	r3, [r7, #2]
 8009c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c96:	d901      	bls.n	8009c9c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e01b      	b.n	8009cd4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ca2:	887b      	ldrh	r3, [r7, #2]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cac:	2100      	movs	r1, #0
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f872 	bl	8009d98 <USBH_GetDescriptor>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cc4:	887a      	ldrh	r2, [r7, #2]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f929 	bl	8009f20 <USBH_ParseDevDesc>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	331c      	adds	r3, #28
 8009cec:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009cee:	887b      	ldrh	r3, [r7, #2]
 8009cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf4:	d901      	bls.n	8009cfa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e016      	b.n	8009d28 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cfa:	887b      	ldrh	r3, [r7, #2]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d04:	2100      	movs	r1, #0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f846 	bl	8009d98 <USBH_GetDescriptor>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d107      	bne.n	8009d26 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009d16:	887b      	ldrh	r3, [r7, #2]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f9b3 	bl	800a088 <USBH_ParseCfgDesc>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	72fb      	strb	r3, [r7, #11]
 8009d40:	4613      	mov	r3, r2
 8009d42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4a:	d802      	bhi.n	8009d52 <USBH_Get_StringDesc+0x22>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e01c      	b.n	8009d90 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d5e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d66:	893b      	ldrh	r3, [r7, #8]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 f812 	bl	8009d98 <USBH_GetDescriptor>
 8009d74:	4603      	mov	r3, r0
 8009d76:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d107      	bne.n	8009d8e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d84:	893a      	ldrh	r2, [r7, #8]
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fb93 	bl	800a4b4 <USBH_ParseStringDesc>
  }

  return status;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	607b      	str	r3, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	72fb      	strb	r3, [r7, #11]
 8009da6:	4613      	mov	r3, r2
 8009da8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	789b      	ldrb	r3, [r3, #2]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d11c      	bne.n	8009dec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	893a      	ldrh	r2, [r7, #8]
 8009dc8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009dca:	893b      	ldrh	r3, [r7, #8]
 8009dcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dd4:	d104      	bne.n	8009de0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f240 4209 	movw	r2, #1033	; 0x409
 8009ddc:	829a      	strh	r2, [r3, #20]
 8009dde:	e002      	b.n	8009de6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8b3a      	ldrh	r2, [r7, #24]
 8009dea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009dec:	8b3b      	ldrh	r3, [r7, #24]
 8009dee:	461a      	mov	r2, r3
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 fbac 	bl	800a550 <USBH_CtlReq>
 8009df8:	4603      	mov	r3, r0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	789b      	ldrb	r3, [r3, #2]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d10f      	bne.n	8009e36 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2205      	movs	r2, #5
 8009e20:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fb88 	bl	800a550 <USBH_CtlReq>
 8009e40:	4603      	mov	r3, r0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	789b      	ldrb	r3, [r3, #2]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d10e      	bne.n	8009e7c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2209      	movs	r2, #9
 8009e68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	887a      	ldrh	r2, [r7, #2]
 8009e6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fb65 	bl	800a550 <USBH_CtlReq>
 8009e86:	4603      	mov	r3, r0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	789b      	ldrb	r3, [r3, #2]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d10f      	bne.n	8009ec4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2203      	movs	r2, #3
 8009eae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fb41 	bl	800a550 <USBH_CtlReq>
 8009ece:	4603      	mov	r3, r0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	789b      	ldrb	r3, [r3, #2]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d10f      	bne.n	8009f0c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb1d 	bl	800a550 <USBH_CtlReq>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009f34:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009f40:	2302      	movs	r3, #2
 8009f42:	e098      	b.n	800a076 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	785a      	ldrb	r2, [r3, #1]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	3302      	adds	r3, #2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	3303      	adds	r3, #3
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	791a      	ldrb	r2, [r3, #4]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	795a      	ldrb	r2, [r3, #5]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	799a      	ldrb	r2, [r3, #6]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	79da      	ldrb	r2, [r3, #7]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d11b      	bne.n	8009fdc <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	79db      	ldrb	r3, [r3, #7]
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	dc0f      	bgt.n	8009fcc <USBH_ParseDevDesc+0xac>
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	db0f      	blt.n	8009fd0 <USBH_ParseDevDesc+0xb0>
 8009fb0:	3b08      	subs	r3, #8
 8009fb2:	4a34      	ldr	r2, [pc, #208]	; (800a084 <USBH_ParseDevDesc+0x164>)
 8009fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf14      	ite	ne
 8009fc0:	2301      	movne	r3, #1
 8009fc2:	2300      	moveq	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <USBH_ParseDevDesc+0xb8>
 8009fca:	e001      	b.n	8009fd0 <USBH_ParseDevDesc+0xb0>
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d003      	beq.n	8009fd8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	71da      	strb	r2, [r3, #7]
        break;
 8009fd6:	e000      	b.n	8009fda <USBH_ParseDevDesc+0xba>
        break;
 8009fd8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009fda:	e00e      	b.n	8009ffa <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d107      	bne.n	8009ff6 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	79db      	ldrb	r3, [r3, #7]
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d005      	beq.n	8009ffa <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	71da      	strb	r2, [r3, #7]
 8009ff4:	e001      	b.n	8009ffa <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d939      	bls.n	800a074 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3308      	adds	r3, #8
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	b29a      	uxth	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	3309      	adds	r3, #9
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	330a      	adds	r3, #10
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	330b      	adds	r3, #11
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	330c      	adds	r3, #12
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	330d      	adds	r3, #13
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b29b      	uxth	r3, r3
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	7b9a      	ldrb	r2, [r3, #14]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	7bda      	ldrb	r2, [r3, #15]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	7c1a      	ldrb	r2, [r3, #16]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	7c5a      	ldrb	r2, [r3, #17]
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	01000101 	.word	0x01000101

0800a088 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a09c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e0db      	b.n	800a272 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	785a      	ldrb	r2, [r3, #1]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	3303      	adds	r3, #3
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ea:	bf28      	it	cs
 800a0ec:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	791a      	ldrb	r2, [r3, #4]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	795a      	ldrb	r2, [r3, #5]
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	799a      	ldrb	r2, [r3, #6]
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	79da      	ldrb	r2, [r3, #7]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	7a1a      	ldrb	r2, [r3, #8]
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b09      	cmp	r3, #9
 800a124:	d002      	beq.n	800a12c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	2209      	movs	r2, #9
 800a12a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	2b09      	cmp	r3, #9
 800a130:	f240 809d 	bls.w	800a26e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800a134:	2309      	movs	r3, #9
 800a136:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a13c:	e081      	b.n	800a242 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a13e:	f107 0316 	add.w	r3, r7, #22
 800a142:	4619      	mov	r1, r3
 800a144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a146:	f000 f9e8 	bl	800a51a <USBH_GetNextDesc>
 800a14a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	2b04      	cmp	r3, #4
 800a152:	d176      	bne.n	800a242 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b09      	cmp	r3, #9
 800a15a:	d002      	beq.n	800a162 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	2209      	movs	r2, #9
 800a160:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a166:	221a      	movs	r2, #26
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	3308      	adds	r3, #8
 800a16e:	6a3a      	ldr	r2, [r7, #32]
 800a170:	4413      	add	r3, r2
 800a172:	3302      	adds	r3, #2
 800a174:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a178:	69f8      	ldr	r0, [r7, #28]
 800a17a:	f000 f87e 	bl	800a27a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a184:	2300      	movs	r3, #0
 800a186:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a188:	e043      	b.n	800a212 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a18a:	f107 0316 	add.w	r3, r7, #22
 800a18e:	4619      	mov	r1, r3
 800a190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a192:	f000 f9c2 	bl	800a51a <USBH_GetNextDesc>
 800a196:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	d138      	bne.n	800a212 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	795b      	ldrb	r3, [r3, #5]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d113      	bne.n	800a1d0 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d003      	beq.n	800a1b8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	799b      	ldrb	r3, [r3, #6]
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d10b      	bne.n	800a1d0 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	79db      	ldrb	r3, [r3, #7]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <USBH_ParseCfgDesc+0x150>
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b09      	cmp	r3, #9
 800a1c6:	d007      	beq.n	800a1d8 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	2209      	movs	r2, #9
 800a1cc:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a1ce:	e003      	b.n	800a1d8 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2207      	movs	r2, #7
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	e000      	b.n	800a1da <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a1d8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	00d2      	lsls	r2, r2, #3
 800a1e6:	211a      	movs	r1, #26
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	6a3a      	ldr	r2, [r7, #32]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fa:	69b9      	ldr	r1, [r7, #24]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f870 	bl	800a2e2 <USBH_ParseEPDesc>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a20c:	3301      	adds	r3, #1
 800a20e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	791b      	ldrb	r3, [r3, #4]
 800a216:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d204      	bcs.n	800a228 <USBH_ParseCfgDesc+0x1a0>
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	885a      	ldrh	r2, [r3, #2]
 800a222:	8afb      	ldrh	r3, [r7, #22]
 800a224:	429a      	cmp	r2, r3
 800a226:	d8b0      	bhi.n	800a18a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a230:	429a      	cmp	r2, r3
 800a232:	d201      	bcs.n	800a238 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800a234:	2303      	movs	r3, #3
 800a236:	e01c      	b.n	800a272 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800a238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a23c:	3301      	adds	r3, #1
 800a23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a246:	2b01      	cmp	r3, #1
 800a248:	d805      	bhi.n	800a256 <USBH_ParseCfgDesc+0x1ce>
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	885a      	ldrh	r2, [r3, #2]
 800a24e:	8afb      	ldrh	r3, [r7, #22]
 800a250:	429a      	cmp	r2, r3
 800a252:	f63f af74 	bhi.w	800a13e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	bf28      	it	cs
 800a25e:	2302      	movcs	r3, #2
 800a260:	b2db      	uxtb	r3, r3
 800a262:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a266:	429a      	cmp	r2, r3
 800a268:	d201      	bcs.n	800a26e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e001      	b.n	800a272 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800a26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a272:	4618      	mov	r0, r3
 800a274:	3730      	adds	r7, #48	; 0x30
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	785a      	ldrb	r2, [r3, #1]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	789a      	ldrb	r2, [r3, #2]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	78da      	ldrb	r2, [r3, #3]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	bf28      	it	cs
 800a2ae:	2302      	movcs	r3, #2
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	795a      	ldrb	r2, [r3, #5]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	799a      	ldrb	r2, [r3, #6]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	79da      	ldrb	r2, [r3, #7]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	7a1a      	ldrb	r2, [r3, #8]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	721a      	strb	r2, [r3, #8]
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b087      	sub	sp, #28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	785a      	ldrb	r2, [r3, #1]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	789a      	ldrb	r2, [r3, #2]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	78da      	ldrb	r2, [r3, #3]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3304      	adds	r3, #4
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	b29a      	uxth	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3305      	adds	r3, #5
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	021b      	lsls	r3, r3, #8
 800a324:	b29b      	uxth	r3, r3
 800a326:	4313      	orrs	r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	799a      	ldrb	r2, [r3, #6]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	889b      	ldrh	r3, [r3, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d009      	beq.n	800a352 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a346:	d804      	bhi.n	800a352 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a350:	d901      	bls.n	800a356 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800a352:	2303      	movs	r3, #3
 800a354:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d136      	bne.n	800a3ce <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	78db      	ldrb	r3, [r3, #3]
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d108      	bne.n	800a37e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	889b      	ldrh	r3, [r3, #4]
 800a370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a374:	f240 8097 	bls.w	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a378:	2303      	movs	r3, #3
 800a37a:	75fb      	strb	r3, [r7, #23]
 800a37c:	e093      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	78db      	ldrb	r3, [r3, #3]
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d107      	bne.n	800a39a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	889b      	ldrh	r3, [r3, #4]
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	f240 8089 	bls.w	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a394:	2303      	movs	r3, #3
 800a396:	75fb      	strb	r3, [r7, #23]
 800a398:	e085      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	78db      	ldrb	r3, [r3, #3]
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d005      	beq.n	800a3b2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	78db      	ldrb	r3, [r3, #3]
 800a3aa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d10a      	bne.n	800a3c8 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	799b      	ldrb	r3, [r3, #6]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <USBH_ParseEPDesc+0xe0>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	799b      	ldrb	r3, [r3, #6]
 800a3be:	2b10      	cmp	r3, #16
 800a3c0:	d970      	bls.n	800a4a4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a3c6:	e06d      	b.n	800a4a4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	75fb      	strb	r3, [r7, #23]
 800a3cc:	e06b      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d13c      	bne.n	800a452 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	78db      	ldrb	r3, [r3, #3]
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d005      	beq.n	800a3f0 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	78db      	ldrb	r3, [r3, #3]
 800a3e8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	889b      	ldrh	r3, [r3, #4]
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	d956      	bls.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a3fc:	e053      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	78db      	ldrb	r3, [r3, #3]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b01      	cmp	r3, #1
 800a408:	d10e      	bne.n	800a428 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	799b      	ldrb	r3, [r3, #6]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a416:	2b10      	cmp	r3, #16
 800a418:	d803      	bhi.n	800a422 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d941      	bls.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a422:	2303      	movs	r3, #3
 800a424:	75fb      	strb	r3, [r7, #23]
 800a426:	e03e      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	78db      	ldrb	r3, [r3, #3]
 800a42c:	f003 0303 	and.w	r3, r3, #3
 800a430:	2b03      	cmp	r3, #3
 800a432:	d10b      	bne.n	800a44c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	799b      	ldrb	r3, [r3, #6]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d004      	beq.n	800a446 <USBH_ParseEPDesc+0x164>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	889b      	ldrh	r3, [r3, #4]
 800a440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a444:	d32f      	bcc.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a446:	2303      	movs	r3, #3
 800a448:	75fb      	strb	r3, [r7, #23]
 800a44a:	e02c      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a44c:	2303      	movs	r3, #3
 800a44e:	75fb      	strb	r3, [r7, #23]
 800a450:	e029      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d120      	bne.n	800a49e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	78db      	ldrb	r3, [r3, #3]
 800a460:	f003 0303 	and.w	r3, r3, #3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	889b      	ldrh	r3, [r3, #4]
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d01a      	beq.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a470:	2303      	movs	r3, #3
 800a472:	75fb      	strb	r3, [r7, #23]
 800a474:	e017      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	78db      	ldrb	r3, [r3, #3]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d10a      	bne.n	800a498 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	799b      	ldrb	r3, [r3, #6]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <USBH_ParseEPDesc+0x1b0>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	889b      	ldrh	r3, [r3, #4]
 800a48e:	2b08      	cmp	r3, #8
 800a490:	d909      	bls.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a492:	2303      	movs	r3, #3
 800a494:	75fb      	strb	r3, [r7, #23]
 800a496:	e006      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a498:	2303      	movs	r3, #3
 800a49a:	75fb      	strb	r3, [r7, #23]
 800a49c:	e003      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	75fb      	strb	r3, [r7, #23]
 800a4a2:	e000      	b.n	800a4a6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4a4:	bf00      	nop
  }

  return status;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d120      	bne.n	800a50e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	1e9a      	subs	r2, r3, #2
 800a4d2:	88fb      	ldrh	r3, [r7, #6]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bf28      	it	cs
 800a4d8:	4613      	movcs	r3, r2
 800a4da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3302      	adds	r3, #2
 800a4e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	82fb      	strh	r3, [r7, #22]
 800a4e6:	e00b      	b.n	800a500 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a4e8:	8afb      	ldrh	r3, [r7, #22]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	781a      	ldrb	r2, [r3, #0]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a4fa:	8afb      	ldrh	r3, [r7, #22]
 800a4fc:	3302      	adds	r3, #2
 800a4fe:	82fb      	strh	r3, [r7, #22]
 800a500:	8afa      	ldrh	r2, [r7, #22]
 800a502:	8abb      	ldrh	r3, [r7, #20]
 800a504:	429a      	cmp	r2, r3
 800a506:	d3ef      	bcc.n	800a4e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
  }
}
 800a50e:	bf00      	nop
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	881a      	ldrh	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4413      	add	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a55e:	2301      	movs	r3, #1
 800a560:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	789b      	ldrb	r3, [r3, #2]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d002      	beq.n	800a570 <USBH_CtlReq+0x20>
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d00f      	beq.n	800a58e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a56e:	e027      	b.n	800a5c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	88fa      	ldrh	r2, [r7, #6]
 800a57a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2202      	movs	r2, #2
 800a586:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a588:	2301      	movs	r3, #1
 800a58a:	75fb      	strb	r3, [r7, #23]
      break;
 800a58c:	e018      	b.n	800a5c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f81c 	bl	800a5cc <USBH_HandleControl>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <USBH_CtlReq+0x54>
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
 800a5a0:	2b03      	cmp	r3, #3
 800a5a2:	d106      	bne.n	800a5b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	761a      	strb	r2, [r3, #24]
      break;
 800a5b0:	e005      	b.n	800a5be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d102      	bne.n	800a5be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	709a      	strb	r2, [r3, #2]
      break;
 800a5be:	bf00      	nop
  }
  return status;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7e1b      	ldrb	r3, [r3, #24]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	2b0a      	cmp	r3, #10
 800a5e4:	f200 8156 	bhi.w	800a894 <USBH_HandleControl+0x2c8>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBH_HandleControl+0x24>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a61d 	.word	0x0800a61d
 800a5f4:	0800a637 	.word	0x0800a637
 800a5f8:	0800a6a1 	.word	0x0800a6a1
 800a5fc:	0800a6c7 	.word	0x0800a6c7
 800a600:	0800a6ff 	.word	0x0800a6ff
 800a604:	0800a729 	.word	0x0800a729
 800a608:	0800a77b 	.word	0x0800a77b
 800a60c:	0800a79d 	.word	0x0800a79d
 800a610:	0800a7d9 	.word	0x0800a7d9
 800a614:	0800a7ff 	.word	0x0800a7ff
 800a618:	0800a83d 	.word	0x0800a83d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f103 0110 	add.w	r1, r3, #16
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	795b      	ldrb	r3, [r3, #5]
 800a626:	461a      	mov	r2, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f943 	bl	800a8b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2202      	movs	r2, #2
 800a632:	761a      	strb	r2, [r3, #24]
      break;
 800a634:	e139      	b.n	800a8aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	795b      	ldrb	r3, [r3, #5]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fcd5 	bl	800afec <USBH_LL_GetURBState>
 800a642:	4603      	mov	r3, r0
 800a644:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d11e      	bne.n	800a68a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7c1b      	ldrb	r3, [r3, #16]
 800a650:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a654:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8adb      	ldrh	r3, [r3, #22]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a65e:	7b7b      	ldrb	r3, [r7, #13]
 800a660:	2b80      	cmp	r3, #128	; 0x80
 800a662:	d103      	bne.n	800a66c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2203      	movs	r2, #3
 800a668:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a66a:	e115      	b.n	800a898 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2205      	movs	r2, #5
 800a670:	761a      	strb	r2, [r3, #24]
      break;
 800a672:	e111      	b.n	800a898 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a674:	7b7b      	ldrb	r3, [r7, #13]
 800a676:	2b80      	cmp	r3, #128	; 0x80
 800a678:	d103      	bne.n	800a682 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2209      	movs	r2, #9
 800a67e:	761a      	strb	r2, [r3, #24]
      break;
 800a680:	e10a      	b.n	800a898 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2207      	movs	r2, #7
 800a686:	761a      	strb	r2, [r3, #24]
      break;
 800a688:	e106      	b.n	800a898 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d003      	beq.n	800a698 <USBH_HandleControl+0xcc>
 800a690:	7bbb      	ldrb	r3, [r7, #14]
 800a692:	2b02      	cmp	r3, #2
 800a694:	f040 8100 	bne.w	800a898 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	220b      	movs	r2, #11
 800a69c:	761a      	strb	r2, [r3, #24]
      break;
 800a69e:	e0fb      	b.n	800a898 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6899      	ldr	r1, [r3, #8]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	899a      	ldrh	r2, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	791b      	ldrb	r3, [r3, #4]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f93a 	bl	800a932 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	761a      	strb	r2, [r3, #24]
      break;
 800a6c4:	e0f1      	b.n	800a8aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	791b      	ldrb	r3, [r3, #4]
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fc8d 	bl	800afec <USBH_LL_GetURBState>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d102      	bne.n	800a6e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2209      	movs	r2, #9
 800a6e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	d102      	bne.n	800a6ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6ec:	e0d6      	b.n	800a89c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	f040 80d3 	bne.w	800a89c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	220b      	movs	r2, #11
 800a6fa:	761a      	strb	r2, [r3, #24]
      break;
 800a6fc:	e0ce      	b.n	800a89c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6899      	ldr	r1, [r3, #8]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	899a      	ldrh	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	795b      	ldrb	r3, [r3, #5]
 800a70a:	2001      	movs	r0, #1
 800a70c:	9000      	str	r0, [sp, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f8ea 	bl	800a8e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2206      	movs	r2, #6
 800a724:	761a      	strb	r2, [r3, #24]
      break;
 800a726:	e0c0      	b.n	800a8aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	795b      	ldrb	r3, [r3, #5]
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fc5c 	bl	800afec <USBH_LL_GetURBState>
 800a734:	4603      	mov	r3, r0
 800a736:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d103      	bne.n	800a746 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2207      	movs	r2, #7
 800a742:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a744:	e0ac      	b.n	800a8a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b05      	cmp	r3, #5
 800a74a:	d105      	bne.n	800a758 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	220c      	movs	r2, #12
 800a750:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a752:	2303      	movs	r3, #3
 800a754:	73fb      	strb	r3, [r7, #15]
      break;
 800a756:	e0a3      	b.n	800a8a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d103      	bne.n	800a766 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2205      	movs	r2, #5
 800a762:	761a      	strb	r2, [r3, #24]
      break;
 800a764:	e09c      	b.n	800a8a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	2b04      	cmp	r3, #4
 800a76a:	f040 8099 	bne.w	800a8a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	220b      	movs	r2, #11
 800a772:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a774:	2302      	movs	r3, #2
 800a776:	73fb      	strb	r3, [r7, #15]
      break;
 800a778:	e092      	b.n	800a8a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	2100      	movs	r1, #0
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f8d5 	bl	800a932 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a78e:	b29a      	uxth	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2208      	movs	r2, #8
 800a798:	761a      	strb	r2, [r3, #24]

      break;
 800a79a:	e086      	b.n	800a8aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	791b      	ldrb	r3, [r3, #4]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fc22 	bl	800afec <USBH_LL_GetURBState>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d105      	bne.n	800a7be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	220d      	movs	r2, #13
 800a7b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7bc:	e072      	b.n	800a8a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d103      	bne.n	800a7cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	220b      	movs	r2, #11
 800a7c8:	761a      	strb	r2, [r3, #24]
      break;
 800a7ca:	e06b      	b.n	800a8a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	d168      	bne.n	800a8a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d6:	e065      	b.n	800a8a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	795b      	ldrb	r3, [r3, #5]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	9200      	str	r2, [sp, #0]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f87f 	bl	800a8e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	761a      	strb	r2, [r3, #24]
      break;
 800a7fc:	e055      	b.n	800a8aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	795b      	ldrb	r3, [r3, #5]
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fbf1 	bl	800afec <USBH_LL_GetURBState>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d105      	bne.n	800a820 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	220d      	movs	r2, #13
 800a81c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a81e:	e043      	b.n	800a8a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d103      	bne.n	800a82e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2209      	movs	r2, #9
 800a82a:	761a      	strb	r2, [r3, #24]
      break;
 800a82c:	e03c      	b.n	800a8a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	2b04      	cmp	r3, #4
 800a832:	d139      	bne.n	800a8a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	220b      	movs	r2, #11
 800a838:	761a      	strb	r2, [r3, #24]
      break;
 800a83a:	e035      	b.n	800a8a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7e5b      	ldrb	r3, [r3, #25]
 800a840:	3301      	adds	r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	765a      	strb	r2, [r3, #25]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7e5b      	ldrb	r3, [r3, #25]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d806      	bhi.n	800a85e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a85c:	e025      	b.n	800a8aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a864:	2106      	movs	r1, #6
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	795b      	ldrb	r3, [r3, #5]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f90c 	bl	800aa94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f906 	bl	800aa94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a88e:	2302      	movs	r3, #2
 800a890:	73fb      	strb	r3, [r7, #15]
      break;
 800a892:	e00a      	b.n	800a8aa <USBH_HandleControl+0x2de>

    default:
      break;
 800a894:	bf00      	nop
 800a896:	e008      	b.n	800a8aa <USBH_HandleControl+0x2de>
      break;
 800a898:	bf00      	nop
 800a89a:	e006      	b.n	800a8aa <USBH_HandleControl+0x2de>
      break;
 800a89c:	bf00      	nop
 800a89e:	e004      	b.n	800a8aa <USBH_HandleControl+0x2de>
      break;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <USBH_HandleControl+0x2de>
      break;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <USBH_HandleControl+0x2de>
      break;
 800a8a8:	bf00      	nop
  }

  return status;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af04      	add	r7, sp, #16
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8c2:	79f9      	ldrb	r1, [r7, #7]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9303      	str	r3, [sp, #12]
 800a8c8:	2308      	movs	r3, #8
 800a8ca:	9302      	str	r3, [sp, #8]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 fb56 	bl	800af8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af04      	add	r7, sp, #16
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	80fb      	strh	r3, [r7, #6]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a90c:	7979      	ldrb	r1, [r7, #5]
 800a90e:	7e3b      	ldrb	r3, [r7, #24]
 800a910:	9303      	str	r3, [sp, #12]
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	9302      	str	r3, [sp, #8]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	2301      	movs	r3, #1
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	2300      	movs	r3, #0
 800a920:	2200      	movs	r2, #0
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 fb31 	bl	800af8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b088      	sub	sp, #32
 800a936:	af04      	add	r7, sp, #16
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	4611      	mov	r1, r2
 800a93e:	461a      	mov	r2, r3
 800a940:	460b      	mov	r3, r1
 800a942:	80fb      	strh	r3, [r7, #6]
 800a944:	4613      	mov	r3, r2
 800a946:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a948:	7979      	ldrb	r1, [r7, #5]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	9302      	str	r3, [sp, #8]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	2301      	movs	r3, #1
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	2300      	movs	r3, #0
 800a95c:	2201      	movs	r2, #1
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 fb13 	bl	800af8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a964:	2300      	movs	r3, #0

}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b088      	sub	sp, #32
 800a972:	af04      	add	r7, sp, #16
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4611      	mov	r1, r2
 800a97a:	461a      	mov	r2, r3
 800a97c:	460b      	mov	r3, r1
 800a97e:	80fb      	strh	r3, [r7, #6]
 800a980:	4613      	mov	r3, r2
 800a982:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a992:	7979      	ldrb	r1, [r7, #5]
 800a994:	7e3b      	ldrb	r3, [r7, #24]
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	88fb      	ldrh	r3, [r7, #6]
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 faee 	bl	800af8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af04      	add	r7, sp, #16
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	80fb      	strh	r3, [r7, #6]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ce:	7979      	ldrb	r1, [r7, #5]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	2301      	movs	r3, #1
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 fad0 	bl	800af8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af04      	add	r7, sp, #16
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	461a      	mov	r2, r3
 800aa02:	4603      	mov	r3, r0
 800aa04:	70fb      	strb	r3, [r7, #3]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70bb      	strb	r3, [r7, #2]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa0e:	7878      	ldrb	r0, [r7, #1]
 800aa10:	78ba      	ldrb	r2, [r7, #2]
 800aa12:	78f9      	ldrb	r1, [r7, #3]
 800aa14:	8b3b      	ldrh	r3, [r7, #24]
 800aa16:	9302      	str	r3, [sp, #8]
 800aa18:	7d3b      	ldrb	r3, [r7, #20]
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	7c3b      	ldrb	r3, [r7, #16]
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	4603      	mov	r3, r0
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fa63 	bl	800aeee <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa82 	bl	800af4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f836 	bl	800aad0 <USBH_GetFreePipe>
 800aa64:	4603      	mov	r3, r0
 800aa66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00a      	beq.n	800aa88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aa72:	78fa      	ldrb	r2, [r7, #3]
 800aa74:	89fb      	ldrh	r3, [r7, #14]
 800aa76:	f003 030f 	and.w	r3, r3, #15
 800aa7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	33e0      	adds	r3, #224	; 0xe0
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aa88:	89fb      	ldrh	r3, [r7, #14]
 800aa8a:	b2db      	uxtb	r3, r3
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	2b0f      	cmp	r3, #15
 800aaa4:	d80d      	bhi.n	800aac2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	33e0      	adds	r3, #224	; 0xe0
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	33e0      	adds	r3, #224	; 0xe0
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
 800aae0:	e00f      	b.n	800ab02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	33e0      	adds	r3, #224	; 0xe0
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d102      	bne.n	800aafc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	e007      	b.n	800ab0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	3301      	adds	r3, #1
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b0f      	cmp	r3, #15
 800ab06:	d9ec      	bls.n	800aae2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	490e      	ldr	r1, [pc, #56]	; (800ab58 <MX_USB_HOST_Init+0x40>)
 800ab20:	480e      	ldr	r0, [pc, #56]	; (800ab5c <MX_USB_HOST_Init+0x44>)
 800ab22:	f7fe fb06 	bl	8009132 <USBH_Init>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ab2c:	f7f7 f9a2 	bl	8001e74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ab30:	490b      	ldr	r1, [pc, #44]	; (800ab60 <MX_USB_HOST_Init+0x48>)
 800ab32:	480a      	ldr	r0, [pc, #40]	; (800ab5c <MX_USB_HOST_Init+0x44>)
 800ab34:	f7fe fbaa 	bl	800928c <USBH_RegisterClass>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ab3e:	f7f7 f999 	bl	8001e74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ab42:	4806      	ldr	r0, [pc, #24]	; (800ab5c <MX_USB_HOST_Init+0x44>)
 800ab44:	f7fe fc2e 	bl	80093a4 <USBH_Start>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ab4e:	f7f7 f991 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ab52:	bf00      	nop
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	0800ab79 	.word	0x0800ab79
 800ab5c:	2000042c 	.word	0x2000042c
 800ab60:	2000000c 	.word	0x2000000c

0800ab64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ab68:	4802      	ldr	r0, [pc, #8]	; (800ab74 <MX_USB_HOST_Process+0x10>)
 800ab6a:	f7fe fc2b 	bl	80093c4 <USBH_Process>
}
 800ab6e:	bf00      	nop
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000042c 	.word	0x2000042c

0800ab78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d82a      	bhi.n	800abe2 <USBH_UserProcess+0x6a>
 800ab8c:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <USBH_UserProcess+0x1c>)
 800ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab92:	bf00      	nop
 800ab94:	0800abe3 	.word	0x0800abe3
 800ab98:	0800abbd 	.word	0x0800abbd
 800ab9c:	0800abe3 	.word	0x0800abe3
 800aba0:	0800abd1 	.word	0x0800abd1
 800aba4:	0800aba9 	.word	0x0800aba9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aba8:	4b10      	ldr	r3, [pc, #64]	; (800abec <USBH_UserProcess+0x74>)
 800abaa:	2203      	movs	r2, #3
 800abac:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800abae:	2200      	movs	r2, #0
 800abb0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800abb4:	480e      	ldr	r0, [pc, #56]	; (800abf0 <USBH_UserProcess+0x78>)
 800abb6:	f7f9 f8bf 	bl	8003d38 <HAL_GPIO_WritePin>
  break;
 800abba:	e013      	b.n	800abe4 <USBH_UserProcess+0x6c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800abbc:	4b0b      	ldr	r3, [pc, #44]	; (800abec <USBH_UserProcess+0x74>)
 800abbe:	2202      	movs	r2, #2
 800abc0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800abc2:	2201      	movs	r2, #1
 800abc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abc8:	4809      	ldr	r0, [pc, #36]	; (800abf0 <USBH_UserProcess+0x78>)
 800abca:	f7f9 f8b5 	bl	8003d38 <HAL_GPIO_WritePin>
  break;
 800abce:	e009      	b.n	800abe4 <USBH_UserProcess+0x6c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <USBH_UserProcess+0x74>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800abd6:	2201      	movs	r2, #1
 800abd8:	2180      	movs	r1, #128	; 0x80
 800abda:	4805      	ldr	r0, [pc, #20]	; (800abf0 <USBH_UserProcess+0x78>)
 800abdc:	f7f9 f8ac 	bl	8003d38 <HAL_GPIO_WritePin>
  break;
 800abe0:	e000      	b.n	800abe4 <USBH_UserProcess+0x6c>

  default:
  break;
 800abe2:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20000804 	.word	0x20000804
 800abf0:	40020400 	.word	0x40020400

0800abf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abfc:	f107 0314 	add.w	r3, r7, #20
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	609a      	str	r2, [r3, #8]
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac14:	d147      	bne.n	800aca6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	4b25      	ldr	r3, [pc, #148]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	4a24      	ldr	r2, [pc, #144]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac20:	f043 0301 	orr.w	r3, r3, #1
 800ac24:	6313      	str	r3, [r2, #48]	; 0x30
 800ac26:	4b22      	ldr	r3, [pc, #136]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ac32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ac36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac40:	2303      	movs	r3, #3
 800ac42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac44:	230a      	movs	r3, #10
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4819      	ldr	r0, [pc, #100]	; (800acb4 <HAL_HCD_MspInit+0xc0>)
 800ac50:	f7f8 fec6 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ac54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ac62:	f107 0314 	add.w	r3, r7, #20
 800ac66:	4619      	mov	r1, r3
 800ac68:	4812      	ldr	r0, [pc, #72]	; (800acb4 <HAL_HCD_MspInit+0xc0>)
 800ac6a:	f7f8 feb9 	bl	80039e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	4a0f      	ldr	r2, [pc, #60]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	6353      	str	r3, [r2, #52]	; 0x34
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	4a0b      	ldr	r2, [pc, #44]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac88:	6453      	str	r3, [r2, #68]	; 0x44
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac96:	2200      	movs	r2, #0
 800ac98:	2100      	movs	r1, #0
 800ac9a:	2043      	movs	r0, #67	; 0x43
 800ac9c:	f7f8 faf9 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aca0:	2043      	movs	r0, #67	; 0x43
 800aca2:	f7f8 fb12 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aca6:	bf00      	nop
 800aca8:	3728      	adds	r7, #40	; 0x28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40023800 	.word	0x40023800
 800acb4:	40020000 	.word	0x40020000

0800acb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe ff5b 	bl	8009b82 <USBH_LL_IncTimer>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe ff93 	bl	8009c0e <USBH_LL_Connect>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe ff9c 	bl	8009c3c <USBH_LL_Disconnect>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe ff4d 	bl	8009bd6 <USBH_LL_PortEnabled>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe ff4d 	bl	8009bf2 <USBH_LL_PortDisabled>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d12a      	bne.n	800adc8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ad72:	4a18      	ldr	r2, [pc, #96]	; (800add4 <USBH_LL_Init+0x74>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a15      	ldr	r2, [pc, #84]	; (800add4 <USBH_LL_Init+0x74>)
 800ad7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <USBH_LL_Init+0x74>)
 800ad84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <USBH_LL_Init+0x74>)
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ad90:	4b10      	ldr	r3, [pc, #64]	; (800add4 <USBH_LL_Init+0x74>)
 800ad92:	2201      	movs	r2, #1
 800ad94:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <USBH_LL_Init+0x74>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ad9c:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <USBH_LL_Init+0x74>)
 800ad9e:	2202      	movs	r2, #2
 800ada0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ada2:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <USBH_LL_Init+0x74>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ada8:	480a      	ldr	r0, [pc, #40]	; (800add4 <USBH_LL_Init+0x74>)
 800adaa:	f7f8 fff8 	bl	8003d9e <HAL_HCD_Init>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800adb4:	f7f7 f85e 	bl	8001e74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800adb8:	4806      	ldr	r0, [pc, #24]	; (800add4 <USBH_LL_Init+0x74>)
 800adba:	f7f9 fc59 	bl	8004670 <HAL_HCD_GetCurrentFrame>
 800adbe:	4603      	mov	r3, r0
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fe fece 	bl	8009b64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000808 	.word	0x20000808

0800add8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adee:	4618      	mov	r0, r3
 800adf0:	f7f9 fbc6 	bl	8004580 <HAL_HCD_Start>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 f95e 	bl	800b0bc <USBH_Get_USB_Status>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7f9 fbce 	bl	80045c6 <HAL_HCD_Stop>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f943 	bl	800b0bc <USBH_Get_USB_Status>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f9 fc18 	bl	800468c <HAL_HCD_GetCurrentSpeed>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d00c      	beq.n	800ae7c <USBH_LL_GetSpeed+0x38>
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d80d      	bhi.n	800ae82 <USBH_LL_GetSpeed+0x3e>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <USBH_LL_GetSpeed+0x2c>
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d003      	beq.n	800ae76 <USBH_LL_GetSpeed+0x32>
 800ae6e:	e008      	b.n	800ae82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	e008      	b.n	800ae88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ae76:	2301      	movs	r3, #1
 800ae78:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7a:	e005      	b.n	800ae88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae80:	e002      	b.n	800ae88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]
    break;
 800ae86:	bf00      	nop
  }
  return  speed;
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7f9 fba9 	bl	8004600 <HAL_HCD_ResetPort>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f901 	bl	800b0bc <USBH_Get_USB_Status>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	4611      	mov	r1, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f9 fbb1 	bl	8004646 <HAL_HCD_HC_GetXferCount>
 800aee4:	4603      	mov	r3, r0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aeee:	b590      	push	{r4, r7, lr}
 800aef0:	b089      	sub	sp, #36	; 0x24
 800aef2:	af04      	add	r7, sp, #16
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	4608      	mov	r0, r1
 800aef8:	4611      	mov	r1, r2
 800aefa:	461a      	mov	r2, r3
 800aefc:	4603      	mov	r3, r0
 800aefe:	70fb      	strb	r3, [r7, #3]
 800af00:	460b      	mov	r3, r1
 800af02:	70bb      	strb	r3, [r7, #2]
 800af04:	4613      	mov	r3, r2
 800af06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af16:	787c      	ldrb	r4, [r7, #1]
 800af18:	78ba      	ldrb	r2, [r7, #2]
 800af1a:	78f9      	ldrb	r1, [r7, #3]
 800af1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	4623      	mov	r3, r4
 800af2e:	f7f8 ff9d 	bl	8003e6c <HAL_HCD_HC_Init>
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f8bf 	bl	800b0bc <USBH_Get_USB_Status>
 800af3e:	4603      	mov	r3, r0
 800af40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af42:	7bbb      	ldrb	r3, [r7, #14]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd90      	pop	{r4, r7, pc}

0800af4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af66:	78fa      	ldrb	r2, [r7, #3]
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f9 f836 	bl	8003fdc <HAL_HCD_HC_Halt>
 800af70:	4603      	mov	r3, r0
 800af72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 f8a0 	bl	800b0bc <USBH_Get_USB_Status>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af80:	7bbb      	ldrb	r3, [r7, #14]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800af8a:	b590      	push	{r4, r7, lr}
 800af8c:	b089      	sub	sp, #36	; 0x24
 800af8e:	af04      	add	r7, sp, #16
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	461a      	mov	r2, r3
 800af98:	4603      	mov	r3, r0
 800af9a:	70fb      	strb	r3, [r7, #3]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70bb      	strb	r3, [r7, #2]
 800afa0:	4613      	mov	r3, r2
 800afa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afb2:	787c      	ldrb	r4, [r7, #1]
 800afb4:	78ba      	ldrb	r2, [r7, #2]
 800afb6:	78f9      	ldrb	r1, [r7, #3]
 800afb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afc0:	9302      	str	r3, [sp, #8]
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4623      	mov	r3, r4
 800afce:	f7f9 f829 	bl	8004024 <HAL_HCD_HC_SubmitRequest>
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f86f 	bl	800b0bc <USBH_Get_USB_Status>
 800afde:	4603      	mov	r3, r0
 800afe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd90      	pop	{r4, r7, pc}

0800afec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7f9 fb0a 	bl	800461c <HAL_HCD_HC_GetURBState>
 800b008:	4603      	mov	r3, r0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b024:	2b01      	cmp	r3, #1
 800b026:	d103      	bne.n	800b030 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 f872 	bl	800b114 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b030:	20c8      	movs	r0, #200	; 0xc8
 800b032:	f7f7 fab5 	bl	80025a0 <HAL_Delay>
  return USBH_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
 800b04c:	4613      	mov	r3, r2
 800b04e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b056:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b058:	78fa      	ldrb	r2, [r7, #3]
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	4613      	mov	r3, r2
 800b05e:	011b      	lsls	r3, r3, #4
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3317      	adds	r3, #23
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	4613      	mov	r3, r2
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	333c      	adds	r3, #60	; 0x3c
 800b07e:	78ba      	ldrb	r2, [r7, #2]
 800b080:	701a      	strb	r2, [r3, #0]
 800b082:	e009      	b.n	800b098 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b084:	78fa      	ldrb	r2, [r7, #3]
 800b086:	68f9      	ldr	r1, [r7, #12]
 800b088:	4613      	mov	r3, r2
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	440b      	add	r3, r1
 800b092:	333d      	adds	r3, #61	; 0x3d
 800b094:	78ba      	ldrb	r2, [r7, #2]
 800b096:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7f7 fa76 	bl	80025a0 <HAL_Delay>
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d817      	bhi.n	800b100 <USBH_Get_USB_Status+0x44>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBH_Get_USB_Status+0x1c>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b0e9 	.word	0x0800b0e9
 800b0dc:	0800b0ef 	.word	0x0800b0ef
 800b0e0:	0800b0f5 	.word	0x0800b0f5
 800b0e4:	0800b0fb 	.word	0x0800b0fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ec:	e00b      	b.n	800b106 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f2:	e008      	b.n	800b106 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f8:	e005      	b.n	800b106 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0fe:	e002      	b.n	800b106 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b100:	2302      	movs	r3, #2
 800b102:	73fb      	strb	r3, [r7, #15]
    break;
 800b104:	bf00      	nop
  }
  return usb_status;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
 800b12c:	e001      	b.n	800b132 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b12e:	2301      	movs	r3, #1
 800b130:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	461a      	mov	r2, r3
 800b136:	2140      	movs	r1, #64	; 0x40
 800b138:	4803      	ldr	r0, [pc, #12]	; (800b148 <MX_DriverVbusFS+0x34>)
 800b13a:	f7f8 fdfd 	bl	8003d38 <HAL_GPIO_WritePin>
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40021800 	.word	0x40021800

0800b14c <malloc>:
 800b14c:	4b02      	ldr	r3, [pc, #8]	; (800b158 <malloc+0xc>)
 800b14e:	4601      	mov	r1, r0
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	f000 b82b 	b.w	800b1ac <_malloc_r>
 800b156:	bf00      	nop
 800b158:	20000084 	.word	0x20000084

0800b15c <free>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <free+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f000 bb09 	b.w	800b778 <_free_r>
 800b166:	bf00      	nop
 800b168:	20000084 	.word	0x20000084

0800b16c <sbrk_aligned>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4e0e      	ldr	r6, [pc, #56]	; (800b1a8 <sbrk_aligned+0x3c>)
 800b170:	460c      	mov	r4, r1
 800b172:	6831      	ldr	r1, [r6, #0]
 800b174:	4605      	mov	r5, r0
 800b176:	b911      	cbnz	r1, 800b17e <sbrk_aligned+0x12>
 800b178:	f000 fab2 	bl	800b6e0 <_sbrk_r>
 800b17c:	6030      	str	r0, [r6, #0]
 800b17e:	4621      	mov	r1, r4
 800b180:	4628      	mov	r0, r5
 800b182:	f000 faad 	bl	800b6e0 <_sbrk_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d00a      	beq.n	800b1a0 <sbrk_aligned+0x34>
 800b18a:	1cc4      	adds	r4, r0, #3
 800b18c:	f024 0403 	bic.w	r4, r4, #3
 800b190:	42a0      	cmp	r0, r4
 800b192:	d007      	beq.n	800b1a4 <sbrk_aligned+0x38>
 800b194:	1a21      	subs	r1, r4, r0
 800b196:	4628      	mov	r0, r5
 800b198:	f000 faa2 	bl	800b6e0 <_sbrk_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d101      	bne.n	800b1a4 <sbrk_aligned+0x38>
 800b1a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	20000bec 	.word	0x20000bec

0800b1ac <_malloc_r>:
 800b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	1ccd      	adds	r5, r1, #3
 800b1b2:	f025 0503 	bic.w	r5, r5, #3
 800b1b6:	3508      	adds	r5, #8
 800b1b8:	2d0c      	cmp	r5, #12
 800b1ba:	bf38      	it	cc
 800b1bc:	250c      	movcc	r5, #12
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	db01      	blt.n	800b1c8 <_malloc_r+0x1c>
 800b1c4:	42a9      	cmp	r1, r5
 800b1c6:	d905      	bls.n	800b1d4 <_malloc_r+0x28>
 800b1c8:	230c      	movs	r3, #12
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2a8 <_malloc_r+0xfc>
 800b1d8:	f000 f916 	bl	800b408 <__malloc_lock>
 800b1dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	bb5c      	cbnz	r4, 800b23c <_malloc_r+0x90>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f7ff ffc0 	bl	800b16c <sbrk_aligned>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	d155      	bne.n	800b29e <_malloc_r+0xf2>
 800b1f2:	f8d8 4000 	ldr.w	r4, [r8]
 800b1f6:	4626      	mov	r6, r4
 800b1f8:	2e00      	cmp	r6, #0
 800b1fa:	d145      	bne.n	800b288 <_malloc_r+0xdc>
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	d048      	beq.n	800b292 <_malloc_r+0xe6>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	4631      	mov	r1, r6
 800b204:	4638      	mov	r0, r7
 800b206:	eb04 0903 	add.w	r9, r4, r3
 800b20a:	f000 fa69 	bl	800b6e0 <_sbrk_r>
 800b20e:	4581      	cmp	r9, r0
 800b210:	d13f      	bne.n	800b292 <_malloc_r+0xe6>
 800b212:	6821      	ldr	r1, [r4, #0]
 800b214:	1a6d      	subs	r5, r5, r1
 800b216:	4629      	mov	r1, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	f7ff ffa7 	bl	800b16c <sbrk_aligned>
 800b21e:	3001      	adds	r0, #1
 800b220:	d037      	beq.n	800b292 <_malloc_r+0xe6>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	442b      	add	r3, r5
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	f8d8 3000 	ldr.w	r3, [r8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d038      	beq.n	800b2a2 <_malloc_r+0xf6>
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	42a2      	cmp	r2, r4
 800b234:	d12b      	bne.n	800b28e <_malloc_r+0xe2>
 800b236:	2200      	movs	r2, #0
 800b238:	605a      	str	r2, [r3, #4]
 800b23a:	e00f      	b.n	800b25c <_malloc_r+0xb0>
 800b23c:	6822      	ldr	r2, [r4, #0]
 800b23e:	1b52      	subs	r2, r2, r5
 800b240:	d41f      	bmi.n	800b282 <_malloc_r+0xd6>
 800b242:	2a0b      	cmp	r2, #11
 800b244:	d917      	bls.n	800b276 <_malloc_r+0xca>
 800b246:	1961      	adds	r1, r4, r5
 800b248:	42a3      	cmp	r3, r4
 800b24a:	6025      	str	r5, [r4, #0]
 800b24c:	bf18      	it	ne
 800b24e:	6059      	strne	r1, [r3, #4]
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	bf08      	it	eq
 800b254:	f8c8 1000 	streq.w	r1, [r8]
 800b258:	5162      	str	r2, [r4, r5]
 800b25a:	604b      	str	r3, [r1, #4]
 800b25c:	4638      	mov	r0, r7
 800b25e:	f104 060b 	add.w	r6, r4, #11
 800b262:	f000 f8d7 	bl	800b414 <__malloc_unlock>
 800b266:	f026 0607 	bic.w	r6, r6, #7
 800b26a:	1d23      	adds	r3, r4, #4
 800b26c:	1af2      	subs	r2, r6, r3
 800b26e:	d0ae      	beq.n	800b1ce <_malloc_r+0x22>
 800b270:	1b9b      	subs	r3, r3, r6
 800b272:	50a3      	str	r3, [r4, r2]
 800b274:	e7ab      	b.n	800b1ce <_malloc_r+0x22>
 800b276:	42a3      	cmp	r3, r4
 800b278:	6862      	ldr	r2, [r4, #4]
 800b27a:	d1dd      	bne.n	800b238 <_malloc_r+0x8c>
 800b27c:	f8c8 2000 	str.w	r2, [r8]
 800b280:	e7ec      	b.n	800b25c <_malloc_r+0xb0>
 800b282:	4623      	mov	r3, r4
 800b284:	6864      	ldr	r4, [r4, #4]
 800b286:	e7ac      	b.n	800b1e2 <_malloc_r+0x36>
 800b288:	4634      	mov	r4, r6
 800b28a:	6876      	ldr	r6, [r6, #4]
 800b28c:	e7b4      	b.n	800b1f8 <_malloc_r+0x4c>
 800b28e:	4613      	mov	r3, r2
 800b290:	e7cc      	b.n	800b22c <_malloc_r+0x80>
 800b292:	230c      	movs	r3, #12
 800b294:	603b      	str	r3, [r7, #0]
 800b296:	4638      	mov	r0, r7
 800b298:	f000 f8bc 	bl	800b414 <__malloc_unlock>
 800b29c:	e797      	b.n	800b1ce <_malloc_r+0x22>
 800b29e:	6025      	str	r5, [r4, #0]
 800b2a0:	e7dc      	b.n	800b25c <_malloc_r+0xb0>
 800b2a2:	605b      	str	r3, [r3, #4]
 800b2a4:	deff      	udf	#255	; 0xff
 800b2a6:	bf00      	nop
 800b2a8:	20000be8 	.word	0x20000be8

0800b2ac <setvbuf>:
 800b2ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2b0:	461d      	mov	r5, r3
 800b2b2:	4b54      	ldr	r3, [pc, #336]	; (800b404 <setvbuf+0x158>)
 800b2b4:	681f      	ldr	r7, [r3, #0]
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460e      	mov	r6, r1
 800b2ba:	4690      	mov	r8, r2
 800b2bc:	b127      	cbz	r7, 800b2c8 <setvbuf+0x1c>
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	b913      	cbnz	r3, 800b2c8 <setvbuf+0x1c>
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f000 f938 	bl	800b538 <__sinit>
 800b2c8:	f1b8 0f02 	cmp.w	r8, #2
 800b2cc:	d006      	beq.n	800b2dc <setvbuf+0x30>
 800b2ce:	f1b8 0f01 	cmp.w	r8, #1
 800b2d2:	f200 8094 	bhi.w	800b3fe <setvbuf+0x152>
 800b2d6:	2d00      	cmp	r5, #0
 800b2d8:	f2c0 8091 	blt.w	800b3fe <setvbuf+0x152>
 800b2dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2de:	07da      	lsls	r2, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <setvbuf+0x42>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	059b      	lsls	r3, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <setvbuf+0x42>
 800b2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ea:	f000 fa34 	bl	800b756 <__retarget_lock_acquire_recursive>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f000 fde7 	bl	800bec4 <_fflush_r>
 800b2f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f8:	b141      	cbz	r1, 800b30c <setvbuf+0x60>
 800b2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fe:	4299      	cmp	r1, r3
 800b300:	d002      	beq.n	800b308 <setvbuf+0x5c>
 800b302:	4638      	mov	r0, r7
 800b304:	f000 fa38 	bl	800b778 <_free_r>
 800b308:	2300      	movs	r3, #0
 800b30a:	6363      	str	r3, [r4, #52]	; 0x34
 800b30c:	2300      	movs	r3, #0
 800b30e:	61a3      	str	r3, [r4, #24]
 800b310:	6063      	str	r3, [r4, #4]
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	0618      	lsls	r0, r3, #24
 800b316:	d503      	bpl.n	800b320 <setvbuf+0x74>
 800b318:	6921      	ldr	r1, [r4, #16]
 800b31a:	4638      	mov	r0, r7
 800b31c:	f000 fa2c 	bl	800b778 <_free_r>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b326:	f023 0303 	bic.w	r3, r3, #3
 800b32a:	f1b8 0f02 	cmp.w	r8, #2
 800b32e:	81a3      	strh	r3, [r4, #12]
 800b330:	d05f      	beq.n	800b3f2 <setvbuf+0x146>
 800b332:	ab01      	add	r3, sp, #4
 800b334:	466a      	mov	r2, sp
 800b336:	4621      	mov	r1, r4
 800b338:	4638      	mov	r0, r7
 800b33a:	f000 f933 	bl	800b5a4 <__swhatbuf_r>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	4318      	orrs	r0, r3
 800b342:	81a0      	strh	r0, [r4, #12]
 800b344:	bb2d      	cbnz	r5, 800b392 <setvbuf+0xe6>
 800b346:	9d00      	ldr	r5, [sp, #0]
 800b348:	4628      	mov	r0, r5
 800b34a:	f7ff feff 	bl	800b14c <malloc>
 800b34e:	4606      	mov	r6, r0
 800b350:	2800      	cmp	r0, #0
 800b352:	d150      	bne.n	800b3f6 <setvbuf+0x14a>
 800b354:	f8dd 9000 	ldr.w	r9, [sp]
 800b358:	45a9      	cmp	r9, r5
 800b35a:	d13e      	bne.n	800b3da <setvbuf+0x12e>
 800b35c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b360:	2200      	movs	r2, #0
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b368:	6022      	str	r2, [r4, #0]
 800b36a:	6122      	str	r2, [r4, #16]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b372:	6162      	str	r2, [r4, #20]
 800b374:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b376:	f043 0302 	orr.w	r3, r3, #2
 800b37a:	07d1      	lsls	r1, r2, #31
 800b37c:	81a3      	strh	r3, [r4, #12]
 800b37e:	d404      	bmi.n	800b38a <setvbuf+0xde>
 800b380:	059b      	lsls	r3, r3, #22
 800b382:	d402      	bmi.n	800b38a <setvbuf+0xde>
 800b384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b386:	f000 f9e7 	bl	800b758 <__retarget_lock_release_recursive>
 800b38a:	4628      	mov	r0, r5
 800b38c:	b003      	add	sp, #12
 800b38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b392:	2e00      	cmp	r6, #0
 800b394:	d0d8      	beq.n	800b348 <setvbuf+0x9c>
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	b913      	cbnz	r3, 800b3a0 <setvbuf+0xf4>
 800b39a:	4638      	mov	r0, r7
 800b39c:	f000 f8cc 	bl	800b538 <__sinit>
 800b3a0:	f1b8 0f01 	cmp.w	r8, #1
 800b3a4:	bf08      	it	eq
 800b3a6:	89a3      	ldrheq	r3, [r4, #12]
 800b3a8:	6026      	str	r6, [r4, #0]
 800b3aa:	bf04      	itt	eq
 800b3ac:	f043 0301 	orreq.w	r3, r3, #1
 800b3b0:	81a3      	strheq	r3, [r4, #12]
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f013 0208 	ands.w	r2, r3, #8
 800b3b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b3bc:	d01d      	beq.n	800b3fa <setvbuf+0x14e>
 800b3be:	07da      	lsls	r2, r3, #31
 800b3c0:	bf41      	itttt	mi
 800b3c2:	2200      	movmi	r2, #0
 800b3c4:	426d      	negmi	r5, r5
 800b3c6:	60a2      	strmi	r2, [r4, #8]
 800b3c8:	61a5      	strmi	r5, [r4, #24]
 800b3ca:	bf58      	it	pl
 800b3cc:	60a5      	strpl	r5, [r4, #8]
 800b3ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b3d0:	f015 0501 	ands.w	r5, r5, #1
 800b3d4:	d0d4      	beq.n	800b380 <setvbuf+0xd4>
 800b3d6:	2500      	movs	r5, #0
 800b3d8:	e7d7      	b.n	800b38a <setvbuf+0xde>
 800b3da:	4648      	mov	r0, r9
 800b3dc:	f7ff feb6 	bl	800b14c <malloc>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d0ba      	beq.n	800b35c <setvbuf+0xb0>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	464d      	mov	r5, r9
 800b3f0:	e7d1      	b.n	800b396 <setvbuf+0xea>
 800b3f2:	2500      	movs	r5, #0
 800b3f4:	e7b4      	b.n	800b360 <setvbuf+0xb4>
 800b3f6:	46a9      	mov	r9, r5
 800b3f8:	e7f5      	b.n	800b3e6 <setvbuf+0x13a>
 800b3fa:	60a2      	str	r2, [r4, #8]
 800b3fc:	e7e7      	b.n	800b3ce <setvbuf+0x122>
 800b3fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b402:	e7c2      	b.n	800b38a <setvbuf+0xde>
 800b404:	20000084 	.word	0x20000084

0800b408 <__malloc_lock>:
 800b408:	4801      	ldr	r0, [pc, #4]	; (800b410 <__malloc_lock+0x8>)
 800b40a:	f000 b9a4 	b.w	800b756 <__retarget_lock_acquire_recursive>
 800b40e:	bf00      	nop
 800b410:	20000d2c 	.word	0x20000d2c

0800b414 <__malloc_unlock>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__malloc_unlock+0x8>)
 800b416:	f000 b99f 	b.w	800b758 <__retarget_lock_release_recursive>
 800b41a:	bf00      	nop
 800b41c:	20000d2c 	.word	0x20000d2c

0800b420 <std>:
 800b420:	2300      	movs	r3, #0
 800b422:	b510      	push	{r4, lr}
 800b424:	4604      	mov	r4, r0
 800b426:	e9c0 3300 	strd	r3, r3, [r0]
 800b42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b42e:	6083      	str	r3, [r0, #8]
 800b430:	8181      	strh	r1, [r0, #12]
 800b432:	6643      	str	r3, [r0, #100]	; 0x64
 800b434:	81c2      	strh	r2, [r0, #14]
 800b436:	6183      	str	r3, [r0, #24]
 800b438:	4619      	mov	r1, r3
 800b43a:	2208      	movs	r2, #8
 800b43c:	305c      	adds	r0, #92	; 0x5c
 800b43e:	f000 f925 	bl	800b68c <memset>
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <std+0x58>)
 800b444:	6263      	str	r3, [r4, #36]	; 0x24
 800b446:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <std+0x5c>)
 800b448:	62a3      	str	r3, [r4, #40]	; 0x28
 800b44a:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <std+0x60>)
 800b44c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b44e:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <std+0x64>)
 800b450:	6323      	str	r3, [r4, #48]	; 0x30
 800b452:	4b0d      	ldr	r3, [pc, #52]	; (800b488 <std+0x68>)
 800b454:	6224      	str	r4, [r4, #32]
 800b456:	429c      	cmp	r4, r3
 800b458:	d006      	beq.n	800b468 <std+0x48>
 800b45a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b45e:	4294      	cmp	r4, r2
 800b460:	d002      	beq.n	800b468 <std+0x48>
 800b462:	33d0      	adds	r3, #208	; 0xd0
 800b464:	429c      	cmp	r4, r3
 800b466:	d105      	bne.n	800b474 <std+0x54>
 800b468:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f000 b970 	b.w	800b754 <__retarget_lock_init_recursive>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	bf00      	nop
 800b478:	0800bf15 	.word	0x0800bf15
 800b47c:	0800bf37 	.word	0x0800bf37
 800b480:	0800bf6f 	.word	0x0800bf6f
 800b484:	0800bf93 	.word	0x0800bf93
 800b488:	20000bf0 	.word	0x20000bf0

0800b48c <stdio_exit_handler>:
 800b48c:	4a02      	ldr	r2, [pc, #8]	; (800b498 <stdio_exit_handler+0xc>)
 800b48e:	4903      	ldr	r1, [pc, #12]	; (800b49c <stdio_exit_handler+0x10>)
 800b490:	4803      	ldr	r0, [pc, #12]	; (800b4a0 <stdio_exit_handler+0x14>)
 800b492:	f000 b869 	b.w	800b568 <_fwalk_sglue>
 800b496:	bf00      	nop
 800b498:	2000002c 	.word	0x2000002c
 800b49c:	0800bec5 	.word	0x0800bec5
 800b4a0:	20000038 	.word	0x20000038

0800b4a4 <cleanup_stdio>:
 800b4a4:	6841      	ldr	r1, [r0, #4]
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <cleanup_stdio+0x34>)
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	d001      	beq.n	800b4b4 <cleanup_stdio+0x10>
 800b4b0:	f000 fd08 	bl	800bec4 <_fflush_r>
 800b4b4:	68a1      	ldr	r1, [r4, #8]
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <cleanup_stdio+0x38>)
 800b4b8:	4299      	cmp	r1, r3
 800b4ba:	d002      	beq.n	800b4c2 <cleanup_stdio+0x1e>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fd01 	bl	800bec4 <_fflush_r>
 800b4c2:	68e1      	ldr	r1, [r4, #12]
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <cleanup_stdio+0x3c>)
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d004      	beq.n	800b4d4 <cleanup_stdio+0x30>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d0:	f000 bcf8 	b.w	800bec4 <_fflush_r>
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000bf0 	.word	0x20000bf0
 800b4dc:	20000c58 	.word	0x20000c58
 800b4e0:	20000cc0 	.word	0x20000cc0

0800b4e4 <global_stdio_init.part.0>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <global_stdio_init.part.0+0x30>)
 800b4e8:	4c0b      	ldr	r4, [pc, #44]	; (800b518 <global_stdio_init.part.0+0x34>)
 800b4ea:	4a0c      	ldr	r2, [pc, #48]	; (800b51c <global_stdio_init.part.0+0x38>)
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2104      	movs	r1, #4
 800b4f4:	f7ff ff94 	bl	800b420 <std>
 800b4f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	2109      	movs	r1, #9
 800b500:	f7ff ff8e 	bl	800b420 <std>
 800b504:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b508:	2202      	movs	r2, #2
 800b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50e:	2112      	movs	r1, #18
 800b510:	f7ff bf86 	b.w	800b420 <std>
 800b514:	20000d28 	.word	0x20000d28
 800b518:	20000bf0 	.word	0x20000bf0
 800b51c:	0800b48d 	.word	0x0800b48d

0800b520 <__sfp_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sfp_lock_acquire+0x8>)
 800b522:	f000 b918 	b.w	800b756 <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	20000d2d 	.word	0x20000d2d

0800b52c <__sfp_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sfp_lock_release+0x8>)
 800b52e:	f000 b913 	b.w	800b758 <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	20000d2d 	.word	0x20000d2d

0800b538 <__sinit>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	f7ff fff0 	bl	800b520 <__sfp_lock_acquire>
 800b540:	6a23      	ldr	r3, [r4, #32]
 800b542:	b11b      	cbz	r3, 800b54c <__sinit+0x14>
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	f7ff bff0 	b.w	800b52c <__sfp_lock_release>
 800b54c:	4b04      	ldr	r3, [pc, #16]	; (800b560 <__sinit+0x28>)
 800b54e:	6223      	str	r3, [r4, #32]
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <__sinit+0x2c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f5      	bne.n	800b544 <__sinit+0xc>
 800b558:	f7ff ffc4 	bl	800b4e4 <global_stdio_init.part.0>
 800b55c:	e7f2      	b.n	800b544 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800b4a5 	.word	0x0800b4a5
 800b564:	20000d28 	.word	0x20000d28

0800b568 <_fwalk_sglue>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4607      	mov	r7, r0
 800b56e:	4688      	mov	r8, r1
 800b570:	4614      	mov	r4, r2
 800b572:	2600      	movs	r6, #0
 800b574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b578:	f1b9 0901 	subs.w	r9, r9, #1
 800b57c:	d505      	bpl.n	800b58a <_fwalk_sglue+0x22>
 800b57e:	6824      	ldr	r4, [r4, #0]
 800b580:	2c00      	cmp	r4, #0
 800b582:	d1f7      	bne.n	800b574 <_fwalk_sglue+0xc>
 800b584:	4630      	mov	r0, r6
 800b586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d907      	bls.n	800b5a0 <_fwalk_sglue+0x38>
 800b590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b594:	3301      	adds	r3, #1
 800b596:	d003      	beq.n	800b5a0 <_fwalk_sglue+0x38>
 800b598:	4629      	mov	r1, r5
 800b59a:	4638      	mov	r0, r7
 800b59c:	47c0      	blx	r8
 800b59e:	4306      	orrs	r6, r0
 800b5a0:	3568      	adds	r5, #104	; 0x68
 800b5a2:	e7e9      	b.n	800b578 <_fwalk_sglue+0x10>

0800b5a4 <__swhatbuf_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	b096      	sub	sp, #88	; 0x58
 800b5b0:	4615      	mov	r5, r2
 800b5b2:	461e      	mov	r6, r3
 800b5b4:	da0d      	bge.n	800b5d2 <__swhatbuf_r+0x2e>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5bc:	f04f 0100 	mov.w	r1, #0
 800b5c0:	bf0c      	ite	eq
 800b5c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5c6:	2340      	movne	r3, #64	; 0x40
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	6031      	str	r1, [r6, #0]
 800b5cc:	602b      	str	r3, [r5, #0]
 800b5ce:	b016      	add	sp, #88	; 0x58
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	466a      	mov	r2, sp
 800b5d4:	f000 f862 	bl	800b69c <_fstat_r>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	dbec      	blt.n	800b5b6 <__swhatbuf_r+0x12>
 800b5dc:	9901      	ldr	r1, [sp, #4]
 800b5de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5e6:	4259      	negs	r1, r3
 800b5e8:	4159      	adcs	r1, r3
 800b5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ee:	e7eb      	b.n	800b5c8 <__swhatbuf_r+0x24>

0800b5f0 <__smakebuf_r>:
 800b5f0:	898b      	ldrh	r3, [r1, #12]
 800b5f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5f4:	079d      	lsls	r5, r3, #30
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	d507      	bpl.n	800b60c <__smakebuf_r+0x1c>
 800b5fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	2301      	movs	r3, #1
 800b606:	6163      	str	r3, [r4, #20]
 800b608:	b002      	add	sp, #8
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	ab01      	add	r3, sp, #4
 800b60e:	466a      	mov	r2, sp
 800b610:	f7ff ffc8 	bl	800b5a4 <__swhatbuf_r>
 800b614:	9900      	ldr	r1, [sp, #0]
 800b616:	4605      	mov	r5, r0
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff fdc7 	bl	800b1ac <_malloc_r>
 800b61e:	b948      	cbnz	r0, 800b634 <__smakebuf_r+0x44>
 800b620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b624:	059a      	lsls	r2, r3, #22
 800b626:	d4ef      	bmi.n	800b608 <__smakebuf_r+0x18>
 800b628:	f023 0303 	bic.w	r3, r3, #3
 800b62c:	f043 0302 	orr.w	r3, r3, #2
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	e7e3      	b.n	800b5fc <__smakebuf_r+0xc>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	6020      	str	r0, [r4, #0]
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	9b00      	ldr	r3, [sp, #0]
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	6120      	str	r0, [r4, #16]
 800b646:	b15b      	cbz	r3, 800b660 <__smakebuf_r+0x70>
 800b648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f837 	bl	800b6c0 <_isatty_r>
 800b652:	b128      	cbz	r0, 800b660 <__smakebuf_r+0x70>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f023 0303 	bic.w	r3, r3, #3
 800b65a:	f043 0301 	orr.w	r3, r3, #1
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	431d      	orrs	r5, r3
 800b664:	81a5      	strh	r5, [r4, #12]
 800b666:	e7cf      	b.n	800b608 <__smakebuf_r+0x18>

0800b668 <iprintf>:
 800b668:	b40f      	push	{r0, r1, r2, r3}
 800b66a:	b507      	push	{r0, r1, r2, lr}
 800b66c:	4906      	ldr	r1, [pc, #24]	; (800b688 <iprintf+0x20>)
 800b66e:	ab04      	add	r3, sp, #16
 800b670:	6808      	ldr	r0, [r1, #0]
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6881      	ldr	r1, [r0, #8]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f000 f8f3 	bl	800b864 <_vfiprintf_r>
 800b67e:	b003      	add	sp, #12
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b004      	add	sp, #16
 800b686:	4770      	bx	lr
 800b688:	20000084 	.word	0x20000084

0800b68c <memset>:
 800b68c:	4402      	add	r2, r0
 800b68e:	4603      	mov	r3, r0
 800b690:	4293      	cmp	r3, r2
 800b692:	d100      	bne.n	800b696 <memset+0xa>
 800b694:	4770      	bx	lr
 800b696:	f803 1b01 	strb.w	r1, [r3], #1
 800b69a:	e7f9      	b.n	800b690 <memset+0x4>

0800b69c <_fstat_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_fstat_r+0x20>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	f7f6 fc93 	bl	8001fd4 <_fstat>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d102      	bne.n	800b6b8 <_fstat_r+0x1c>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	b103      	cbz	r3, 800b6b8 <_fstat_r+0x1c>
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000d30 	.word	0x20000d30

0800b6c0 <_isatty_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d06      	ldr	r5, [pc, #24]	; (800b6dc <_isatty_r+0x1c>)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	602b      	str	r3, [r5, #0]
 800b6cc:	f7f6 fbf0 	bl	8001eb0 <_isatty>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_isatty_r+0x1a>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_isatty_r+0x1a>
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	20000d30 	.word	0x20000d30

0800b6e0 <_sbrk_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d06      	ldr	r5, [pc, #24]	; (800b6fc <_sbrk_r+0x1c>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	f7f6 fe74 	bl	80023d8 <_sbrk>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d102      	bne.n	800b6fa <_sbrk_r+0x1a>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	b103      	cbz	r3, 800b6fa <_sbrk_r+0x1a>
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	20000d30 	.word	0x20000d30

0800b700 <__errno>:
 800b700:	4b01      	ldr	r3, [pc, #4]	; (800b708 <__errno+0x8>)
 800b702:	6818      	ldr	r0, [r3, #0]
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000084 	.word	0x20000084

0800b70c <__libc_init_array>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	4d0d      	ldr	r5, [pc, #52]	; (800b744 <__libc_init_array+0x38>)
 800b710:	4c0d      	ldr	r4, [pc, #52]	; (800b748 <__libc_init_array+0x3c>)
 800b712:	1b64      	subs	r4, r4, r5
 800b714:	10a4      	asrs	r4, r4, #2
 800b716:	2600      	movs	r6, #0
 800b718:	42a6      	cmp	r6, r4
 800b71a:	d109      	bne.n	800b730 <__libc_init_array+0x24>
 800b71c:	4d0b      	ldr	r5, [pc, #44]	; (800b74c <__libc_init_array+0x40>)
 800b71e:	4c0c      	ldr	r4, [pc, #48]	; (800b750 <__libc_init_array+0x44>)
 800b720:	f000 fd16 	bl	800c150 <_init>
 800b724:	1b64      	subs	r4, r4, r5
 800b726:	10a4      	asrs	r4, r4, #2
 800b728:	2600      	movs	r6, #0
 800b72a:	42a6      	cmp	r6, r4
 800b72c:	d105      	bne.n	800b73a <__libc_init_array+0x2e>
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
 800b730:	f855 3b04 	ldr.w	r3, [r5], #4
 800b734:	4798      	blx	r3
 800b736:	3601      	adds	r6, #1
 800b738:	e7ee      	b.n	800b718 <__libc_init_array+0xc>
 800b73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73e:	4798      	blx	r3
 800b740:	3601      	adds	r6, #1
 800b742:	e7f2      	b.n	800b72a <__libc_init_array+0x1e>
 800b744:	0800c2a4 	.word	0x0800c2a4
 800b748:	0800c2a4 	.word	0x0800c2a4
 800b74c:	0800c2a4 	.word	0x0800c2a4
 800b750:	0800c2a8 	.word	0x0800c2a8

0800b754 <__retarget_lock_init_recursive>:
 800b754:	4770      	bx	lr

0800b756 <__retarget_lock_acquire_recursive>:
 800b756:	4770      	bx	lr

0800b758 <__retarget_lock_release_recursive>:
 800b758:	4770      	bx	lr

0800b75a <memcpy>:
 800b75a:	440a      	add	r2, r1
 800b75c:	4291      	cmp	r1, r2
 800b75e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b762:	d100      	bne.n	800b766 <memcpy+0xc>
 800b764:	4770      	bx	lr
 800b766:	b510      	push	{r4, lr}
 800b768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b770:	4291      	cmp	r1, r2
 800b772:	d1f9      	bne.n	800b768 <memcpy+0xe>
 800b774:	bd10      	pop	{r4, pc}
	...

0800b778 <_free_r>:
 800b778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b77a:	2900      	cmp	r1, #0
 800b77c:	d044      	beq.n	800b808 <_free_r+0x90>
 800b77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b782:	9001      	str	r0, [sp, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f1a1 0404 	sub.w	r4, r1, #4
 800b78a:	bfb8      	it	lt
 800b78c:	18e4      	addlt	r4, r4, r3
 800b78e:	f7ff fe3b 	bl	800b408 <__malloc_lock>
 800b792:	4a1e      	ldr	r2, [pc, #120]	; (800b80c <_free_r+0x94>)
 800b794:	9801      	ldr	r0, [sp, #4]
 800b796:	6813      	ldr	r3, [r2, #0]
 800b798:	b933      	cbnz	r3, 800b7a8 <_free_r+0x30>
 800b79a:	6063      	str	r3, [r4, #4]
 800b79c:	6014      	str	r4, [r2, #0]
 800b79e:	b003      	add	sp, #12
 800b7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7a4:	f7ff be36 	b.w	800b414 <__malloc_unlock>
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	d908      	bls.n	800b7be <_free_r+0x46>
 800b7ac:	6825      	ldr	r5, [r4, #0]
 800b7ae:	1961      	adds	r1, r4, r5
 800b7b0:	428b      	cmp	r3, r1
 800b7b2:	bf01      	itttt	eq
 800b7b4:	6819      	ldreq	r1, [r3, #0]
 800b7b6:	685b      	ldreq	r3, [r3, #4]
 800b7b8:	1949      	addeq	r1, r1, r5
 800b7ba:	6021      	streq	r1, [r4, #0]
 800b7bc:	e7ed      	b.n	800b79a <_free_r+0x22>
 800b7be:	461a      	mov	r2, r3
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	b10b      	cbz	r3, 800b7c8 <_free_r+0x50>
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	d9fa      	bls.n	800b7be <_free_r+0x46>
 800b7c8:	6811      	ldr	r1, [r2, #0]
 800b7ca:	1855      	adds	r5, r2, r1
 800b7cc:	42a5      	cmp	r5, r4
 800b7ce:	d10b      	bne.n	800b7e8 <_free_r+0x70>
 800b7d0:	6824      	ldr	r4, [r4, #0]
 800b7d2:	4421      	add	r1, r4
 800b7d4:	1854      	adds	r4, r2, r1
 800b7d6:	42a3      	cmp	r3, r4
 800b7d8:	6011      	str	r1, [r2, #0]
 800b7da:	d1e0      	bne.n	800b79e <_free_r+0x26>
 800b7dc:	681c      	ldr	r4, [r3, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	6053      	str	r3, [r2, #4]
 800b7e2:	440c      	add	r4, r1
 800b7e4:	6014      	str	r4, [r2, #0]
 800b7e6:	e7da      	b.n	800b79e <_free_r+0x26>
 800b7e8:	d902      	bls.n	800b7f0 <_free_r+0x78>
 800b7ea:	230c      	movs	r3, #12
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	e7d6      	b.n	800b79e <_free_r+0x26>
 800b7f0:	6825      	ldr	r5, [r4, #0]
 800b7f2:	1961      	adds	r1, r4, r5
 800b7f4:	428b      	cmp	r3, r1
 800b7f6:	bf04      	itt	eq
 800b7f8:	6819      	ldreq	r1, [r3, #0]
 800b7fa:	685b      	ldreq	r3, [r3, #4]
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	bf04      	itt	eq
 800b800:	1949      	addeq	r1, r1, r5
 800b802:	6021      	streq	r1, [r4, #0]
 800b804:	6054      	str	r4, [r2, #4]
 800b806:	e7ca      	b.n	800b79e <_free_r+0x26>
 800b808:	b003      	add	sp, #12
 800b80a:	bd30      	pop	{r4, r5, pc}
 800b80c:	20000be8 	.word	0x20000be8

0800b810 <__sfputc_r>:
 800b810:	6893      	ldr	r3, [r2, #8]
 800b812:	3b01      	subs	r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	b410      	push	{r4}
 800b818:	6093      	str	r3, [r2, #8]
 800b81a:	da08      	bge.n	800b82e <__sfputc_r+0x1e>
 800b81c:	6994      	ldr	r4, [r2, #24]
 800b81e:	42a3      	cmp	r3, r4
 800b820:	db01      	blt.n	800b826 <__sfputc_r+0x16>
 800b822:	290a      	cmp	r1, #10
 800b824:	d103      	bne.n	800b82e <__sfputc_r+0x1e>
 800b826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b82a:	f000 bbb6 	b.w	800bf9a <__swbuf_r>
 800b82e:	6813      	ldr	r3, [r2, #0]
 800b830:	1c58      	adds	r0, r3, #1
 800b832:	6010      	str	r0, [r2, #0]
 800b834:	7019      	strb	r1, [r3, #0]
 800b836:	4608      	mov	r0, r1
 800b838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <__sfputs_r>:
 800b83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b840:	4606      	mov	r6, r0
 800b842:	460f      	mov	r7, r1
 800b844:	4614      	mov	r4, r2
 800b846:	18d5      	adds	r5, r2, r3
 800b848:	42ac      	cmp	r4, r5
 800b84a:	d101      	bne.n	800b850 <__sfputs_r+0x12>
 800b84c:	2000      	movs	r0, #0
 800b84e:	e007      	b.n	800b860 <__sfputs_r+0x22>
 800b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b854:	463a      	mov	r2, r7
 800b856:	4630      	mov	r0, r6
 800b858:	f7ff ffda 	bl	800b810 <__sfputc_r>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d1f3      	bne.n	800b848 <__sfputs_r+0xa>
 800b860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b864 <_vfiprintf_r>:
 800b864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	460d      	mov	r5, r1
 800b86a:	b09d      	sub	sp, #116	; 0x74
 800b86c:	4614      	mov	r4, r2
 800b86e:	4698      	mov	r8, r3
 800b870:	4606      	mov	r6, r0
 800b872:	b118      	cbz	r0, 800b87c <_vfiprintf_r+0x18>
 800b874:	6a03      	ldr	r3, [r0, #32]
 800b876:	b90b      	cbnz	r3, 800b87c <_vfiprintf_r+0x18>
 800b878:	f7ff fe5e 	bl	800b538 <__sinit>
 800b87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b87e:	07d9      	lsls	r1, r3, #31
 800b880:	d405      	bmi.n	800b88e <_vfiprintf_r+0x2a>
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	059a      	lsls	r2, r3, #22
 800b886:	d402      	bmi.n	800b88e <_vfiprintf_r+0x2a>
 800b888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b88a:	f7ff ff64 	bl	800b756 <__retarget_lock_acquire_recursive>
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	071b      	lsls	r3, r3, #28
 800b892:	d501      	bpl.n	800b898 <_vfiprintf_r+0x34>
 800b894:	692b      	ldr	r3, [r5, #16]
 800b896:	b99b      	cbnz	r3, 800b8c0 <_vfiprintf_r+0x5c>
 800b898:	4629      	mov	r1, r5
 800b89a:	4630      	mov	r0, r6
 800b89c:	f000 fbba 	bl	800c014 <__swsetup_r>
 800b8a0:	b170      	cbz	r0, 800b8c0 <_vfiprintf_r+0x5c>
 800b8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a4:	07dc      	lsls	r4, r3, #31
 800b8a6:	d504      	bpl.n	800b8b2 <_vfiprintf_r+0x4e>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ac:	b01d      	add	sp, #116	; 0x74
 800b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	0598      	lsls	r0, r3, #22
 800b8b6:	d4f7      	bmi.n	800b8a8 <_vfiprintf_r+0x44>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ba:	f7ff ff4d 	bl	800b758 <__retarget_lock_release_recursive>
 800b8be:	e7f3      	b.n	800b8a8 <_vfiprintf_r+0x44>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ce:	2330      	movs	r3, #48	; 0x30
 800b8d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba84 <_vfiprintf_r+0x220>
 800b8d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8d8:	f04f 0901 	mov.w	r9, #1
 800b8dc:	4623      	mov	r3, r4
 800b8de:	469a      	mov	sl, r3
 800b8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8e4:	b10a      	cbz	r2, 800b8ea <_vfiprintf_r+0x86>
 800b8e6:	2a25      	cmp	r2, #37	; 0x25
 800b8e8:	d1f9      	bne.n	800b8de <_vfiprintf_r+0x7a>
 800b8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b8ee:	d00b      	beq.n	800b908 <_vfiprintf_r+0xa4>
 800b8f0:	465b      	mov	r3, fp
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ffa1 	bl	800b83e <__sfputs_r>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	f000 80a9 	beq.w	800ba54 <_vfiprintf_r+0x1f0>
 800b902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b904:	445a      	add	r2, fp
 800b906:	9209      	str	r2, [sp, #36]	; 0x24
 800b908:	f89a 3000 	ldrb.w	r3, [sl]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 80a1 	beq.w	800ba54 <_vfiprintf_r+0x1f0>
 800b912:	2300      	movs	r3, #0
 800b914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b91c:	f10a 0a01 	add.w	sl, sl, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	9307      	str	r3, [sp, #28]
 800b924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b928:	931a      	str	r3, [sp, #104]	; 0x68
 800b92a:	4654      	mov	r4, sl
 800b92c:	2205      	movs	r2, #5
 800b92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b932:	4854      	ldr	r0, [pc, #336]	; (800ba84 <_vfiprintf_r+0x220>)
 800b934:	f7f4 fc5c 	bl	80001f0 <memchr>
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	b9d8      	cbnz	r0, 800b974 <_vfiprintf_r+0x110>
 800b93c:	06d1      	lsls	r1, r2, #27
 800b93e:	bf44      	itt	mi
 800b940:	2320      	movmi	r3, #32
 800b942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b946:	0713      	lsls	r3, r2, #28
 800b948:	bf44      	itt	mi
 800b94a:	232b      	movmi	r3, #43	; 0x2b
 800b94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b950:	f89a 3000 	ldrb.w	r3, [sl]
 800b954:	2b2a      	cmp	r3, #42	; 0x2a
 800b956:	d015      	beq.n	800b984 <_vfiprintf_r+0x120>
 800b958:	9a07      	ldr	r2, [sp, #28]
 800b95a:	4654      	mov	r4, sl
 800b95c:	2000      	movs	r0, #0
 800b95e:	f04f 0c0a 	mov.w	ip, #10
 800b962:	4621      	mov	r1, r4
 800b964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b968:	3b30      	subs	r3, #48	; 0x30
 800b96a:	2b09      	cmp	r3, #9
 800b96c:	d94d      	bls.n	800ba0a <_vfiprintf_r+0x1a6>
 800b96e:	b1b0      	cbz	r0, 800b99e <_vfiprintf_r+0x13a>
 800b970:	9207      	str	r2, [sp, #28]
 800b972:	e014      	b.n	800b99e <_vfiprintf_r+0x13a>
 800b974:	eba0 0308 	sub.w	r3, r0, r8
 800b978:	fa09 f303 	lsl.w	r3, r9, r3
 800b97c:	4313      	orrs	r3, r2
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	46a2      	mov	sl, r4
 800b982:	e7d2      	b.n	800b92a <_vfiprintf_r+0xc6>
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	1d19      	adds	r1, r3, #4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	9103      	str	r1, [sp, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	bfbb      	ittet	lt
 800b990:	425b      	neglt	r3, r3
 800b992:	f042 0202 	orrlt.w	r2, r2, #2
 800b996:	9307      	strge	r3, [sp, #28]
 800b998:	9307      	strlt	r3, [sp, #28]
 800b99a:	bfb8      	it	lt
 800b99c:	9204      	strlt	r2, [sp, #16]
 800b99e:	7823      	ldrb	r3, [r4, #0]
 800b9a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9a2:	d10c      	bne.n	800b9be <_vfiprintf_r+0x15a>
 800b9a4:	7863      	ldrb	r3, [r4, #1]
 800b9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a8:	d134      	bne.n	800ba14 <_vfiprintf_r+0x1b0>
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	1d1a      	adds	r2, r3, #4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	9203      	str	r2, [sp, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bfb8      	it	lt
 800b9b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9ba:	3402      	adds	r4, #2
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba94 <_vfiprintf_r+0x230>
 800b9c2:	7821      	ldrb	r1, [r4, #0]
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	f7f4 fc12 	bl	80001f0 <memchr>
 800b9cc:	b138      	cbz	r0, 800b9de <_vfiprintf_r+0x17a>
 800b9ce:	9b04      	ldr	r3, [sp, #16]
 800b9d0:	eba0 000a 	sub.w	r0, r0, sl
 800b9d4:	2240      	movs	r2, #64	; 0x40
 800b9d6:	4082      	lsls	r2, r0
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	3401      	adds	r4, #1
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e2:	4829      	ldr	r0, [pc, #164]	; (800ba88 <_vfiprintf_r+0x224>)
 800b9e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9e8:	2206      	movs	r2, #6
 800b9ea:	f7f4 fc01 	bl	80001f0 <memchr>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d03f      	beq.n	800ba72 <_vfiprintf_r+0x20e>
 800b9f2:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <_vfiprintf_r+0x228>)
 800b9f4:	bb1b      	cbnz	r3, 800ba3e <_vfiprintf_r+0x1da>
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	3307      	adds	r3, #7
 800b9fa:	f023 0307 	bic.w	r3, r3, #7
 800b9fe:	3308      	adds	r3, #8
 800ba00:	9303      	str	r3, [sp, #12]
 800ba02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba04:	443b      	add	r3, r7
 800ba06:	9309      	str	r3, [sp, #36]	; 0x24
 800ba08:	e768      	b.n	800b8dc <_vfiprintf_r+0x78>
 800ba0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba0e:	460c      	mov	r4, r1
 800ba10:	2001      	movs	r0, #1
 800ba12:	e7a6      	b.n	800b962 <_vfiprintf_r+0xfe>
 800ba14:	2300      	movs	r3, #0
 800ba16:	3401      	adds	r4, #1
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	f04f 0c0a 	mov.w	ip, #10
 800ba20:	4620      	mov	r0, r4
 800ba22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba26:	3a30      	subs	r2, #48	; 0x30
 800ba28:	2a09      	cmp	r2, #9
 800ba2a:	d903      	bls.n	800ba34 <_vfiprintf_r+0x1d0>
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0c6      	beq.n	800b9be <_vfiprintf_r+0x15a>
 800ba30:	9105      	str	r1, [sp, #20]
 800ba32:	e7c4      	b.n	800b9be <_vfiprintf_r+0x15a>
 800ba34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba38:	4604      	mov	r4, r0
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e7f0      	b.n	800ba20 <_vfiprintf_r+0x1bc>
 800ba3e:	ab03      	add	r3, sp, #12
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	462a      	mov	r2, r5
 800ba44:	4b12      	ldr	r3, [pc, #72]	; (800ba90 <_vfiprintf_r+0x22c>)
 800ba46:	a904      	add	r1, sp, #16
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f3af 8000 	nop.w
 800ba4e:	4607      	mov	r7, r0
 800ba50:	1c78      	adds	r0, r7, #1
 800ba52:	d1d6      	bne.n	800ba02 <_vfiprintf_r+0x19e>
 800ba54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba56:	07d9      	lsls	r1, r3, #31
 800ba58:	d405      	bmi.n	800ba66 <_vfiprintf_r+0x202>
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	059a      	lsls	r2, r3, #22
 800ba5e:	d402      	bmi.n	800ba66 <_vfiprintf_r+0x202>
 800ba60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba62:	f7ff fe79 	bl	800b758 <__retarget_lock_release_recursive>
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	065b      	lsls	r3, r3, #25
 800ba6a:	f53f af1d 	bmi.w	800b8a8 <_vfiprintf_r+0x44>
 800ba6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba70:	e71c      	b.n	800b8ac <_vfiprintf_r+0x48>
 800ba72:	ab03      	add	r3, sp, #12
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	462a      	mov	r2, r5
 800ba78:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <_vfiprintf_r+0x22c>)
 800ba7a:	a904      	add	r1, sp, #16
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f000 f879 	bl	800bb74 <_printf_i>
 800ba82:	e7e4      	b.n	800ba4e <_vfiprintf_r+0x1ea>
 800ba84:	0800c268 	.word	0x0800c268
 800ba88:	0800c272 	.word	0x0800c272
 800ba8c:	00000000 	.word	0x00000000
 800ba90:	0800b83f 	.word	0x0800b83f
 800ba94:	0800c26e 	.word	0x0800c26e

0800ba98 <_printf_common>:
 800ba98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	4616      	mov	r6, r2
 800ba9e:	4699      	mov	r9, r3
 800baa0:	688a      	ldr	r2, [r1, #8]
 800baa2:	690b      	ldr	r3, [r1, #16]
 800baa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baa8:	4293      	cmp	r3, r2
 800baaa:	bfb8      	it	lt
 800baac:	4613      	movlt	r3, r2
 800baae:	6033      	str	r3, [r6, #0]
 800bab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bab4:	4607      	mov	r7, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	b10a      	cbz	r2, 800babe <_printf_common+0x26>
 800baba:	3301      	adds	r3, #1
 800babc:	6033      	str	r3, [r6, #0]
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	0699      	lsls	r1, r3, #26
 800bac2:	bf42      	ittt	mi
 800bac4:	6833      	ldrmi	r3, [r6, #0]
 800bac6:	3302      	addmi	r3, #2
 800bac8:	6033      	strmi	r3, [r6, #0]
 800baca:	6825      	ldr	r5, [r4, #0]
 800bacc:	f015 0506 	ands.w	r5, r5, #6
 800bad0:	d106      	bne.n	800bae0 <_printf_common+0x48>
 800bad2:	f104 0a19 	add.w	sl, r4, #25
 800bad6:	68e3      	ldr	r3, [r4, #12]
 800bad8:	6832      	ldr	r2, [r6, #0]
 800bada:	1a9b      	subs	r3, r3, r2
 800badc:	42ab      	cmp	r3, r5
 800bade:	dc26      	bgt.n	800bb2e <_printf_common+0x96>
 800bae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bae4:	1e13      	subs	r3, r2, #0
 800bae6:	6822      	ldr	r2, [r4, #0]
 800bae8:	bf18      	it	ne
 800baea:	2301      	movne	r3, #1
 800baec:	0692      	lsls	r2, r2, #26
 800baee:	d42b      	bmi.n	800bb48 <_printf_common+0xb0>
 800baf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baf4:	4649      	mov	r1, r9
 800baf6:	4638      	mov	r0, r7
 800baf8:	47c0      	blx	r8
 800bafa:	3001      	adds	r0, #1
 800bafc:	d01e      	beq.n	800bb3c <_printf_common+0xa4>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	f003 0306 	and.w	r3, r3, #6
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	bf02      	ittt	eq
 800bb0a:	68e5      	ldreq	r5, [r4, #12]
 800bb0c:	6833      	ldreq	r3, [r6, #0]
 800bb0e:	1aed      	subeq	r5, r5, r3
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	bf0c      	ite	eq
 800bb14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb18:	2500      	movne	r5, #0
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	bfc4      	itt	gt
 800bb1e:	1a9b      	subgt	r3, r3, r2
 800bb20:	18ed      	addgt	r5, r5, r3
 800bb22:	2600      	movs	r6, #0
 800bb24:	341a      	adds	r4, #26
 800bb26:	42b5      	cmp	r5, r6
 800bb28:	d11a      	bne.n	800bb60 <_printf_common+0xc8>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e008      	b.n	800bb40 <_printf_common+0xa8>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4652      	mov	r2, sl
 800bb32:	4649      	mov	r1, r9
 800bb34:	4638      	mov	r0, r7
 800bb36:	47c0      	blx	r8
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d103      	bne.n	800bb44 <_printf_common+0xac>
 800bb3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	3501      	adds	r5, #1
 800bb46:	e7c6      	b.n	800bad6 <_printf_common+0x3e>
 800bb48:	18e1      	adds	r1, r4, r3
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	2030      	movs	r0, #48	; 0x30
 800bb4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb52:	4422      	add	r2, r4
 800bb54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb5c:	3302      	adds	r3, #2
 800bb5e:	e7c7      	b.n	800baf0 <_printf_common+0x58>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4622      	mov	r2, r4
 800bb64:	4649      	mov	r1, r9
 800bb66:	4638      	mov	r0, r7
 800bb68:	47c0      	blx	r8
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d0e6      	beq.n	800bb3c <_printf_common+0xa4>
 800bb6e:	3601      	adds	r6, #1
 800bb70:	e7d9      	b.n	800bb26 <_printf_common+0x8e>
	...

0800bb74 <_printf_i>:
 800bb74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb78:	7e0f      	ldrb	r7, [r1, #24]
 800bb7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb7c:	2f78      	cmp	r7, #120	; 0x78
 800bb7e:	4691      	mov	r9, r2
 800bb80:	4680      	mov	r8, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	469a      	mov	sl, r3
 800bb86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb8a:	d807      	bhi.n	800bb9c <_printf_i+0x28>
 800bb8c:	2f62      	cmp	r7, #98	; 0x62
 800bb8e:	d80a      	bhi.n	800bba6 <_printf_i+0x32>
 800bb90:	2f00      	cmp	r7, #0
 800bb92:	f000 80d4 	beq.w	800bd3e <_printf_i+0x1ca>
 800bb96:	2f58      	cmp	r7, #88	; 0x58
 800bb98:	f000 80c0 	beq.w	800bd1c <_printf_i+0x1a8>
 800bb9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bba4:	e03a      	b.n	800bc1c <_printf_i+0xa8>
 800bba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbaa:	2b15      	cmp	r3, #21
 800bbac:	d8f6      	bhi.n	800bb9c <_printf_i+0x28>
 800bbae:	a101      	add	r1, pc, #4	; (adr r1, 800bbb4 <_printf_i+0x40>)
 800bbb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbb4:	0800bc0d 	.word	0x0800bc0d
 800bbb8:	0800bc21 	.word	0x0800bc21
 800bbbc:	0800bb9d 	.word	0x0800bb9d
 800bbc0:	0800bb9d 	.word	0x0800bb9d
 800bbc4:	0800bb9d 	.word	0x0800bb9d
 800bbc8:	0800bb9d 	.word	0x0800bb9d
 800bbcc:	0800bc21 	.word	0x0800bc21
 800bbd0:	0800bb9d 	.word	0x0800bb9d
 800bbd4:	0800bb9d 	.word	0x0800bb9d
 800bbd8:	0800bb9d 	.word	0x0800bb9d
 800bbdc:	0800bb9d 	.word	0x0800bb9d
 800bbe0:	0800bd25 	.word	0x0800bd25
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bcdf 	.word	0x0800bcdf
 800bbec:	0800bb9d 	.word	0x0800bb9d
 800bbf0:	0800bb9d 	.word	0x0800bb9d
 800bbf4:	0800bd47 	.word	0x0800bd47
 800bbf8:	0800bb9d 	.word	0x0800bb9d
 800bbfc:	0800bc4d 	.word	0x0800bc4d
 800bc00:	0800bb9d 	.word	0x0800bb9d
 800bc04:	0800bb9d 	.word	0x0800bb9d
 800bc08:	0800bce7 	.word	0x0800bce7
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	1d1a      	adds	r2, r3, #4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	602a      	str	r2, [r5, #0]
 800bc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e09f      	b.n	800bd60 <_printf_i+0x1ec>
 800bc20:	6820      	ldr	r0, [r4, #0]
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	0607      	lsls	r7, r0, #24
 800bc26:	f103 0104 	add.w	r1, r3, #4
 800bc2a:	6029      	str	r1, [r5, #0]
 800bc2c:	d501      	bpl.n	800bc32 <_printf_i+0xbe>
 800bc2e:	681e      	ldr	r6, [r3, #0]
 800bc30:	e003      	b.n	800bc3a <_printf_i+0xc6>
 800bc32:	0646      	lsls	r6, r0, #25
 800bc34:	d5fb      	bpl.n	800bc2e <_printf_i+0xba>
 800bc36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc3a:	2e00      	cmp	r6, #0
 800bc3c:	da03      	bge.n	800bc46 <_printf_i+0xd2>
 800bc3e:	232d      	movs	r3, #45	; 0x2d
 800bc40:	4276      	negs	r6, r6
 800bc42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc46:	485a      	ldr	r0, [pc, #360]	; (800bdb0 <_printf_i+0x23c>)
 800bc48:	230a      	movs	r3, #10
 800bc4a:	e012      	b.n	800bc72 <_printf_i+0xfe>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	6820      	ldr	r0, [r4, #0]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	6029      	str	r1, [r5, #0]
 800bc54:	0605      	lsls	r5, r0, #24
 800bc56:	d501      	bpl.n	800bc5c <_printf_i+0xe8>
 800bc58:	681e      	ldr	r6, [r3, #0]
 800bc5a:	e002      	b.n	800bc62 <_printf_i+0xee>
 800bc5c:	0641      	lsls	r1, r0, #25
 800bc5e:	d5fb      	bpl.n	800bc58 <_printf_i+0xe4>
 800bc60:	881e      	ldrh	r6, [r3, #0]
 800bc62:	4853      	ldr	r0, [pc, #332]	; (800bdb0 <_printf_i+0x23c>)
 800bc64:	2f6f      	cmp	r7, #111	; 0x6f
 800bc66:	bf0c      	ite	eq
 800bc68:	2308      	moveq	r3, #8
 800bc6a:	230a      	movne	r3, #10
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc72:	6865      	ldr	r5, [r4, #4]
 800bc74:	60a5      	str	r5, [r4, #8]
 800bc76:	2d00      	cmp	r5, #0
 800bc78:	bfa2      	ittt	ge
 800bc7a:	6821      	ldrge	r1, [r4, #0]
 800bc7c:	f021 0104 	bicge.w	r1, r1, #4
 800bc80:	6021      	strge	r1, [r4, #0]
 800bc82:	b90e      	cbnz	r6, 800bc88 <_printf_i+0x114>
 800bc84:	2d00      	cmp	r5, #0
 800bc86:	d04b      	beq.n	800bd20 <_printf_i+0x1ac>
 800bc88:	4615      	mov	r5, r2
 800bc8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc8e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc92:	5dc7      	ldrb	r7, [r0, r7]
 800bc94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc98:	4637      	mov	r7, r6
 800bc9a:	42bb      	cmp	r3, r7
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	d9f4      	bls.n	800bc8a <_printf_i+0x116>
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d10b      	bne.n	800bcbc <_printf_i+0x148>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	07de      	lsls	r6, r3, #31
 800bca8:	d508      	bpl.n	800bcbc <_printf_i+0x148>
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	6861      	ldr	r1, [r4, #4]
 800bcae:	4299      	cmp	r1, r3
 800bcb0:	bfde      	ittt	le
 800bcb2:	2330      	movle	r3, #48	; 0x30
 800bcb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bcbc:	1b52      	subs	r2, r2, r5
 800bcbe:	6122      	str	r2, [r4, #16]
 800bcc0:	f8cd a000 	str.w	sl, [sp]
 800bcc4:	464b      	mov	r3, r9
 800bcc6:	aa03      	add	r2, sp, #12
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4640      	mov	r0, r8
 800bccc:	f7ff fee4 	bl	800ba98 <_printf_common>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d14a      	bne.n	800bd6a <_printf_i+0x1f6>
 800bcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd8:	b004      	add	sp, #16
 800bcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	f043 0320 	orr.w	r3, r3, #32
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	4833      	ldr	r0, [pc, #204]	; (800bdb4 <_printf_i+0x240>)
 800bce8:	2778      	movs	r7, #120	; 0x78
 800bcea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	6829      	ldr	r1, [r5, #0]
 800bcf2:	061f      	lsls	r7, r3, #24
 800bcf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcf8:	d402      	bmi.n	800bd00 <_printf_i+0x18c>
 800bcfa:	065f      	lsls	r7, r3, #25
 800bcfc:	bf48      	it	mi
 800bcfe:	b2b6      	uxthmi	r6, r6
 800bd00:	07df      	lsls	r7, r3, #31
 800bd02:	bf48      	it	mi
 800bd04:	f043 0320 	orrmi.w	r3, r3, #32
 800bd08:	6029      	str	r1, [r5, #0]
 800bd0a:	bf48      	it	mi
 800bd0c:	6023      	strmi	r3, [r4, #0]
 800bd0e:	b91e      	cbnz	r6, 800bd18 <_printf_i+0x1a4>
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	f023 0320 	bic.w	r3, r3, #32
 800bd16:	6023      	str	r3, [r4, #0]
 800bd18:	2310      	movs	r3, #16
 800bd1a:	e7a7      	b.n	800bc6c <_printf_i+0xf8>
 800bd1c:	4824      	ldr	r0, [pc, #144]	; (800bdb0 <_printf_i+0x23c>)
 800bd1e:	e7e4      	b.n	800bcea <_printf_i+0x176>
 800bd20:	4615      	mov	r5, r2
 800bd22:	e7bd      	b.n	800bca0 <_printf_i+0x12c>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	6826      	ldr	r6, [r4, #0]
 800bd28:	6961      	ldr	r1, [r4, #20]
 800bd2a:	1d18      	adds	r0, r3, #4
 800bd2c:	6028      	str	r0, [r5, #0]
 800bd2e:	0635      	lsls	r5, r6, #24
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0x1c4>
 800bd34:	6019      	str	r1, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0x1ca>
 800bd38:	0670      	lsls	r0, r6, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0x1c0>
 800bd3c:	8019      	strh	r1, [r3, #0]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	4615      	mov	r5, r2
 800bd44:	e7bc      	b.n	800bcc0 <_printf_i+0x14c>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	602a      	str	r2, [r5, #0]
 800bd4c:	681d      	ldr	r5, [r3, #0]
 800bd4e:	6862      	ldr	r2, [r4, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	4628      	mov	r0, r5
 800bd54:	f7f4 fa4c 	bl	80001f0 <memchr>
 800bd58:	b108      	cbz	r0, 800bd5e <_printf_i+0x1ea>
 800bd5a:	1b40      	subs	r0, r0, r5
 800bd5c:	6060      	str	r0, [r4, #4]
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	2300      	movs	r3, #0
 800bd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd68:	e7aa      	b.n	800bcc0 <_printf_i+0x14c>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	47d0      	blx	sl
 800bd74:	3001      	adds	r0, #1
 800bd76:	d0ad      	beq.n	800bcd4 <_printf_i+0x160>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	079b      	lsls	r3, r3, #30
 800bd7c:	d413      	bmi.n	800bda6 <_printf_i+0x232>
 800bd7e:	68e0      	ldr	r0, [r4, #12]
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	4298      	cmp	r0, r3
 800bd84:	bfb8      	it	lt
 800bd86:	4618      	movlt	r0, r3
 800bd88:	e7a6      	b.n	800bcd8 <_printf_i+0x164>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	4649      	mov	r1, r9
 800bd90:	4640      	mov	r0, r8
 800bd92:	47d0      	blx	sl
 800bd94:	3001      	adds	r0, #1
 800bd96:	d09d      	beq.n	800bcd4 <_printf_i+0x160>
 800bd98:	3501      	adds	r5, #1
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	1a5b      	subs	r3, r3, r1
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	dcf2      	bgt.n	800bd8a <_printf_i+0x216>
 800bda4:	e7eb      	b.n	800bd7e <_printf_i+0x20a>
 800bda6:	2500      	movs	r5, #0
 800bda8:	f104 0619 	add.w	r6, r4, #25
 800bdac:	e7f5      	b.n	800bd9a <_printf_i+0x226>
 800bdae:	bf00      	nop
 800bdb0:	0800c279 	.word	0x0800c279
 800bdb4:	0800c28a 	.word	0x0800c28a

0800bdb8 <__sflush_r>:
 800bdb8:	898a      	ldrh	r2, [r1, #12]
 800bdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	0710      	lsls	r0, r2, #28
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	d458      	bmi.n	800be78 <__sflush_r+0xc0>
 800bdc6:	684b      	ldr	r3, [r1, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dc05      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dc02      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	d0f9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800bdde:	2300      	movs	r3, #0
 800bde0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bde4:	682f      	ldr	r7, [r5, #0]
 800bde6:	6a21      	ldr	r1, [r4, #32]
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	d032      	beq.n	800be52 <__sflush_r+0x9a>
 800bdec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	075a      	lsls	r2, r3, #29
 800bdf2:	d505      	bpl.n	800be00 <__sflush_r+0x48>
 800bdf4:	6863      	ldr	r3, [r4, #4]
 800bdf6:	1ac0      	subs	r0, r0, r3
 800bdf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdfa:	b10b      	cbz	r3, 800be00 <__sflush_r+0x48>
 800bdfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdfe:	1ac0      	subs	r0, r0, r3
 800be00:	2300      	movs	r3, #0
 800be02:	4602      	mov	r2, r0
 800be04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be06:	6a21      	ldr	r1, [r4, #32]
 800be08:	4628      	mov	r0, r5
 800be0a:	47b0      	blx	r6
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	d106      	bne.n	800be20 <__sflush_r+0x68>
 800be12:	6829      	ldr	r1, [r5, #0]
 800be14:	291d      	cmp	r1, #29
 800be16:	d82b      	bhi.n	800be70 <__sflush_r+0xb8>
 800be18:	4a29      	ldr	r2, [pc, #164]	; (800bec0 <__sflush_r+0x108>)
 800be1a:	410a      	asrs	r2, r1
 800be1c:	07d6      	lsls	r6, r2, #31
 800be1e:	d427      	bmi.n	800be70 <__sflush_r+0xb8>
 800be20:	2200      	movs	r2, #0
 800be22:	6062      	str	r2, [r4, #4]
 800be24:	04d9      	lsls	r1, r3, #19
 800be26:	6922      	ldr	r2, [r4, #16]
 800be28:	6022      	str	r2, [r4, #0]
 800be2a:	d504      	bpl.n	800be36 <__sflush_r+0x7e>
 800be2c:	1c42      	adds	r2, r0, #1
 800be2e:	d101      	bne.n	800be34 <__sflush_r+0x7c>
 800be30:	682b      	ldr	r3, [r5, #0]
 800be32:	b903      	cbnz	r3, 800be36 <__sflush_r+0x7e>
 800be34:	6560      	str	r0, [r4, #84]	; 0x54
 800be36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be38:	602f      	str	r7, [r5, #0]
 800be3a:	2900      	cmp	r1, #0
 800be3c:	d0c9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be42:	4299      	cmp	r1, r3
 800be44:	d002      	beq.n	800be4c <__sflush_r+0x94>
 800be46:	4628      	mov	r0, r5
 800be48:	f7ff fc96 	bl	800b778 <_free_r>
 800be4c:	2000      	movs	r0, #0
 800be4e:	6360      	str	r0, [r4, #52]	; 0x34
 800be50:	e7c0      	b.n	800bdd4 <__sflush_r+0x1c>
 800be52:	2301      	movs	r3, #1
 800be54:	4628      	mov	r0, r5
 800be56:	47b0      	blx	r6
 800be58:	1c41      	adds	r1, r0, #1
 800be5a:	d1c8      	bne.n	800bdee <__sflush_r+0x36>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0c5      	beq.n	800bdee <__sflush_r+0x36>
 800be62:	2b1d      	cmp	r3, #29
 800be64:	d001      	beq.n	800be6a <__sflush_r+0xb2>
 800be66:	2b16      	cmp	r3, #22
 800be68:	d101      	bne.n	800be6e <__sflush_r+0xb6>
 800be6a:	602f      	str	r7, [r5, #0]
 800be6c:	e7b1      	b.n	800bdd2 <__sflush_r+0x1a>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	e7ad      	b.n	800bdd4 <__sflush_r+0x1c>
 800be78:	690f      	ldr	r7, [r1, #16]
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	d0a9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be7e:	0793      	lsls	r3, r2, #30
 800be80:	680e      	ldr	r6, [r1, #0]
 800be82:	bf08      	it	eq
 800be84:	694b      	ldreq	r3, [r1, #20]
 800be86:	600f      	str	r7, [r1, #0]
 800be88:	bf18      	it	ne
 800be8a:	2300      	movne	r3, #0
 800be8c:	eba6 0807 	sub.w	r8, r6, r7
 800be90:	608b      	str	r3, [r1, #8]
 800be92:	f1b8 0f00 	cmp.w	r8, #0
 800be96:	dd9c      	ble.n	800bdd2 <__sflush_r+0x1a>
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be9c:	4643      	mov	r3, r8
 800be9e:	463a      	mov	r2, r7
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b0      	blx	r6
 800bea4:	2800      	cmp	r0, #0
 800bea6:	dc06      	bgt.n	800beb6 <__sflush_r+0xfe>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beb4:	e78e      	b.n	800bdd4 <__sflush_r+0x1c>
 800beb6:	4407      	add	r7, r0
 800beb8:	eba8 0800 	sub.w	r8, r8, r0
 800bebc:	e7e9      	b.n	800be92 <__sflush_r+0xda>
 800bebe:	bf00      	nop
 800bec0:	dfbffffe 	.word	0xdfbffffe

0800bec4 <_fflush_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	690b      	ldr	r3, [r1, #16]
 800bec8:	4605      	mov	r5, r0
 800beca:	460c      	mov	r4, r1
 800becc:	b913      	cbnz	r3, 800bed4 <_fflush_r+0x10>
 800bece:	2500      	movs	r5, #0
 800bed0:	4628      	mov	r0, r5
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	b118      	cbz	r0, 800bede <_fflush_r+0x1a>
 800bed6:	6a03      	ldr	r3, [r0, #32]
 800bed8:	b90b      	cbnz	r3, 800bede <_fflush_r+0x1a>
 800beda:	f7ff fb2d 	bl	800b538 <__sinit>
 800bede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0f3      	beq.n	800bece <_fflush_r+0xa>
 800bee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bee8:	07d0      	lsls	r0, r2, #31
 800beea:	d404      	bmi.n	800bef6 <_fflush_r+0x32>
 800beec:	0599      	lsls	r1, r3, #22
 800beee:	d402      	bmi.n	800bef6 <_fflush_r+0x32>
 800bef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bef2:	f7ff fc30 	bl	800b756 <__retarget_lock_acquire_recursive>
 800bef6:	4628      	mov	r0, r5
 800bef8:	4621      	mov	r1, r4
 800befa:	f7ff ff5d 	bl	800bdb8 <__sflush_r>
 800befe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf00:	07da      	lsls	r2, r3, #31
 800bf02:	4605      	mov	r5, r0
 800bf04:	d4e4      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	059b      	lsls	r3, r3, #22
 800bf0a:	d4e1      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf0e:	f7ff fc23 	bl	800b758 <__retarget_lock_release_recursive>
 800bf12:	e7dd      	b.n	800bed0 <_fflush_r+0xc>

0800bf14 <__sread>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	460c      	mov	r4, r1
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	f000 f8f4 	bl	800c108 <_read_r>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	bfab      	itete	ge
 800bf24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf26:	89a3      	ldrhlt	r3, [r4, #12]
 800bf28:	181b      	addge	r3, r3, r0
 800bf2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf2e:	bfac      	ite	ge
 800bf30:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf32:	81a3      	strhlt	r3, [r4, #12]
 800bf34:	bd10      	pop	{r4, pc}

0800bf36 <__swrite>:
 800bf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3a:	461f      	mov	r7, r3
 800bf3c:	898b      	ldrh	r3, [r1, #12]
 800bf3e:	05db      	lsls	r3, r3, #23
 800bf40:	4605      	mov	r5, r0
 800bf42:	460c      	mov	r4, r1
 800bf44:	4616      	mov	r6, r2
 800bf46:	d505      	bpl.n	800bf54 <__swrite+0x1e>
 800bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f000 f8c8 	bl	800c0e4 <_lseek_r>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	4632      	mov	r2, r6
 800bf62:	463b      	mov	r3, r7
 800bf64:	4628      	mov	r0, r5
 800bf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	f000 b8df 	b.w	800c12c <_write_r>

0800bf6e <__sseek>:
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf76:	f000 f8b5 	bl	800c0e4 <_lseek_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	bf15      	itete	ne
 800bf80:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf8a:	81a3      	strheq	r3, [r4, #12]
 800bf8c:	bf18      	it	ne
 800bf8e:	81a3      	strhne	r3, [r4, #12]
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <__sclose>:
 800bf92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf96:	f000 b895 	b.w	800c0c4 <_close_r>

0800bf9a <__swbuf_r>:
 800bf9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9c:	460e      	mov	r6, r1
 800bf9e:	4614      	mov	r4, r2
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	b118      	cbz	r0, 800bfac <__swbuf_r+0x12>
 800bfa4:	6a03      	ldr	r3, [r0, #32]
 800bfa6:	b90b      	cbnz	r3, 800bfac <__swbuf_r+0x12>
 800bfa8:	f7ff fac6 	bl	800b538 <__sinit>
 800bfac:	69a3      	ldr	r3, [r4, #24]
 800bfae:	60a3      	str	r3, [r4, #8]
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	071a      	lsls	r2, r3, #28
 800bfb4:	d525      	bpl.n	800c002 <__swbuf_r+0x68>
 800bfb6:	6923      	ldr	r3, [r4, #16]
 800bfb8:	b31b      	cbz	r3, 800c002 <__swbuf_r+0x68>
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	6922      	ldr	r2, [r4, #16]
 800bfbe:	1a98      	subs	r0, r3, r2
 800bfc0:	6963      	ldr	r3, [r4, #20]
 800bfc2:	b2f6      	uxtb	r6, r6
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	4637      	mov	r7, r6
 800bfc8:	dc04      	bgt.n	800bfd4 <__swbuf_r+0x3a>
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f7ff ff79 	bl	800bec4 <_fflush_r>
 800bfd2:	b9e0      	cbnz	r0, 800c00e <__swbuf_r+0x74>
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	701e      	strb	r6, [r3, #0]
 800bfe2:	6962      	ldr	r2, [r4, #20]
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d004      	beq.n	800bff4 <__swbuf_r+0x5a>
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	07db      	lsls	r3, r3, #31
 800bfee:	d506      	bpl.n	800bffe <__swbuf_r+0x64>
 800bff0:	2e0a      	cmp	r6, #10
 800bff2:	d104      	bne.n	800bffe <__swbuf_r+0x64>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4628      	mov	r0, r5
 800bff8:	f7ff ff64 	bl	800bec4 <_fflush_r>
 800bffc:	b938      	cbnz	r0, 800c00e <__swbuf_r+0x74>
 800bffe:	4638      	mov	r0, r7
 800c000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f805 	bl	800c014 <__swsetup_r>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0d5      	beq.n	800bfba <__swbuf_r+0x20>
 800c00e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c012:	e7f4      	b.n	800bffe <__swbuf_r+0x64>

0800c014 <__swsetup_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <__swsetup_r+0xac>)
 800c018:	4605      	mov	r5, r0
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	460c      	mov	r4, r1
 800c01e:	b118      	cbz	r0, 800c028 <__swsetup_r+0x14>
 800c020:	6a03      	ldr	r3, [r0, #32]
 800c022:	b90b      	cbnz	r3, 800c028 <__swsetup_r+0x14>
 800c024:	f7ff fa88 	bl	800b538 <__sinit>
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c02e:	0718      	lsls	r0, r3, #28
 800c030:	d422      	bmi.n	800c078 <__swsetup_r+0x64>
 800c032:	06d9      	lsls	r1, r3, #27
 800c034:	d407      	bmi.n	800c046 <__swsetup_r+0x32>
 800c036:	2309      	movs	r3, #9
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c044:	e034      	b.n	800c0b0 <__swsetup_r+0x9c>
 800c046:	0758      	lsls	r0, r3, #29
 800c048:	d512      	bpl.n	800c070 <__swsetup_r+0x5c>
 800c04a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c04c:	b141      	cbz	r1, 800c060 <__swsetup_r+0x4c>
 800c04e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c052:	4299      	cmp	r1, r3
 800c054:	d002      	beq.n	800c05c <__swsetup_r+0x48>
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff fb8e 	bl	800b778 <_free_r>
 800c05c:	2300      	movs	r3, #0
 800c05e:	6363      	str	r3, [r4, #52]	; 0x34
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	2300      	movs	r3, #0
 800c06a:	6063      	str	r3, [r4, #4]
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f043 0308 	orr.w	r3, r3, #8
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	b94b      	cbnz	r3, 800c090 <__swsetup_r+0x7c>
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c086:	d003      	beq.n	800c090 <__swsetup_r+0x7c>
 800c088:	4621      	mov	r1, r4
 800c08a:	4628      	mov	r0, r5
 800c08c:	f7ff fab0 	bl	800b5f0 <__smakebuf_r>
 800c090:	89a0      	ldrh	r0, [r4, #12]
 800c092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c096:	f010 0301 	ands.w	r3, r0, #1
 800c09a:	d00a      	beq.n	800c0b2 <__swsetup_r+0x9e>
 800c09c:	2300      	movs	r3, #0
 800c09e:	60a3      	str	r3, [r4, #8]
 800c0a0:	6963      	ldr	r3, [r4, #20]
 800c0a2:	425b      	negs	r3, r3
 800c0a4:	61a3      	str	r3, [r4, #24]
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	b943      	cbnz	r3, 800c0bc <__swsetup_r+0xa8>
 800c0aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0ae:	d1c4      	bne.n	800c03a <__swsetup_r+0x26>
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	0781      	lsls	r1, r0, #30
 800c0b4:	bf58      	it	pl
 800c0b6:	6963      	ldrpl	r3, [r4, #20]
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	e7f4      	b.n	800c0a6 <__swsetup_r+0x92>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7f7      	b.n	800c0b0 <__swsetup_r+0x9c>
 800c0c0:	20000084 	.word	0x20000084

0800c0c4 <_close_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	; (800c0e0 <_close_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f5 ff30 	bl	8001f34 <_close>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_close_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_close_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20000d30 	.word	0x20000d30

0800c0e4 <_lseek_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d07      	ldr	r5, [pc, #28]	; (800c104 <_lseek_r+0x20>)
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	602a      	str	r2, [r5, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f7f5 ff35 	bl	8001f62 <_lseek>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d102      	bne.n	800c102 <_lseek_r+0x1e>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	b103      	cbz	r3, 800c102 <_lseek_r+0x1e>
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	20000d30 	.word	0x20000d30

0800c108 <_read_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	4d07      	ldr	r5, [pc, #28]	; (800c128 <_read_r+0x20>)
 800c10c:	4604      	mov	r4, r0
 800c10e:	4608      	mov	r0, r1
 800c110:	4611      	mov	r1, r2
 800c112:	2200      	movs	r2, #0
 800c114:	602a      	str	r2, [r5, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	f7f5 ff34 	bl	8001f84 <_read>
 800c11c:	1c43      	adds	r3, r0, #1
 800c11e:	d102      	bne.n	800c126 <_read_r+0x1e>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	b103      	cbz	r3, 800c126 <_read_r+0x1e>
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	20000d30 	.word	0x20000d30

0800c12c <_write_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d07      	ldr	r5, [pc, #28]	; (800c14c <_write_r+0x20>)
 800c130:	4604      	mov	r4, r0
 800c132:	4608      	mov	r0, r1
 800c134:	4611      	mov	r1, r2
 800c136:	2200      	movs	r2, #0
 800c138:	602a      	str	r2, [r5, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	f7f5 fece 	bl	8001edc <_write>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d102      	bne.n	800c14a <_write_r+0x1e>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	b103      	cbz	r3, 800c14a <_write_r+0x1e>
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	20000d30 	.word	0x20000d30

0800c150 <_init>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr

0800c15c <_fini>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr
